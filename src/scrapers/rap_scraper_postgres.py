#!/usr/bin/env python3
"""
üé§ –ú–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω –≤ PostgreSQL

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –°–∫—Ä–∞–ø–∏–Ω–≥ —Ç—Ä–µ–∫–æ–≤ –∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å Genius API
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python src/scrapers/rap_scraper_postgres.py
–∏–ª–∏ —á–µ—Ä–µ–∑ CLI: python scripts/rap_scraper_cli.py scraping

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- lyricsgenius
- src/utils/postgres_db.py
- config.yaml
- PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (rap_lyrics)

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
- –õ–æ–≥–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –æ—à–∏–±–æ–∫, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ graceful shutdown

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import lyricsgenius
from requests.exceptions import ProxyError, RequestException
import time
import random
import logging
import re
import signal
import sys
from datetime import datetime
import json
import os
import gc
import psutil
from typing import List, Optional, Dict, Generator, Tuple
from ..utils.config import GENIUS_TOKEN, LOG_FORMAT, LOG_FILE, DATA_DIR
from ..utils.postgres_db import PostgreSQLManager
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = GENIUS_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO,
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

if not TOKEN:
    logger.error("Genius API token not found in .env!")
    exit(1)

class ResourceMonitor:

    
    def __init__(self, memory_limit_mb: int = 2048):
        self.process = psutil.Process()
        self.memory_limit_mb = memory_limit_mb
        self.start_memory = self.get_memory_usage()
        
    def get_memory_usage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë"""
        return self.process.memory_info().rss / 1024 / 1024
    
    def get_cpu_usage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ %"""
        return self.process.cpu_percent(interval=1)
    
    def check_memory_limit(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏"""
        current_memory = self.get_memory_usage()
        return current_memory > self.memory_limit_mb
    
    def log_resources(self):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        memory_mb = self.get_memory_usage()
        cpu_percent = self.get_cpu_usage()
        logger.info(f"üíæ Memory: {memory_mb:.1f}MB | üñ•Ô∏è CPU: {cpu_percent:.1f}%")
        
        if memory_mb > self.memory_limit_mb * 0.8:  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
            logger.warning(f"‚ö†Ô∏è High memory usage: {memory_mb:.1f}MB (limit: {self.memory_limit_mb}MB)")
    
    def force_garbage_collection(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        collected = gc.collect()
        logger.debug(f"üóëÔ∏è Garbage collection: freed {collected} objects")

class OptimizedPostgreSQLScraper:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–µ—Ä —Å PostgreSQL –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
    
    def __init__(self, token: str, memory_limit_mb: int = 2048):
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        self._clear_proxy_env()
        
        self.genius = lyricsgenius.Genius(
            token,
            timeout=30,  # –£–≤–µ–ª–∏—á–∏–ª–∏ timeout
            retries=2,   # –£–º–µ–Ω—å—à–∏–ª–∏ retries –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            remove_section_headers=True,
            skip_non_songs=True,
            excluded_terms=["(Remix)", "(Live)", "(Instrumental)", "(Skit)"]
        )
        
        self.db = PostgreSQLManager()
        self.monitor = ResourceMonitor(memory_limit_mb)
        self.session_stats = {
            "processed": 0, "added": 0, "skipped": 0, "errors": 0,
            "memory_warnings": 0, "gc_runs": 0
        }
        
        self.min_delay = 2.0
        self.max_delay = 5.0
        self.error_delay = 15.0
        self.max_retries = 3
        self.shutdown_requested = False
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.songs_since_gc = 0
        self.gc_interval = 50  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 50 –ø–µ—Å–µ–Ω
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.cleared_proxies = {}
        
        self._setup_signal_handlers()
        
        logger.info("üêò –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω PostgreSQL —Å–∫—Ä–∞–ø–µ—Ä")
        
    def _clear_proxy_env(self):
        """–£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        proxy_vars = [
            'HTTP_PROXY', 'HTTPS_PROXY', 'http_proxy', 'https_proxy',
            'FTP_PROXY', 'ftp_proxy', 'ALL_PROXY', 'all_proxy',
            'NO_PROXY', 'no_proxy'
        ]
        
        self.cleared_proxies = {}
        for var in proxy_vars:
            if var in os.environ:
                self.cleared_proxies[var] = os.environ.pop(var)
                logger.debug(f"üö´ –£–±—Ä–∞–ª–∏ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: {var}")
                
    def _restore_proxy_env(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        for var, value in self.cleared_proxies.items():
            os.environ[var] = value
        
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        if sys.platform == "win32":
            try:
                signal.signal(signal.SIGBREAK, self._signal_handler)
            except AttributeError:
                pass

    def _signal_handler(self, signum, frame):
        logger.info(f"\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.shutdown_requested = True

    def safe_delay(self, is_error: bool = False):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø–∞—É–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
        delay = self.error_delay if is_error else random.uniform(self.min_delay, self.max_delay)
        intervals = int(delay)
        remainder = delay - intervals
        
        for _ in range(intervals):
            if self.shutdown_requested:
                return
            try:
                time.sleep(1)
            except KeyboardInterrupt:
                self.shutdown_requested = True
                return
                
        if remainder > 0 and not self.shutdown_requested:
            try:
                time.sleep(remainder)
            except KeyboardInterrupt:
                self.shutdown_requested = True

    def clean_lyrics(self, lyrics: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏"""
        if not lyrics:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–∞—Ö
        lyrics = re.sub(r"^\d+\s+Contributors.*?Lyrics", "", lyrics, flags=re.MULTILINE | re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        lyrics = re.sub(r"Translations[A-Za-z]+", "", lyrics, flags=re.MULTILINE)
        
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é Genius
        lyrics = re.sub(r"Lyrics[A-Z].*?Read More\s*", "", lyrics, flags=re.DOTALL)
        lyrics = re.sub(r"(?i)(Embed|Submitted by [^\n]*|Written by [^\n]*|You might also like).*$", "", lyrics, flags=re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏ –±–ª–æ–∫–∏ –≤ —Å–∫–æ–±–∫–∞—Ö
        lyrics = re.sub(r"https?://[^\s]+", "", lyrics)
        lyrics = re.sub(r"\[.*?\]", "", lyrics)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        lyrics = re.sub(r"\n{3,}", "\n\n", lyrics)
        lyrics = re.sub(r"\n{2,}", "\n", lyrics.strip())
        
        return lyrics.strip()

    def _is_valid_lyrics(self, lyrics: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not lyrics:
            return False
            
        lyrics = lyrics.strip()
        if len(lyrics) < 100 or len(lyrics.split()) < 20:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏
        instrumental_markers = [
            "instrumental", "no lyrics", "–±–µ–∑ —Å–ª–æ–≤", "music only", 
            "beat only", "outro", "intro", "skit"
        ]
        return not any(marker in lyrics.lower() for marker in instrumental_markers)

    def extract_metadata(self, song) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Å–Ω–∏"""
        metadata = {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            if hasattr(song, 'album') and song.album:
                metadata['album'] = song.album.get('name') if isinstance(song.album, dict) else str(song.album)
            
            if hasattr(song, 'release_date_for_display'):
                metadata['release_date'] = song.release_date_for_display
                
            if hasattr(song, 'song_art_image_url'):
                metadata['song_art_url'] = song.song_art_image_url
                
            if hasattr(song, 'stats') and song.stats:
                if 'pageviews' in song.stats:
                    metadata['popularity_score'] = song.stats['pageviews']
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
            if hasattr(song, 'language'):
                metadata['language'] = song.language
            else:
                metadata['language'] = 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            
        return metadata

    def get_songs_generator(self, artist_name: str, max_songs: int = 500) -> Generator[Tuple[any, int], None, None]:
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω (—ç–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏) —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"üéµ –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞: {artist_name}")
            artist = None
            
            # –ü–æ–ø—ã—Ç–∫–∞ 1: –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
            try:
                artist = self.genius.search_artist(
                    artist_name, 
                    max_songs=max_songs,  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
                    sort="popularity", 
                    get_full_info=False
                )
                if artist and artist.songs:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞—Ä—Ç–∏—Å—Ç: {artist.name} —Å {len(artist.songs)} –ø–µ—Å–Ω—è–º–∏")
                
            except Exception as e:
                error_msg = str(e).lower()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞—Ä—Ç–∏—Å—Ç–∞ {artist_name}: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–∫—Å–∏/—Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
                if any(keyword in error_msg for keyword in ['proxy', 'connection', 'timeout', 'retries exceeded']):
                    logger.warning("üîÑ –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã...")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ 2: –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
                    try:
                        logger.info("üîß –ü–æ–ø—ã—Ç–∫–∞ 2: –ò–∑–º–µ–Ω—è–µ–º User-Agent –∏ headers...")
                        self.genius._session.headers.update({
                            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                            'Accept': 'application/json, text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                            'Accept-Language': 'en-US,en;q=0.5',
                            'Connection': 'keep-alive'
                        })
                        
                        artist = self.genius.search_artist(
                            artist_name, 
                            max_songs=max_songs,  # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏
                            sort="popularity"
                        )
                        if artist and artist.songs:
                            logger.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ 2 —É—Å–ø–µ—à–Ω–∞: {len(artist.songs)} –ø–µ—Å–µ–Ω")
                            
                    except Exception as e2:
                        logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ 2 –Ω–µ —É–¥–∞–ª–∞—Å—å: {e2}")
                        
                        # –ü–æ–ø—ã—Ç–∫–∞ 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
                        try:
                            logger.info("üîß –ü–æ–ø—ã—Ç–∫–∞ 3: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫...")
                            artist = self.genius.search_artist(
                                artist_name, 
                                max_songs=5,
                                sort="popularity"
                            )
                            if artist and artist.songs:
                                logger.info(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ 3 —É—Å–ø–µ—à–Ω–∞: {len(artist.songs)} –ø–µ—Å–µ–Ω")
                        except Exception as e3:
                            logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {e3}")
                            return
                else:
                    # –ù–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if not artist or not hasattr(artist, 'songs') or not artist.songs:
                logger.warning(f"‚ùå –ê—Ä—Ç–∏—Å—Ç {artist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω")
                return
            
            total_songs = len(artist.songs)
            logger.info(f"üìÄ –ù–∞–π–¥–µ–Ω–æ {total_songs} –ø–µ—Å–µ–Ω –¥–ª—è {artist_name}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            logger.info("üéµ –ü–µ—Ä–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:")
            for i, song in enumerate(artist.songs[:5], 1):
                logger.info(f"  {i}. {song.title}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Å–Ω–∏ –ø–æ –æ–¥–Ω–æ–π
            for i, song in enumerate(artist.songs):
                if self.shutdown_requested:
                    logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–µ—Å–Ω–µ {i+1}/{total_songs}")
                    break
                    
                yield song, i + 1
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ N –ø–µ—Å–µ–Ω
                self.songs_since_gc += 1
                if self.songs_since_gc >= self.gc_interval:
                    self.monitor.force_garbage_collection()
                    self.session_stats["gc_runs"] += 1
                    self.songs_since_gc = 0
                    
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é –∏–∑ –ø–∞–º—è—Ç–∏
                del song
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω –¥–ª—è {artist_name}: {e}")
            return

    def scrape_artist_songs(self, artist_name: str, max_songs: int = 500) -> int:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –ø–µ—Å–µ–Ω –∞—Ä—Ç–∏—Å—Ç–∞ —Å PostgreSQL"""
        added_count = 0
        retry_count = 0
        
        logger.info(f"üé§ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä—Ç–∏—Å—Ç–∞: {artist_name}")
        
        while retry_count < self.max_retries and not self.shutdown_requested:
            try:
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
                self.monitor.log_resources()
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏
                if self.monitor.check_memory_limit():
                    logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
                    self.monitor.force_garbage_collection()
                    self.session_stats["memory_warnings"] += 1
                    
                    if self.monitor.check_memory_limit():
                        logger.error("üö® –ö—Ä–∏—Ç–∏—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞.")
                        return 0
                
                # –ü–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Å–µ–Ω
                songs_generator = self.get_songs_generator(artist_name, max_songs)
                processed_count = 0
                
                for song, song_number in songs_generator:
                    if self.shutdown_requested:
                        break
                        
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏, –≤–∫–ª—é—á–∞—è lyrics
                        try:
                            # –ï—Å–ª–∏ —É –ø–µ—Å–Ω–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                            if not hasattr(song, 'lyrics') or not song.lyrics:
                                logger.info(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è: {song.title}")
                                full_song = self.genius.song(song.id)
                                if full_song and hasattr(full_song, 'lyrics'):
                                    song = full_song
                                else:
                                    logger.debug(f"‚è© –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç: {song.title}")
                                    self.session_stats["skipped"] += 1
                                    continue
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è {song.title}: {e}")
                            self.session_stats["errors"] += 1
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
                        if hasattr(song, 'url') and self.db.song_exists(url=song.url):
                            logger.debug(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {song.title}")
                            self.session_stats["skipped"] += 1
                            continue

                        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                        lyrics = self.clean_lyrics(song.lyrics if hasattr(song, 'lyrics') else "")
                        if not self._is_valid_lyrics(lyrics):
                            logger.debug(f"‚è© –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {song.title}")
                            self.session_stats["skipped"] += 1
                            continue

                        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                        metadata = self.extract_metadata(song)

                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL
                        song_url = getattr(song, 'url', f"https://genius.com/songs/{getattr(song, 'id', 'unknown')}")
                        if self.db.add_song(
                            artist_name, song.title, lyrics, song_url, 
                            getattr(song, 'id', None), metadata
                        ):
                            added_count += 1
                            self.session_stats["added"] += 1
                            word_count = len(lyrics.split())
                            quality = self.db._calculate_lyrics_quality(lyrics)
                            
                            logger.info(
                                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ PostgreSQL: {artist_name} - {song.title} "
                                f"({word_count} —Å–ª–æ–≤, –∫–∞—á–µ—Å—Ç–≤–æ: {quality:.2f})"
                            )
                            
                            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 –ø–µ—Å–µ–Ω
                            if self.session_stats["added"] % 10 == 0:
                                current_stats = self.db.get_stats()
                                logger.info(f"üìä –í PostgreSQL: {current_stats['total_songs']} –ø–µ—Å–µ–Ω")
                                
                        else:
                            self.session_stats["skipped"] += 1

                        self.session_stats["processed"] += 1
                        processed_count += 1
                        
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 25 –ø–µ—Å–µ–Ω
                        if processed_count % 25 == 0:
                            logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–µ—Å–µ–Ω –¥–ª—è {artist_name}")
                            self.monitor.log_resources()

                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–µ—Å–Ω—è–º–∏
                        if not self.shutdown_requested:
                            self.safe_delay()

                    except Exception as e:
                        if "timeout" in str(e).lower():
                            logger.error(f"‚è∞ Timeout –¥–ª—è {song.title}: {e}")
                            self.session_stats["errors"] += 1
                            self.safe_delay(is_error=True)
                        elif any(keyword in str(e).lower() for keyword in ['proxy', 'connection', 'retries exceeded']):
                            logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {song.title}: {e}")
                            self.session_stats["errors"] += 1
                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                            logger.info("‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ...")
                            time.sleep(10)
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –ø–µ—Å–Ω–µ–π {song.title}: {e}")
                            self.session_stats["errors"] += 1
                            self.safe_delay(is_error=True)

                break  # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞—Ä—Ç–∏—Å—Ç–∞

            except Exception as e:
                if "rate limit" in str(e).lower() or "429" in str(e):
                    logger.error(f"üö´ Rate Limit –¥–ª—è {artist_name}: {e}")
                    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(60)
                    retry_count += 1
                else:
                    retry_count += 1
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –∞—Ä—Ç–∏—Å—Ç–æ–º {artist_name} (–ø–æ–ø—ã—Ç–∫–∞ {retry_count}): {e}")
                    
                    if retry_count >= self.max_retries:
                        logger.error(f"üîÑ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {artist_name}")
                        self.session_stats["errors"] += 1
                        break
                        
                    self.safe_delay(is_error=True)

        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {artist_name}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ø–µ—Å–µ–Ω")
        return added_count

    def show_current_results(self):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å PostgreSQL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        stats = self.db.get_stats()
        recent_songs = self.db.get_recent_songs(5)
        
        logger.info(f"\n{'='*70}")
        logger.info(f"üêò –†–ï–ó–£–õ–¨–¢–ê–¢–´ PostgreSQL:")
        logger.info(f"üéµ –í—Å–µ–≥–æ –ø–µ—Å–µ–Ω –≤ –ë–î: {stats['total_songs']}")
        logger.info(f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤: {stats['unique_artists']}")
        logger.info(f"üìù –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤ –≤ –ø–µ—Å–Ω–µ: {stats['avg_words']}")
        logger.info(f"‚≠ê –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['avg_quality']}")
        logger.info(f"üè∑Ô∏è –° –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏: {stats['with_metadata']}")
        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ —Å–µ—Å—Å–∏—é: {self.session_stats['added']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        memory_mb = self.monitor.get_memory_usage()
        logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.1f}MB")
        logger.info(f"üóëÔ∏è –û—á–∏—Å—Ç–æ–∫ –ø–∞–º—è—Ç–∏: {self.session_stats['gc_runs']}")
        
        if recent_songs:
            logger.info(f"\nüé∂ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:")
            for song in recent_songs:
                genre_info = f" [{song['genre']}]" if song['genre'] else ""
                quality_info = f" (Q:{song['lyrics_quality_score']:.2f})" if song['lyrics_quality_score'] else ""
                logger.info(f"  ‚Ä¢ {song['artist']} - {song['title']}{genre_info} "
                          f"({song['word_count']} —Å–ª–æ–≤){quality_info}")
        
        logger.info(f"{'='*70}\n")

    def run_scraping_session(self, artists: List[str], songs_per_artist: int = 500):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å PostgreSQL"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å PostgreSQL: {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤, {songs_per_artist} –ø–µ—Å–µ–Ω –∫–∞–∂–¥—ã–π")
        start_time = datetime.now()
        
        initial_stats = self.db.get_stats()
        logger.info(f"üìö –£–∂–µ –≤ PostgreSQL: {initial_stats['total_songs']} –ø–µ—Å–µ–Ω")
        
        try:
            for i, artist_name in enumerate(artists, 1):
                if self.shutdown_requested:
                    logger.info("üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
                    break
                    
                logger.info(f"\n{'='*60}")
                logger.info(f"üé§ –ê—Ä—Ç–∏—Å—Ç {i}/{len(artists)}: {artist_name}")
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∞—Ä—Ç–∏—Å—Ç–æ–º
                self.monitor.log_resources()
                
                added = self.scrape_artist_songs(artist_name, songs_per_artist)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–µ—Å–µ–Ω –¥–ª—è {artist_name}: {added}")
                
                stats = self.db.get_stats()
                logger.info(f"üìä –í—Å–µ–≥–æ –≤ PostgreSQL: {stats['total_songs']} –ø–µ—Å–µ–Ω –æ—Ç {stats['unique_artists']} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
                if i < len(artists) and not self.shutdown_requested:
                    artist_delay = random.uniform(10, 20)
                    logger.info(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ä—Ç–∏—Å—Ç–∞–º–∏: {artist_delay:.1f}—Å")
                    
                    intervals = int(artist_delay)
                    for _ in range(intervals):
                        if self.shutdown_requested:
                            break
                        time.sleep(1)

        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
            self.shutdown_requested = True
        except MemoryError:
            logger.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏!")
            self.shutdown_requested = True
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.show_current_results()
            
            end_time = datetime.now()
            duration = end_time - start_time
            final_stats = self.db.get_stats()
            
            logger.info(f"\n{'='*60}")
            logger.info(f"üèÅ –°–ï–°–°–ò–Ø PostgreSQL –ó–ê–í–ï–†–®–ï–ù–ê")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
            logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.session_stats['processed']}")
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {self.session_stats['added']}")
            logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: {self.session_stats['skipped']}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.session_stats['errors']}")
            logger.info(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–∞–º—è—Ç–∏: {self.session_stats['memory_warnings']}")
            logger.info(f"üóëÔ∏è –û—á–∏—Å—Ç–æ–∫ –ø–∞–º—è—Ç–∏: {self.session_stats['gc_runs']}")
            logger.info(f"üìö –í—Å–µ–≥–æ –≤ PostgreSQL: {final_stats['total_songs']} –ø–µ—Å–µ–Ω")
            logger.info(f"‚≠ê –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {final_stats['avg_quality']}")
            
            self.close()

    def close(self):
        logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL...")
        self.db.close()
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
        self._restore_proxy_env()

def load_artist_list(filename: str = "rap_artists.json") -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º remaining_artists.json"""
    remaining_file = DATA_DIR / "remaining_artists.json"
    if remaining_file.exists():
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ {remaining_file}")
        with open(remaining_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    full_file = DATA_DIR / filename
    if full_file.exists():
        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ {full_file}")
        with open(full_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        logger.info("üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        artists = [
            "J. Cole", "Drake", "Eminem", "Kanye West",
            "Travis Scott", "Lil Wayne", "Jay-Z", "Nas", "Tupac",
            "The Notorious B.I.G.", "Lil Baby", "Future", "21 Savage", "Post Malone",
            "Tyler, The Creator", "A$AP Rocky", "Mac Miller", "Childish Gambino", "Logic",
            "Big Sean", "Chance the Rapper", "Wiz Khalifa", "Meek Mill", "2 Chainz",
            "Pusha T", "Danny Brown", "Earl Sweatshirt", "Vince Staples", "JID",
            "Denzel Curry", "Joey Bada$$", "Capital STEEZ", "MF DOOM", "Madlib",
            "ScHoolboy Q", "Ab-Soul", "Jay Rock", "SiR", "Reason",
            "YG", "Nipsey Hussle", "The Game", "Ice Cube", "Eazy-E",
            "Dr. Dre", "Snoop Dogg", "Warren G", "Nate Dogg", "Xzibit"
        ]
        full_file = DATA_DIR / filename
        with open(full_file, 'w', encoding='utf-8') as f:
            json.dump(artists, f, indent=2, ensure_ascii=False)
        return artists

def main():
    if not TOKEN:
        logger.error("‚ùå Genius API token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        exit(1)
        
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PostgreSQL —Å–∫—Ä–∞–ø–µ—Ä–∞
    MEMORY_LIMIT_MB = 3072  # 3GB –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏
    scraper = OptimizedPostgreSQLScraper(TOKEN, MEMORY_LIMIT_MB)
    
    try:
        artists = load_artist_list()
        SONGS_PER_ARTIST = 500
        
        logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        logger.info(f"üéµ –¶–µ–ª—å: ~{len(artists) * SONGS_PER_ARTIST} –ø–µ—Å–µ–Ω")
        logger.info(f"üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {MEMORY_LIMIT_MB}MB")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Get-Process python | Stop-Process -Force")
        
        scraper.run_scraping_session(artists, SONGS_PER_ARTIST)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        logger.info("üèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
