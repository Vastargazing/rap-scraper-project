# üê≥ Production Docker Compose for Rap Lyrics Analyzer API
version: '3.8'

services:
  rap-analyzer-api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    image: rap-analyzer:${VERSION:-latest}
    container_name: rap-analyzer-api
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - NOVITA_API_KEY=${NOVITA_API_KEY}
    ports:
      - "${API_PORT:-8000}:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/docs', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rap-analyzer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  postgres:
    image: ankane/pgvector:latest
    container_name: rap-analyzer-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rap_lyrics}
      POSTGRES_USER: ${POSTGRES_USER:-rap_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-rap_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rap-analyzer-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: rap-analyzer-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - rap-analyzer-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  rap-analyzer-network:
    driver: bridge
