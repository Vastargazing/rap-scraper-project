#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∫—Å–∏ –∏ —Å–µ—Ç–µ–≤—ã–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏.
"""

import json
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.scrapers.rap_scraper_optimized import OptimizedGeniusScraper, load_artist_list
from src.utils.config import DATA_DIR, GENIUS_TOKEN, LOG_FILE, LOG_FORMAT


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=logging.INFO,
        format=LOG_FORMAT,
        handlers=[
            logging.FileHandler(LOG_FILE, encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )
    return logging.getLogger(__name__)


def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger = logging.getLogger(__name__)

    if not GENIUS_TOKEN:
        logger.error("‚ùå GENIUS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        logger.error("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º:")
        logger.error("   GENIUS_TOKEN=your_token_here")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        import requests

        response = requests.get("https://api.genius.com/", timeout=10)
        if response.status_code == 401:  # Unauthorized –Ω–æ API –¥–æ—Å—Ç—É–ø–Ω–æ
            logger.info("‚úÖ API Genius –¥–æ—Å—Ç—É–ø–Ω–æ")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç API: {response.status_code}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API: {e}")
        logger.info("üîÑ –ë—É–¥–µ–º –ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—Ö–æ–¥–Ω—ã–µ –ø—É—Ç–∏...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏
    DATA_DIR.mkdir(exist_ok=True)
    logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {DATA_DIR}")

    return True


def save_remaining_artists(artists: list, processed_count: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞—Ä—Ç–∏—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
    remaining = artists[processed_count:]
    if remaining:
        remaining_file = DATA_DIR / "remaining_artists.json"
        with open(remaining_file, "w", encoding="utf-8") as f:
            json.dump(remaining, f, indent=2, ensure_ascii=False)
        logging.info(
            f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(remaining)} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞—Ä—Ç–∏—Å—Ç–æ–≤ –≤ {remaining_file}"
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    logger = setup_logging()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment():
        return 1

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞...")
    logger.info(f"üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: {LOG_FILE}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    MEMORY_LIMIT_MB = 4096  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏
    SONGS_PER_ARTIST = 100  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤
    try:
        artists = load_artist_list()
        logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        logger.info(f"üéµ –¶–µ–ª—å: ~{len(artists) * SONGS_PER_ARTIST} –ø–µ—Å–µ–Ω")
        logger.info(f"üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {MEMORY_LIMIT_MB}MB")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤
        logger.info("üé§ –ü–µ—Ä–≤—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã –≤ —Å–ø–∏—Å–∫–µ:")
        for i, artist in enumerate(artists[:5], 1):
            logger.info(f"  {i}. {artist}")
        if len(artists) > 5:
            logger.info(f"  ... –∏ –µ—â–µ {len(artists) - 5} –∞—Ä—Ç–∏—Å—Ç–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {e}")
        return 1

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∞–ø–µ—Ä–∞
    try:
        scraper = OptimizedGeniusScraper(GENIUS_TOKEN, None, MEMORY_LIMIT_MB)
        logger.info("‚úÖ –°–∫—Ä–∞–ø–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        initial_stats = scraper.db.get_stats()
        logger.info(
            f"üìö –¢–µ–∫—É—â–∞—è –ë–î: {initial_stats['total_songs']} –ø–µ—Å–µ–Ω –æ—Ç {initial_stats['unique_artists']} –∞—Ä—Ç–∏—Å—Ç–æ–≤"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∞–ø–µ—Ä–∞: {e}")
        return 1

    # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    processed_count = 0
    try:
        logger.info("\n" + "=" * 60)
        logger.info("üéµ –ù–ê–ß–ò–ù–ê–ï–ú –°–ö–†–ê–ü–ò–ù–ì")
        logger.info("=" * 60)
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")

        scraper.run_scraping_session(artists, SONGS_PER_ARTIST)

    except KeyboardInterrupt:
        logger.info("\n‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞—Ä—Ç–∏—Å—Ç–æ–≤
        save_remaining_artists(artists, processed_count)

    except MemoryError:
        logger.error("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏!")
        logger.error("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å SONGS_PER_ARTIST –∏–ª–∏ MEMORY_LIMIT_MB")
        save_remaining_artists(artists, processed_count)
        return 1

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")
        save_remaining_artists(artists, processed_count)
        return 1

    finally:
        try:
            scraper.close()
            logger.info("üîí –°–∫—Ä–∞–ø–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except:
            pass

    logger.info("üèÅ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return 0


if __name__ == "__main__":
    exit_code = main()
    if exit_code != 0:
        print(f"\n‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {exit_code})")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    sys.exit(exit_code)
