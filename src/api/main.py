"""
üöÄ –û–°–ù–û–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï FASTAPI - RAP ML API (v3.0.0)

üìã –ß–¢–û –≠–¢–û –§–ê–ô–õ:
    –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ç–ø-—Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI.
    –ó–¥–µ—Å—å:
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤–µ—Å—å API
    - –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
    - –£–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (startup/shutdown)
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è ML –º–æ–¥–µ–ª–∏ (QWEN analyzer)
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è CORS –∏ middleware

üîß –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
    ‚úÖ Config-based (–∫–æ–Ω—Ñ–∏–≥–∏ –∏–∑ .env —á–µ—Ä–µ–∑ Pydantic)
    ‚úÖ Graceful imports (–∏–º–ø–æ—Ä—Ç—ã —Å fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–µ—Ç—Å—è)
    ‚úÖ Modular routes (6 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ routes/)
    ‚úÖ Lifespan management (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
    ‚úÖ Exception handling (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)

üìä –û–°–ù–û–í–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
    1. Config management - –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å fallback
    2. Route imports - –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ (health, analyze, ml_models, batch, web, models_info)
    3. Lifespan context manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ startup/shutdown
    4. ML model initialization - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QWEN analyzer –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    5. CORS middleware - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    6. FastAPI app creation - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

üéØ –ü–û–¢–û–ö –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
    1Ô∏è‚É£ Python –∑–∞–≥—Ä—É–∂–∞–µ—Ç main.py (defines)
    2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã (graceful fallback)
    3Ô∏è‚É£ Uvicorn –∑–∞–ø—É—Å–∫–∞–µ—Ç FastAPI app
    4Ô∏è‚É£ lifespan.__aenter__() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è (startup):
       - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
       - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QWEN analyzer (3-5 —Å–µ–∫—É–Ω–¥!)
       - Exception handling –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å
    5Ô∏è‚É£ API –≥–æ—Ç–æ–≤–∞! –û–±—Å–ª—É–∂–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã
    6Ô∏è‚É£ –ü—Ä–∏ Ctrl+C: lifespan.__aexit__() (shutdown):
       - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
       - Cleanup —Ä–µ—Å—É—Ä—Å–æ–≤ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω)

‚öôÔ∏è –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –§–£–ù–ö–¶–ò–ò:
    - config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å fallback –∑–Ω–∞—á–µ–Ω–∏—è–º–∏)
    - ROUTES_AVAILABLE: –°–ª–æ–≤–∞—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    - INIT_FUNCTIONS: –°–ª–æ–≤–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (initialize_analyzer)
    - lifespan(): –ö–æ–Ω—Ç–µ–∫—Å—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
    - app: FastAPI instance (–≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)

üîë –ö–õ–Æ–ß–ï–í–´–ï –¢–ï–•–ù–û–õ–û–ì–ò–ò:
    üì¶ FastAPI - –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è API
    üêç asynccontextmanager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ (startup/shutdown)
    ‚ö° async/await - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    ü§ñ QWEN Analyzer - AI –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤
    üîê CORS - –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    üìù Pydantic - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

üöÄ –ö–ê–ö –ó–ê–ü–£–°–¢–ò–¢–¨:
    python -m uvicorn src.api.main:app --reload
    (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π)

    uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --workers 4
    (–¥–ª—è production —Å 4 —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏)

üìç –ê–î–†–ï–°–ê:
    API Swagger docs: http://localhost:8000/docs
    API ReDoc docs: http://localhost:8000/redoc
    API Health check: http://localhost:8000/health

‚ö†Ô∏è –í–ê–ñ–ù–û:
    - QWEN –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –ö–ê–ñ–î–û–ú –∑–∞–ø—É—Å–∫–µ (3-5 —Å–µ–∫—É–Ω–¥)
    - –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è failse - API –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–æ –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞
    - Graceful imports –∑–Ω–∞—á–∏—Ç —á—Ç–æ –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è - API –Ω–µ —É–ø–∞–¥–µ—Ç
    - Uvicorn —Å --workers –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–∫–∞–∂–¥—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç QWEN!)

üë§ –ê–≤—Ç–æ—Ä: ML Platform Team
üìÖ –î–∞—Ç–∞: October 2025
üîó –í–µ—Ä—Å–∏—è: v3.0.0
"""

import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

# Configure logging FIRST
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Graceful imports with fallbacks
try:
    from src.config import get_config

    config = get_config()
    CONFIG_AVAILABLE = True
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Config not available: {e}")

    # Fallback config
    class FallbackConfig:
        class application:
            environment = "development"
            name = "Rap ML API"
            version = "3.0.0"

        class api:
            host = "127.0.0.1"
            port = 8000
            workers = 1
            reload = True
            log_level = "info"

            class cors:
                enabled = True
                origins = ["*"]
                allow_credentials = True
                allow_methods = ["*"]
                allow_headers = ["*"]

            class docs:
                enabled = True
                title = "Rap ML API"
                version = "3.0.0"
                swagger_url = "/docs"
                redoc_url = "/redoc"

        class database:
            type = "postgresql"
            pool_size = 20

        class redis:
            enabled = False

    config = FallbackConfig()
    CONFIG_AVAILABLE = False

# Import routes with graceful fallback
ROUTES_AVAILABLE = {}
try:
    from .routes import health

    ROUTES_AVAILABLE["health"] = health
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Health routes not available: {e}")
    ROUTES_AVAILABLE["health"] = None

try:
    from .routes import analyze

    ROUTES_AVAILABLE["analyze"] = analyze
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Analyze routes not available: {e}")
    ROUTES_AVAILABLE["analyze"] = None

try:
    from .routes import ml_models

    ROUTES_AVAILABLE["ml_models"] = ml_models
except Exception as e:
    logger.warning(f"‚ö†Ô∏è ML models routes not available: {e}")
    ROUTES_AVAILABLE["ml_models"] = None

try:
    from .routes import batch

    ROUTES_AVAILABLE["batch"] = batch
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Batch routes not available: {e}")
    ROUTES_AVAILABLE["batch"] = None

try:
    from .routes import web

    ROUTES_AVAILABLE["web"] = web
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Web routes not available: {e}")
    ROUTES_AVAILABLE["web"] = None

try:
    from .routes import models_info

    ROUTES_AVAILABLE["models_info"] = models_info
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Models info routes not available: {e}")
    ROUTES_AVAILABLE["models_info"] = None

# üÜï Import initialization functions for models
INIT_FUNCTIONS = {}
try:
    from .routes.analyze import initialize_analyzer

    INIT_FUNCTIONS["initialize_analyzer"] = initialize_analyzer
    logger.debug("‚úÖ initialize_analyzer imported successfully")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è initialize_analyzer not available: {e}")
    INIT_FUNCTIONS["initialize_analyzer"] = None

# Configure logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Load configuration
config = get_config()


# ============================================================================
# STARTUP / SHUTDOWN EVENTS
# ============================================================================


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager"""
    # STARTUP
    logger.info("=" * 80)
    logger.info("üöÄ STARTING UNIFIED RAP ML API (v3.0.0)")
    logger.info("=" * 80)
    logger.info(f"   Environment: {config.application.environment}")
    logger.info(f"   API Host: {config.api.host}:{config.api.port}")
    logger.info(f"   Workers: {config.api.workers}")
    logger.info(
        f"   Database: {config.database.type} (pool: {config.database.pool_size})"
    )
    logger.info(f"   Redis: {'enabled' if config.redis.enabled else 'disabled'}")
    logger.info("=" * 80)

    # üÜï INITIALIZE ML MODELS
    logger.info("\nüìä INITIALIZING ML MODELS...")
    if INIT_FUNCTIONS.get("initialize_analyzer"):
        try:
            logger.info("   ü§ñ Initializing QWEN analyzer...")
            success = await INIT_FUNCTIONS["initialize_analyzer"]()
            if success:
                logger.info("   ‚úÖ QWEN analyzer initialized successfully!")
            else:
                logger.warning(
                    "   ‚ö†Ô∏è Failed to initialize QWEN analyzer (check logs above)"
                )
        except Exception as e:
            logger.error(f"   ‚ùå Error initializing QWEN analyzer: {e}", exc_info=True)
    else:
        logger.warning("   ‚ö†Ô∏è Initialize function not available (check route imports)")

    logger.info("=" * 80 + "\n")

    yield

    # SHUTDOWN
    logger.info("=" * 80)
    logger.info("üõë SHUTTING DOWN RAP ML API")
    logger.info("=" * 80)


# ============================================================================
# CREATE FASTAPI APP
# ============================================================================

app = FastAPI(
    title=config.api.docs.title,
    description="Unified ML API for rap lyrics analysis with RAG systems",
    version=config.api.docs.version,
    docs_url=config.api.docs.swagger_url if config.api.docs.enabled else None,
    redoc_url=config.api.docs.redoc_url if config.api.docs.enabled else None,
    lifespan=lifespan,
)

# ============================================================================
# MIDDLEWARE SETUP
# ============================================================================

# CORS middleware
if config.api.cors.enabled:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=config.api.cors.origins,
        allow_credentials=config.api.cors.allow_credentials,
        allow_methods=config.api.cors.allow_methods,
        allow_headers=config.api.cors.allow_headers,
    )
    logger.debug(f"‚úÖ CORS enabled for origins: {config.api.cors.origins}")

# ============================================================================
# INCLUDE ROUTES (All route modules)
# ============================================================================

# Register all available route modules
routes_registered = []

if ROUTES_AVAILABLE.get("health"):
    app.include_router(ROUTES_AVAILABLE["health"].router, tags=["health"])
    routes_registered.append("health")
if ROUTES_AVAILABLE.get("analyze"):
    app.include_router(ROUTES_AVAILABLE["analyze"].router, tags=["analysis"])
    routes_registered.append("analyze")
if ROUTES_AVAILABLE.get("ml_models"):
    app.include_router(ROUTES_AVAILABLE["ml_models"].router, tags=["ml-models"])
    routes_registered.append("ml_models")
if ROUTES_AVAILABLE.get("batch"):
    app.include_router(ROUTES_AVAILABLE["batch"].router, tags=["batch"])
    routes_registered.append("batch")
if ROUTES_AVAILABLE.get("web"):
    app.include_router(ROUTES_AVAILABLE["web"].router, tags=["web"])
    routes_registered.append("web")
if ROUTES_AVAILABLE.get("models_info"):
    app.include_router(ROUTES_AVAILABLE["models_info"].router, tags=["models"])
    routes_registered.append("models_info")

logger.info("‚úÖ Unified FastAPI application initialized (v3.0.0)")
logger.info(
    f"   Routes registered: {', '.join(routes_registered) if routes_registered else 'NONE'}"
)

# ============================================================================
# RUN SERVER
# ============================================================================

if __name__ == "__main__":
    import uvicorn

    logger.info("Starting uvicorn server...")
    uvicorn.run(
        "src.api.main:app",
        host=config.api.host,
        port=config.api.port,
        workers=config.api.workers if not config.api.reload else 1,
        reload=config.api.reload,
        log_level=config.api.log_level,
    )
