#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤.
"""

import sys
import os
import logging
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from src.scrapers.rap_scraper_optimized import OptimizedGeniusScraper, load_artist_list
from src.utils.config import GENIUS_TOKEN, LOG_FORMAT, LOG_FILE, DATA_DIR

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def debug_artist_loading():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
    logger.info("üîç –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ñ–∞–π–ª
    remaining_file = DATA_DIR / "remaining_artists.json"
    full_file = DATA_DIR / "rap_artists.json"
    test_file = DATA_DIR / "test_artists.json"
    
    logger.info(f"üìÇ DATA_DIR: {DATA_DIR}")
    logger.info(f"üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã:")
    
    files_to_check = [
        ("remaining_artists.json", remaining_file),
        ("rap_artists.json", full_file),
        ("test_artists.json", test_file)
    ]
    
    for name, file_path in files_to_check:
        exists = file_path.exists()
        logger.info(f"  ‚Ä¢ {name}: {'‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        
        if exists:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    artists = json.load(f)
                    logger.info(f"    –°–æ–¥–µ—Ä–∂–∏—Ç {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
                    if len(artists) > 0:
                        logger.info(f"    –ü–µ—Ä–≤—ã–µ 3: {artists[:3]}")
                        if len(artists) > 3:
                            logger.info(f"    –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3: {artists[-3:]}")
            except Exception as e:
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    logger.info("\nüéØ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ load_artist_list():")
    try:
        artists = load_artist_list()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        logger.info(f"–ü–µ—Ä–≤—ã–µ 5 –∞—Ä—Ç–∏—Å—Ç–æ–≤: {artists[:5]}")
        return artists
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return []

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞")
    
    if not GENIUS_TOKEN:
        logger.error("‚ùå GENIUS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        return
    
    # –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤
    artists = debug_artist_loading()
    
    if not artists:
        logger.error("‚ùå –°–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –ø—É—Å—Ç!")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    logger.info(f"\nüìã –ì–æ—Ç–æ–≤ –∫ —Å–∫—Ä–∞–ø–∏–Ω–≥—É {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
    logger.info("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...")
    
    try:
        input()
    except KeyboardInterrupt:
        logger.info("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∞–ø–µ—Ä
    MEMORY_LIMIT_MB = 3072
    scraper = OptimizedGeniusScraper(GENIUS_TOKEN, None, MEMORY_LIMIT_MB)
    
    try:
        SONGS_PER_ARTIST = 500
        
        logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        logger.info(f"üéµ –¶–µ–ª—å: ~{len(artists) * SONGS_PER_ARTIST} –ø–µ—Å–µ–Ω")
        logger.info(f"üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {MEMORY_LIMIT_MB}MB")
        logger.info("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        
        scraper.run_scraping_session(artists, SONGS_PER_ARTIST)
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
    finally:
        scraper.close()
        logger.info("üèÅ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
