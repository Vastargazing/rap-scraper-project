#!/usr/bin/env python3
"""
üéµ Pure PostgreSQL Spotify Enhancer

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Spotify API –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
- –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ audio features
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL (–ù–ò–ö–ê–ö–û–ì–û SQLite!)
- Async/await –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
from src.enhancers.spotify_enhancer import SpotifyEnhancer

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:                # Pause between batches
                if i + batch_size < len(tracks):
                    await asyncio.sleep(0.5)

            logger.info(f"Enhancement completed: {stats}")
            return statstgreSQL —á–µ—Ä–µ–∑ database/postgres_adapter.py
- spotipy –¥–ª—è Spotify Web API
- SPOTIFY_CLIENT_ID/SPOTIFY_CLIENT_SECRET –≤ env

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –û–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –≤ spotify_data —Ç–∞–±–ª–∏—Ü–µ
- –õ–æ–≥–∏ –≤ logs/spotify_enhancement.log

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import asyncio
import json
import logging
import os
import sys
import time
from pathlib import Path
from typing import Any

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    from dotenv import load_dotenv

    load_dotenv()
except ImportError:
    print("WARNING: python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")

from src.database.postgres_adapter import PostgreSQLManager

# –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/spotify_enhancement.log"),
        logging.StreamHandler(),
    ],
)
logger = logging.getLogger("spotify_enhancer")

try:
    import spotipy
    from spotipy.oauth2 import SpotifyClientCredentials

    SPOTIPY_AVAILABLE = True
except ImportError:
    SPOTIPY_AVAILABLE = False
    logger.warning("Spotipy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install spotipy")


class SpotifyEnhancer:
    """
    Pure PostgreSQL Spotify Enhancer

    üî• –û–°–û–ë–ï–ù–ù–û–°–¢–ò:
    - 100% PostgreSQL, –Ω–∏–∫–∞–∫–æ–≥–æ SQLite
    - Async/await –æ–ø–µ—Ä–∞—Ü–∏–∏
    - Spotify Web API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    - Rate limiting –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    """

    def __init__(self):
        # PostgreSQL –º–µ–Ω–µ–¥–∂–µ—Ä
        self.db_manager = PostgreSQLManager()

        # Spotify API
        self.spotify = None
        if SPOTIPY_AVAILABLE:
            self.spotify = self._setup_spotify_client()

        # Rate limiting
        self.request_count = 0
        self.last_request_time = 0
        self.max_requests_per_minute = 100

        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        self.search_cache = {}

        logger.info("Pure PostgreSQL Spotify Enhancer –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    def _setup_spotify_client(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Spotify API –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            client_id = os.getenv("SPOTIFY_CLIENT_ID")
            client_secret = os.getenv("SPOTIFY_CLIENT_SECRET")

            if not client_id or not client_secret:
                logger.warning("Spotify credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
                return None

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º
            cache_dir = os.path.join(os.getcwd(), "data")
            os.makedirs(cache_dir, exist_ok=True)
            cache_path = os.path.join(cache_dir, ".cache")

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è spotipy
            os.environ["SPOTIPY_CACHE_PATH"] = cache_path
            os.environ["SPOTIPY_CACHE_USERNAME"] = "spotify_enhancer"

            logger.info(f"üóÇÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–µ—à–∞: SPOTIPY_CACHE_PATH = {cache_path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            root_cache = os.path.join(os.getcwd(), ".cache")
            logger.info(
                f"üìç –ü–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞: .cache –≤ –∫–æ—Ä–Ω–µ {'–ï–°–¢–¨' if os.path.exists(root_cache) else '–ù–ï–¢'}"
            )

            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–µ—à –≤ –∫–æ—Ä–Ω–µ
            if os.path.exists(root_cache):
                logger.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .cache –≤ –∫–æ—Ä–Ω–µ")
                os.remove(root_cache)

            # –°–æ–∑–¥–∞–µ–º spotify –∫–ª–∏–µ–Ω—Ç
            logger.info("üîß –°–æ–∑–¥–∞–µ–º SpotifyClientCredentials...")
            auth_manager = SpotifyClientCredentials(
                client_id=client_id, client_secret=client_secret
            )

            logger.info("üéµ –°–æ–∑–¥–∞–µ–º Spotify –æ–±—ä–µ–∫—Ç...")
            spotify = spotipy.Spotify(auth_manager=auth_manager)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
            logger.info(
                f"üìç –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: .cache –≤ –∫–æ—Ä–Ω–µ {'–ï–°–¢–¨' if os.path.exists(root_cache) else '–ù–ï–¢'}"
            )
            logger.info(
                f"üìç –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: .cache –≤ data/ {'–ï–°–¢–¨' if os.path.exists(cache_path) else '–ù–ï–¢'}"
            )

            # –¢–µ—Å—Ç–æ–≤—ã–π API –≤—ã–∑–æ–≤
            logger.info("üß™ –î–µ–ª–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π API –≤—ã–∑–æ–≤...")
            spotify.search(q="test", type="track", limit=1)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ API –≤—ã–∑–æ–≤–∞
            logger.info(
                f"üìç –ü–æ—Å–ª–µ API –≤—ã–∑–æ–≤–∞: .cache –≤ –∫–æ—Ä–Ω–µ {'–ï–°–¢–¨' if os.path.exists(root_cache) else '–ù–ï–¢'}"
            )
            logger.info(
                f"üìç –ü–æ—Å–ª–µ API –≤—ã–∑–æ–≤–∞: .cache –≤ data/ {'–ï–°–¢–¨' if os.path.exists(cache_path) else '–ù–ï–¢'}"
            )

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–ª—Å—è –≤ –∫–æ—Ä–Ω–µ
            if os.path.exists(root_cache):
                logger.warning(
                    f"‚ö†Ô∏è .cache —Å–æ–∑–¥–∞–Ω –≤ –∫–æ—Ä–Ω–µ –ø–æ—Å–ª–µ API –≤—ã–∑–æ–≤–∞! –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ {cache_path}"
                )
                if os.path.exists(cache_path):
                    os.remove(cache_path)
                os.rename(root_cache, cache_path)
                logger.info("‚úÖ –ö–µ—à –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ data/")

            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª-–∑–∞–≥–ª—É—à–∫—É —á—Ç–æ–±—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ
            try:
                with open(root_cache, "w") as f:
                    f.write(
                        "# –≠—Ç–æ—Ç —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–µ—à–∞ –≤ –∫–æ—Ä–Ω–µ\n# –†–µ–∞–ª—å–Ω—ã–π –∫–µ—à –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ data/.cache\n"
                    )
                os.chmod(root_cache, 0o444)  # –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
                logger.info("üîí –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª-–±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ .cache –≤ –∫–æ—Ä–Ω–µ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫: {e}")

            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            spotify.search(q="test", type="track", limit=1)
            logger.info("Spotify API connected")

            return spotify

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Spotify API: {e}")
            return None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            await self.db_manager.initialize()
            logger.info("PostgreSQL –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ PostgreSQL: {e}")
            raise

    def _apply_rate_limiting(self):
        """Rate limiting –¥–ª—è Spotify API"""
        current_time = time.time()

        if self.request_count >= self.max_requests_per_minute:
            if current_time - self.last_request_time < 60:
                sleep_time = 60 - (current_time - self.last_request_time)
                logger.info(f"‚è∞ Rate limit: –∂–¥–µ–º {sleep_time:.1f}—Å")
                time.sleep(sleep_time)
                self.request_count = 0

        if current_time - self.last_request_time >= 60:
            self.request_count = 0
            self.last_request_time = current_time

        self.request_count += 1

    async def search_track(self, artist: str, title: str) -> dict[str, Any] | None:
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –≤ Spotify"""
        if not self.spotify:
            return None

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{artist.lower()}||{title.lower()}"
            if cache_key in self.search_cache:
                return self.search_cache[cache_key]

            # Rate limiting
            self._apply_rate_limiting()

            # –ü–æ–∏—Å–∫
            query = f'artist:"{artist}" track:"{title}"'
            results = self.spotify.search(q=query, type="track", limit=5)

            if not results["tracks"]["items"]:
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
                results = self.spotify.search(
                    q=f"{artist} {title}", type="track", limit=5
                )

            if results["tracks"]["items"]:
                best_match = self._find_best_match(
                    results["tracks"]["items"], artist, title
                )
                self.search_cache[cache_key] = best_match
                return best_match

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {artist} - {title}: {e}")
            return None

    def _find_best_match(
        self, tracks: list[dict], target_artist: str, target_title: str
    ) -> dict[str, Any]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π –º–∞—Ç—á –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""

        def similarity(s1: str, s2: str) -> float:
            s1, s2 = s1.lower().strip(), s2.lower().strip()
            if s1 == s2:
                return 1.0
            if s1 in s2 or s2 in s1:
                return 0.8

            words1, words2 = set(s1.split()), set(s2.split())
            common = len(words1.intersection(words2))
            total = len(words1.union(words2))
            return common / total if total > 0 else 0.0

        best_score = 0.0
        best_track = tracks[0]

        for track in tracks:
            artist_name = track["artists"][0]["name"] if track["artists"] else ""
            track_name = track["name"]

            artist_sim = similarity(target_artist, artist_name)
            title_sim = similarity(target_title, track_name)

            score = (artist_sim * 0.4) + (title_sim * 0.6)

            if score > best_score:
                best_score = score
                best_track = track

        return best_track

    async def enhance_song(self, song_id: int, artist: str, title: str) -> bool:
        """–û–±–æ–≥–∞—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π –ø–µ—Å–Ω–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            if await self._has_spotify_data(song_id):
                return True

            # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞
            track_data = await self.search_track(artist, title)
            if not track_data:
                return False

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL (–±–µ–∑ audio_features)
            return await self._save_spotify_data(song_id, track_data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –ø–µ—Å–Ω–∏ {song_id}: {e}")
            return False

    async def _has_spotify_data(self, song_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Spotify –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.db_manager.get_connection() as conn:
                query = "SELECT 1 FROM tracks WHERE id = $1 AND spotify_data IS NOT NULL LIMIT 1"
                result = await conn.fetch(query, song_id)
                return len(result) > 0
        except Exception:
            return False

    async def _save_spotify_data(self, song_id: int, track_data: dict) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL tracks.spotify_data –∫–æ–ª–æ–Ω–∫—É (–±–µ–∑ audio_features)"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Spotify
            spotify_data = {
                "track_id": track_data["id"],
                "album_name": track_data.get("album", {}).get("name"),
                "album_id": track_data.get("album", {}).get("id"),
                "release_date": track_data.get("album", {}).get("release_date"),
                "popularity": track_data.get("popularity", 0),
                "preview_url": track_data.get("preview_url"),
                "external_urls": track_data.get("external_urls", {}),
                "artists": track_data.get("artists", []),
            }

            query = """
                UPDATE tracks 
                SET spotify_data = $2
                WHERE id = $1
            """

            async with self.db_manager.get_connection() as conn:
                await conn.execute(query, song_id, json.dumps(spotify_data))

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PostgreSQL: {e}")
            return False

    async def get_tracks_for_enhancement(
        self, limit: int = 1000
    ) -> list[dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è"""
        try:
            query = """
                SELECT id, artist, title
                FROM tracks 
                WHERE spotify_data IS NULL
                ORDER BY id
                LIMIT $1
            """

            async with self.db_manager.get_connection() as conn:
                result = await conn.fetch(query, limit)
                return [dict(row) for row in result] if result else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–µ–Ω: {e}")
            return []

    async def bulk_enhance(
        self, batch_size: int = 50, max_tracks: int | None = None
    ) -> dict[str, int]:
        """–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–µ—Å–µ–Ω"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ Spotify –æ–±–æ–≥–∞—â–µ–Ω–∏–µ")

        stats = {"processed": 0, "enhanced": 0, "failed": 0, "skipped": 0}

        if not self.spotify:
            logger.error("Spotify API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return stats

        try:
            tracks = await self.get_tracks_for_enhancement(max_tracks or 10000)

            if not tracks:
                logger.info("–í—Å–µ –ø–µ—Å–Ω–∏ —É–∂–µ –æ–±–æ–≥–∞—â–µ–Ω—ã")
                return stats

            logger.info(f"Found {len(tracks)} songs for enhancement")

            for i in range(0, len(tracks), batch_size):
                batch = tracks[i : i + batch_size]

                logger.info(
                    f"Batch {i // batch_size + 1}/{(len(tracks) - 1) // batch_size + 1}"
                )

                for track in batch:
                    success = await self.enhance_song(
                        track["id"], track["artist"], track["title"]
                    )

                    stats["processed"] += 1
                    if success:
                        stats["enhanced"] += 1
                    else:
                        stats["failed"] += 1

                    if stats["processed"] % 25 == 0:
                        logger.info(f"Progress: {stats}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + batch_size < len(tracks):
                    await asyncio.sleep(1)

            logger.info(f"–û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats}")
            return stats

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {e}")
            return stats

    async def get_enhancement_stats(self) -> dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è"""
        try:
            query = """
                SELECT 
                    (SELECT COUNT(*) FROM tracks) as total_songs,
                    (SELECT COUNT(*) FROM tracks WHERE spotify_data IS NOT NULL) as enhanced_songs,
                    (SELECT AVG(CAST(spotify_data->>'popularity' AS NUMERIC)) 
                     FROM tracks 
                     WHERE spotify_data IS NOT NULL AND spotify_data->>'popularity' != '') as avg_popularity
            """

            async with self.db_manager.get_connection() as conn:
                result = await conn.fetch(query)

                if result:
                    stats = dict(result[0])
                    if stats["total_songs"] > 0:
                        stats["enhancement_percentage"] = round(
                            stats["enhanced_songs"] / stats["total_songs"] * 100, 2
                        )
                    return stats

            return {}

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            if self.db_manager:
                await self.db_manager.close()
            logger.info("Spotify Enhancer closed")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {e}")


def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("\n" + "=" * 50)
    print("üéµ SPOTIFY ENHANCER - –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
    print("=" * 50)
    print("1. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
    print("2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ")
    print("3. üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ (100 —Ç—Ä–µ–∫–æ–≤)")
    print("4. üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç—á–∞")
    print("5. ‚ùå –í—ã—Ö–æ–¥")
    print("=" * 50)
    return input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ").strip()


async def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –º–µ–Ω—é"""
    enhancer = SpotifyEnhancer()

    try:
        await enhancer.initialize()

        while True:
            choice = show_menu()

            if choice == "1":
                print("\nüìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
                stats = await enhancer.get_enhancement_stats()
                print("\n" + "=" * 40)
                print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê SPOTIFY –û–ë–û–ì–ê–©–ï–ù–ò–Ø:")
                print("=" * 40)
                for key, value in stats.items():
                    if key == "enhancement_percentage":
                        print(f"  üéØ {key}: {value}%")
                    elif key == "total_songs":
                        print(f"  üìÄ {key}: {value:,}")
                    elif key == "enhanced_songs":
                        print(f"  ‚úÖ {key}: {value:,}")
                    elif key == "avg_popularity":
                        print(f"  üìà {key}: {value:.2f}")
                    else:
                        print(f"  üìã {key}: {value}")

                remaining = stats.get("total_songs", 0) - stats.get("enhanced_songs", 0)
                print(f"  ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–µ–∫–æ–≤: {remaining:,}")
                print("=" * 40)

            elif choice == "2":
                print("\nüöÄ –ú–ê–°–°–û–í–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï")
                print("‚ö†Ô∏è  –≠—Ç–æ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")
                confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
                if confirm == "y":
                    batch_size = int(input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ") or "50")
                    max_tracks = int(input("–ú–∞–∫—Å–∏–º—É–º —Ç—Ä–µ–∫–æ–≤ (0 = –≤—Å–µ): ") or "0")
                    max_tracks = max_tracks if max_tracks > 0 else None

                    print(
                        f"üîÑ –ó–∞–ø—É—Å–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—è: –±–∞—Ç—á={batch_size}, –ª–∏–º–∏—Ç={max_tracks or '–≤—Å–µ'}"
                    )
                    stats = await enhancer.bulk_enhance(
                        batch_size=batch_size, max_tracks=max_tracks
                    )
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {stats}")
                else:
                    print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

            elif choice == "3":
                print("\nüß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ (100 —Ç—Ä–µ–∫–æ–≤)")
                batch_size = int(input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20): ") or "20")
                print("üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è...")
                stats = await enhancer.bulk_enhance(
                    batch_size=batch_size, max_tracks=100
                )
                print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {stats}")

            elif choice == "4":
                print("\nüîß –ù–ê–°–¢–†–û–ô–ö–ò –ë–ê–¢–ß–ê")
                print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã:")
                print("  ‚Ä¢ 10-20: –ë–µ–∑–æ–ø–∞—Å–Ω–æ, –º–µ–¥–ª–µ–Ω–Ω–æ")
                print("  ‚Ä¢ 30-50: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ")
                print("  ‚Ä¢ 60+: –ë—ã—Å—Ç—Ä–æ, —Ä–∏—Å–∫ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")

            elif choice == "5":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break

            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            if choice in ["1", "2", "3"]:
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")

    finally:
        await enhancer.close()


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async def main():
    """CLI –¥–ª—è Spotify Enhancer"""
    import argparse

    parser = argparse.ArgumentParser(description="PostgreSQL Spotify Enhancer")
    parser.add_argument("--enhance", action="store_true", help="–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–æ–≥–∞—â–µ–Ω–∏–µ")
    parser.add_argument("--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    parser.add_argument("--limit", type=int, default=1000, help="–õ–∏–º–∏—Ç –ø–µ—Å–µ–Ω")
    parser.add_argument("--batch-size", type=int, default=50, help="–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞")
    parser.add_argument(
        "--interactive", action="store_true", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
    )

    args = parser.parse_args()

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if not any([args.enhance, args.stats, args.interactive]):
        await interactive_mode()
        return

    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    if args.interactive:
        await interactive_mode()
        return

    # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    enhancer = SpotifyEnhancer()

    try:
        await enhancer.initialize()

        if args.stats:
            stats = await enhancer.get_enhancement_stats()
            print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Spotify –æ–±–æ–≥–∞—â–µ–Ω–∏—è:")
            for key, value in stats.items():
                print(f"  {key}: {value}")

        if args.enhance:
            stats = await enhancer.bulk_enhance(
                batch_size=args.batch_size, max_tracks=args.limit
            )
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–≥–∞—â–µ–Ω–∏—è: {stats}")

    finally:
        await enhancer.close()


if __name__ == "__main__":
    asyncio.run(main())
