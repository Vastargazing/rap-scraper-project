# üêò PostgreSQL-Powered Rap Scraper & Analyzer Stack
# Complete containerized deployment with PostgreSQL backend for concurrent processing

version: '3.8'

services:
  # üêò PostgreSQL Database - Enterprise-grade concurrent processing
  postgresql:
    image: postgres:15-alpine
    container_name: rap-analyzer-postgres
    environment:
      POSTGRES_DB: rap_lyrics
      POSTGRES_USER: rap_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
      - postgres_backups:/backups
    ports:
      - "5432:5432"
    networks:
      - rap-analyzer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rap_user -d rap_lyrics"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # üöÄ Rap Analyzer API - FastAPI with PostgreSQL backend
  rap-analyzer-api:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_TYPE: postgresql
    container_name: rap-analyzer-api
    environment:
      # PostgreSQL connection
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: rap_lyrics
      POSTGRES_USER: rap_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
      
      # Application settings
      ENV: production
      API_VERSION: 2.0.0
      MAX_CONNECTIONS: 20
      CONNECTION_TIMEOUT: 30
      
      # API Keys (set these in .env file)
      NOVITA_API_KEY: ${NOVITA_API_KEY}
      GENIUS_ACCESS_TOKEN: ${GENIUS_ACCESS_TOKEN}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./cache:/app/cache
      - ./results:/app/results
    ports:
      - "8000:8000"
    networks:
      - rap-analyzer-network
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ü§ñ Qwen Mass Analyzer - Concurrent AI processing worker
  qwen-analyzer:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_TYPE: postgresql
    container_name: rap-qwen-analyzer
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: rap_lyrics
      POSTGRES_USER: rap_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
      NOVITA_API_KEY: ${NOVITA_API_KEY}
      ANALYSIS_BATCH_SIZE: 100
      MAX_WORKERS: 4
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - rap-analyzer-network
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    command: ["python", "scripts/mass_qwen_analysis.py"]
    deploy:
      resources:
        limits:
          memory: 1GB
        reservations:
          memory: 512MB

  # üéµ Spotify Enhancement Worker - Metadata enrichment service
  spotify-enhancer:
    build: 
      context: .
      dockerfile: Dockerfile
      args:
        DATABASE_TYPE: postgresql
    container_name: rap-spotify-enhancer
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_PORT: 5432
      POSTGRES_DB: rap_lyrics
      POSTGRES_USER: rap_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
      SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      SPOTIFY_CLIENT_SECRET: ${SPOTIFY_CLIENT_SECRET}
      ENHANCEMENT_BATCH_SIZE: 50
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - rap-analyzer-network
    depends_on:
      postgresql:
        condition: service_healthy
    restart: "no"  # Run on-demand for Spotify enrichment
    command: ["python", "scripts/spotify_enhancement.py"]

  # üìä Monitoring - pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: rap-analyzer-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@rapanalyzer.local
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - rap-analyzer-network
    depends_on:
      - postgresql
    restart: unless-stopped

  # üìà Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: rap-analyzer-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - rap-analyzer-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # üìä Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: rap-analyzer-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - rap-analyzer-network
    restart: unless-stopped

  # üîÑ Backup Service - Automated PostgreSQL backups
  backup-service:
    image: postgres:15-alpine
    container_name: rap-analyzer-backup
    environment:
      POSTGRES_HOST: postgresql
      POSTGRES_DB: rap_lyrics
      POSTGRES_USER: rap_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_2024}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - rap-analyzer-network
    depends_on:
      - postgresql
    restart: "no"
    command: ["sh", "/backup.sh"]

# üìÇ Persistent Volumes
volumes:
  postgres_data:
    driver: local
    name: rap_analyzer_postgres_data
  postgres_backups:
    driver: local
    name: rap_analyzer_postgres_backups
  pgadmin_data:
    driver: local
    name: rap_analyzer_pgadmin_data
  prometheus_data:
    driver: local
    name: rap_analyzer_prometheus_data
  grafana_data:
    driver: local
    name: rap_analyzer_grafana_data

# üåê Networks
networks:
  rap-analyzer-network:
    driver: bridge
    name: rap-analyzer-network

# üéØ Usage Instructions:
#
# 1. SETUP: Copy .env.example to .env and configure:
#    - POSTGRES_PASSWORD=your-secure-password
#    - NOVITA_API_KEY=your-novita-key
#    - SPOTIFY_CLIENT_ID=your-spotify-id
#    - SPOTIFY_CLIENT_SECRET=your-spotify-secret
#    - GENIUS_ACCESS_TOKEN=your-genius-token
#
# 2. START FULL STACK:
#    docker-compose -f docker-compose.postgres.yml up -d
#
# 3. VERIFY SERVICES:
#    - PostgreSQL: http://localhost:5432 (connection test)
#    - API: http://localhost:8000 (FastAPI docs)
#    - pgAdmin: http://localhost:5050 (database management)
#    - Prometheus: http://localhost:9090 (metrics)
#    - Grafana: http://localhost:3000 (dashboards)
#
# 4. CONCURRENT PROCESSING:
#    - Qwen Analyzer: Automatic mass analysis of 37,866+ tracks
#    - Spotify Enhancer: On-demand metadata enrichment
#    - API Service: Interactive analysis via web interface
#    - All services use PostgreSQL concurrently without conflicts
#
# 5. MONITORING:
#    docker-compose -f docker-compose.postgres.yml logs -f rap-analyzer-api
#    docker-compose -f docker-compose.postgres.yml logs -f qwen-analyzer
#    docker exec rap-analyzer-postgres psql -U rap_user -d rap_lyrics -c "SELECT COUNT(*) FROM tracks;"
#
# 6. BACKUP & RESTORE:
#    docker-compose -f docker-compose.postgres.yml run --rm backup-service
#    # Backups stored in postgres_backups volume
#
# üéâ Result: Complete PostgreSQL-powered concurrent processing environment
#    with enterprise monitoring, automatic backups, and scalable architecture!