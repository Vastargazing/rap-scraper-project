#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è confidence scores –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ confidence scores –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ ML-–∞–Ω–∞–ª–∏–∑–∞
–Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã.
"""

import json

def analyze_confidence_results():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å confidence scores"""
    
    # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('confidence_test_updated.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print("üéØ –ê–ù–ê–õ–ò–ó CONFIDENCE SCORES –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    for result in data['results']:
        artist = result['artist']
        title = result['title']
        features = result['features']
        
        print(f"\nüéµ {artist} - {title}")
        print("-" * 40)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º confidence scores
        confidences = {
            'rhyme_detection': features.get('rhyme_detection_confidence', 0),
            'rhyme_scheme': features.get('rhyme_scheme_confidence', 0),
            'metaphor': features.get('metaphor_confidence', 0),
            'wordplay': features.get('wordplay_confidence', 0),
            'creativity': features.get('creativity_confidence', 0),
            'stress_pattern': features.get('stress_pattern_confidence', 0),
            'flow_analysis': features.get('flow_analysis_confidence', 0),
        }
        
        # –°—Ä–µ–¥–Ω–∏–π confidence
        avg_confidence = sum(confidences.values()) / len(confidences)
        
        print(f"üìä CONFIDENCE SCORES:")
        for metric, score in confidences.items():
            status = "üü¢" if score >= 0.7 else "üü°" if score >= 0.5 else "üî¥"
            print(f"   {status} {metric.replace('_', ' ').title()}: {score:.3f}")
        
        print(f"\nüéØ OVERALL CONFIDENCE: {avg_confidence:.3f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence
        recommendations = []
        
        if confidences['metaphor'] < 0.5:
            recommendations.append("‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–µ—Ç–∞—Ñ–æ—Ä - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        if confidences['wordplay'] < 0.5:
            recommendations.append("‚ö†Ô∏è  –ò–≥—Ä–∞ —Å–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ–æ—Ü–µ–Ω–µ–Ω–∞ - —Å–ª–æ–∂–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è")
        
        if confidences['rhyme_detection'] < 0.7:
            recommendations.append("‚ö†Ô∏è  –†–∏—Ñ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ö–µ–º—ã")
        
        if avg_confidence >= 0.7:
            print("‚úÖ –í–´–°–û–ö–ê–Ø –ù–ê–î–Å–ñ–ù–û–°–¢–¨ - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è ML")
        elif avg_confidence >= 0.5:
            print("‚ö†Ô∏è  –°–†–ï–î–ù–Ø–Ø –ù–ê–î–Å–ñ–ù–û–°–¢–¨ - –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
        else:
            print("‚ùå –ù–ò–ó–ö–ê–Ø –ù–ê–î–Å–ñ–ù–û–°–¢–¨ - –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        if recommendations:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in recommendations:
                print(f"   {rec}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
        print(f"\nüìà –ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:")
        print(f"   Metaphor Count: {features.get('metaphor_count', 0)} (confidence: {confidences['metaphor']:.3f})")
        print(f"   Wordplay Instances: {features.get('wordplay_instances', 0)} (confidence: {confidences['wordplay']:.3f})")
        print(f"   Rhyme Density: {features.get('rhyme_density', 0):.3f} (confidence: {confidences['rhyme_detection']:.3f})")
        
        print("\n" + "=" * 60)

def show_best_practices():
    """–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è confidence scores"""
    
    print("\nüèÜ –õ–£–ß–®–ò–ï –ü–†–ê–ö–¢–ò–ö–ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø CONFIDENCE SCORES:")
    print("-" * 50)
    
    practices = [
        "üéØ Confidence >= 0.8: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        "üîç Confidence 0.5-0.8: –°–µ–ª–µ–∫—Ç–∏–≤–Ω–∞—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞",
        "‚ö†Ô∏è  Confidence < 0.5: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ",
        "üìä –î–ª—è ML-–º–æ–¥–µ–ª–µ–π: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ confidence –∫–∞–∫ feature weight",
        "üîÑ –î–ª—è active learning: –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∏–∑–∫–∏—Ö confidence",
        "üìà –î–ª—è reporting: –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ confidence –≤–º–µ—Å—Ç–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"
    ]
    
    for practice in practices:
        print(f"   {practice}")
    
    print(f"\nüí° –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –í ML PIPELINE:")
    print(f"   ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É confidence")
    print(f"   ‚Ä¢ Weighted loss functions –Ω–∞ –æ—Å–Ω–æ–≤–µ confidence")
    print(f"   ‚Ä¢ Uncertainty-aware predictions")
    print(f"   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–∞–±–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å high confidence")

if __name__ == "__main__":
    try:
        analyze_confidence_results()
        show_best_practices()
        
        print(f"\nüéâ –ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã confidence scores –¥–ª—è:")
        print(f"   ‚Ä¢ Rhyme detection & scheme analysis")
        print(f"   ‚Ä¢ Metaphor & wordplay detection")
        print(f"   ‚Ä¢ Flow & stress pattern analysis")
        print(f"   ‚Ä¢ Creativity assessment")
        print(f"\nüì¶ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤:")
        print(f"   ‚Ä¢ SimplifiedFeatureAnalyzer")
        print(f"   ‚Ä¢ CLI —ç–∫—Å–ø–æ—Ä—Ç (JSON/CSV)")
        print(f"   ‚Ä¢ Pydantic –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
        
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª confidence_test_updated.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python scripts/rap_scraper_cli.py mlfeatures --batch 2 --export json --output confidence_test_updated.json")
