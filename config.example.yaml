# üéØ Rap Scraper Project Configuration - EXAMPLE
# ‚ö†Ô∏è DO NOT commit this file with real credentials!
# Copy this to config.yaml and fill in your actual values
# Version: 2.0.0

# Application settings
application:
  name: "Rap Scraper Project"
  version: "2.0.0"
  description: "Advanced lyrics analysis system with multiple AI and algorithmic approaches"
  author: "Vastargazing"
  environment: "production"  # dev, staging, production
  
# Database configuration
database:
  # PostgreSQL configuration
  type: "postgresql"
  host_env: "DB_HOST"  # e.g., localhost or db container name
  port: 5432
  name_env: "DB_NAME"  # e.g., rap_lyrics
  username_env: "DB_USERNAME"  # e.g., rap_user
  password_env: "DB_PASSWORD"  # ‚ö†Ô∏è SET IN .env FILE!
  pool_size: 20
  min_pool_size: 5
  max_overflow: 10
  timeout: 30
  backup_enabled: true
  backup_interval: 3600
  
  # Connection pool settings
  pool_recycle: 3600
  pool_pre_ping: true
  echo: false
  
  # Legacy SQLite (for compatibility)
  sqlite:
    path: "data/rap_lyrics.db"
    enabled: false

# PgVector configuration
vector_search:
  enabled: true
  embedding_model: "text-embedding-3-small"
  dimension: 1536
  distance_metric: "cosine"
  index_type: "ivfflat"
  lists: 100
  probes: 10
  
  cache_enabled: true
  cache_ttl: 86400
  batch_size: 100

# Logging
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  file_path: "logs/app.log"
  max_file_size: 10485760
  backup_count: 5
  encoding: "utf-8"
  console_output: true

# Analyzers
analyzers:
  algorithmic_basic:
    enabled: true
    config:
      sentiment_threshold: 0.5
      complexity_weights:
        vocabulary: 0.3
        structure: 0.3
        themes: 0.4
      
  qwen:
    enabled: true
    config:
      model_name: "qwen/qwen3-4b-fp8"
      base_url: "https://api.novita.ai/openai/v1"
      api_key_env: "NOVITA_API_KEY"  # ‚ö†Ô∏è SET IN .env FILE!
      temperature: 0.1
      max_tokens: 1500
      timeout: 30
      retry_attempts: 3
      validate_api_key: true
      
  ollama:
    enabled: true
    config:
      model: "llama3.1:8b"
      base_url_env: "OLLAMA_BASE_URL"  # e.g., http://localhost:11434
      timeout: 60
      temperature: 0.3
      max_tokens: 1000
      
  hybrid:
    enabled: true
    config:
      algorithms:
        - "algorithmic_basic"
        - "qwen"
      consensus_threshold: 0.7
      fallback_analyzer: "algorithmic_basic"

  emotion_analyzer:
    enabled: true
    config:
      model_name: "j-hartmann/emotion-english-distilroberta-base"
      device: "auto"
      max_length: 512
      batch_size: 16
      cache_enabled: true
      fallback_enabled: true
      rap_analysis_enabled: true
      postgres_enabled: true

# CLI settings
cli:
  batch_processing:
    default_workers: 4
    max_workers: 8
    chunk_size: 100
    progress_interval: 5.0
    checkpoint_enabled: true
    
  performance_monitoring:
    monitoring_interval: 0.1
    warmup_runs: 3
    memory_tracking: true
    cpu_tracking: true
    
  output:
    default_format: "json"
    timestamp_format: "%Y-%m-%d %H:%M:%S"
    encoding: "utf-8"

# Performance
performance:
  async_concurrency: 10
  request_timeout: 30
  retry_attempts: 3
  retry_delay: 1.0
  
# Security
security:
  api_key_validation: true
  rate_limiting:
    enabled: true
    requests_per_minute: 60
  input_validation:
    max_text_length: 100000
    forbidden_patterns: []

# FastAPI Configuration
api:
  host: "0.0.0.0"
  port: 8000
  workers: 4
  reload: false
  log_level: "info"
  
  cors:
    enabled: true
    origins:
      - "http://localhost:3000"
      - "http://localhost:8080"
    allow_credentials: true
    allow_methods: ["*"]
    allow_headers: ["*"]
  
  rate_limit:
    enabled: true
    requests_per_minute: 100
    burst_size: 20
  
  docs:
    enabled: true
    swagger_url: "/docs"
    redoc_url: "/redoc"
    title: "Rap Analyzer API"
    version: "2.0.0"

# Redis Configuration
redis:
  enabled: true
  host_env: "REDIS_HOST"  # e.g., localhost or redis container
  port: 6379
  password_env: "REDIS_PASSWORD"  # Optional, set if needed
  db: 0
  max_connections: 50
  socket_timeout: 5
  socket_connect_timeout: 5
  
  cache:
    artist_ttl: 3600
    lyrics_ttl: 86400
    analysis_ttl: 604800
    embedding_ttl: 2592000

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    port: 9090
    path: "/metrics"
    include_default_metrics: true
    
  grafana:
    enabled: true
    port: 3000
    admin_password_env: "GRAFANA_ADMIN_PASSWORD"  # ‚ö†Ô∏è SET IN .env FILE!
    datasource_url_env: "PROMETHEUS_URL"
    
  metrics:
    collect_request_duration: true
    collect_request_count: true
    collect_error_rate: true
    collect_db_pool_metrics: true
    collect_cache_metrics: true
    
  health:
    enabled: true
    endpoint: "/health"
    check_interval: 60
    components:
      - database
      - redis
      - ollama
      - qwen_api

# CI/CD Configuration
ci_cd:
  github_actions:
    enabled: true
    test_on_push: true
    test_on_pr: true
    auto_deploy: false
    
  testing:
    required_coverage: 80
    run_integration_tests: true
    run_performance_tests: false
    parallel_execution: true
    
  deployment:
    environments: ["dev", "staging", "prod"]
    auto_rollback: true
    health_check_timeout: 300
    
  quality:
    max_complexity: 10
    max_function_length: 50
    max_file_length: 500
    enforce_type_hints: true

# Caching Strategy
caching:
  app_cache:
    enabled: true
    backend: "redis"
    default_ttl: 3600
    max_size: 10000
    
  query_cache:
    enabled: true
    ttl: 1800
    max_entries: 5000
    
  model_cache:
    enabled: true
    ttl: 86400
    max_size: 1000

# Development settings
development:
  debug_mode: false
  profiling_enabled: false
  test_mode: false
  mock_external_apis: false
  hot_reload: false
  
# Production settings
production:
  error_reporting: true
  metrics_collection: true
  health_check_interval: 300
  auto_scaling: false
  
  performance:
    enable_query_caching: true
    enable_connection_pooling: true
    enable_request_batching: true
    
  security:
    enable_https_only: true
    enable_api_key_rotation: true
    max_login_attempts: 5
    session_timeout: 3600

# External services
external_services:
  google_ai:
    endpoint: "https://generativelanguage.googleapis.com"
    version: "v1beta"
    api_key_env: "GOOGLE_AI_API_KEY"  # ‚ö†Ô∏è SET IN .env FILE!
    
  ollama:
    endpoint_env: "OLLAMA_BASE_URL"
    health_check: "/api/version"
    timeout: 60
    
  genius_api:
    endpoint: "https://api.genius.com"
    version: "v1"
    api_key_env: "GENIUS_API_KEY"  # ‚ö†Ô∏è SET IN .env FILE!
    
  spotify_api:
    endpoint: "https://api.spotify.com"
    version: "v1"
    client_id_env: "SPOTIFY_CLIENT_ID"  # ‚ö†Ô∏è SET IN .env FILE!
    client_secret_env: "SPOTIFY_CLIENT_SECRET"  # ‚ö†Ô∏è SET IN .env FILE!

# Environment-specific overrides
environments:
  development:
    application:
      environment: "development"
    database:
      pool_size: 5
      echo: true
    api:
      reload: true
      workers: 1
    monitoring:
      prometheus:
        enabled: false
      grafana:
        enabled: false
    development:
      debug_mode: true
      hot_reload: true
      
  staging:
    application:
      environment: "staging"
    database:
      pool_size: 10
    api:
      workers: 2
    ci_cd:
      github_actions:
        auto_deploy: true
        
  production:
    application:
      environment: "production"
    database:
      pool_size: 20
      backup_enabled: true
    api:
      workers: 4
      reload: false
    production:
      auto_scaling: true
      security:
        enable_https_only: true
