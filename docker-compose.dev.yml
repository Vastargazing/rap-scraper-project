# üîß Development Docker Compose for Rap Lyrics Analyzer
# Extends production setup with development tools and monitoring
version: '3.8'

services:
  rap-analyzer-api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app  # Hot reload
      - /app/.venv  # –ù–ï –º–æ–Ω—Ç–∏—Ä—É–π venv —Å —Ö–æ—Å—Ç–∞!
      - ./data:/app/data
      - ./logs:/app/logs
      - ./results:/app/results
      - ./config.yaml:/app/config.yaml:ro
    environment:
      - DEBUG=true
      - LOG_LEVEL=debug
      - RAP_ANALYZER_ENV=development
      - DATABASE_URL=postgresql://rap_user:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/rap_lyrics
      - REDIS_URL=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
    ports:
      - "8000:8000"
    networks:
      - rap-analyzer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  postgres:
    extends:
      file: docker-compose.yml
      service: postgres
    ports:
      - "5432:5432"

  redis:
    extends:
      file: docker-compose.yml
      service: redis
    ports:
      - "6379:6379"

  # Development-only services
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: rap-analyzer-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@local.dev
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - rap-analyzer-network
    depends_on:
      - postgres

  prometheus:
    image: prom/prometheus:latest
    container_name: rap-analyzer-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - rap-analyzer-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: rap-analyzer-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - rap-analyzer-network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
  prometheus_data:
  grafana_data:

networks:
  rap-analyzer-network:
    driver: bridge