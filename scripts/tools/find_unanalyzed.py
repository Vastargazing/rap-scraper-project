#!/usr/bin/env python3
"""
üîç –ü–æ–∏—Å–∫ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sqlite3
import os
from pathlib import Path

def find_unanalyzed_records():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–µ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏"""
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    project_root = Path(__file__).parent.parent
    db_path = project_root / 'data' / 'rap_lyrics.db'
    conn = sqlite3.connect(str(db_path))
    
    print("üîç –ü–æ–∏—Å–∫ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π...")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 10 –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    query = """
    SELECT s.id, s.artist, s.title, 
           CASE WHEN a.song_id IS NOT NULL THEN 'Analyzed' ELSE 'Not analyzed' END as status
    FROM songs s
    LEFT JOIN ai_analysis a ON s.id = a.song_id AND a.model_version LIKE '%qwen%'
    WHERE s.lyrics IS NOT NULL 
    AND s.lyrics != '' 
    AND a.song_id IS NULL
    ORDER BY s.id
    LIMIT 10
    """
    
    records = conn.execute(query).fetchall()
    
    if records:
        print(f"\nüìã –ü–µ—Ä–≤—ã–µ 10 –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:")
        for i, (song_id, artist, title, status) in enumerate(records, 1):
            print(f"  {i}. ID: {song_id} | {artist} - {title}")
        
        print(f"\nüéØ –ü–µ—Ä–≤–∞—è –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å: ID {records[0][0]}")
        return records[0][0]
    else:
        print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return None
    
    conn.close()

def get_analysis_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
    
    project_root = Path(__file__).parent.parent
    db_path = project_root / 'data' / 'rap_lyrics.db'
    conn = sqlite3.connect(str(db_path))
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_songs = conn.execute("SELECT COUNT(*) FROM songs WHERE lyrics IS NOT NULL AND lyrics != ''").fetchone()[0]
    total_analyzed = conn.execute("SELECT COUNT(DISTINCT song_id) FROM ai_analysis").fetchone()[0]
    qwen_analyzed = conn.execute("SELECT COUNT(*) FROM ai_analysis WHERE model_version LIKE '%qwen%'").fetchone()[0]
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  üìö –í—Å–µ–≥–æ –ø–µ—Å–µ–Ω —Å —Ç–µ–∫—Å—Ç–∞–º–∏: {total_songs:,}")
    print(f"  ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–ª—é–±–æ–π –º–æ–¥–µ–ª—å—é): {total_analyzed:,}")
    print(f"  ü§ñ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Qwen: {qwen_analyzed:,}")
    print(f"  ‚è≥ –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {total_songs - total_analyzed:,}")
    
    # –ú–æ–¥–µ–ª–∏
    models = conn.execute("""
        SELECT model_version, COUNT(*) 
        FROM ai_analysis 
        GROUP BY model_version 
        ORDER BY COUNT(*) DESC
    """).fetchall()
    
    print(f"\nü§ñ –ü–æ –º–æ–¥–µ–ª—è–º:")
    for model, count in models:
        print(f"  {model}: {count:,}")
    
    conn.close()

if __name__ == "__main__":
    get_analysis_stats()
    first_unanalyzed_id = find_unanalyzed_records()
    
    if first_unanalyzed_id:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --start-offset {first_unanalyzed_id - 1} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—á–∞–ª–∞")
