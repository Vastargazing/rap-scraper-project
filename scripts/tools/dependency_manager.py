#!/usr/bin/env python3
"""
üîê Dependency Security Manager ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ dependencies
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
- –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è production deployments

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python scripts/tools/dependency_manager.py --audit
python scripts/tools/dependency_manager.py --update-safe
python scripts/tools/dependency_manager.py --security-report

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å rollback capability
- –û—Ç—á–µ—Ç—ã –¥–ª—è compliance –∏ security audits
"""

import subprocess
import shutil
import json
import re
from dataclasses import dataclass
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import requests
from datetime import datetime, timedelta

@dataclass
class Vulnerability:
    package: str
    installed_version: str
    affected_versions: str
    vulnerability_id: str
    severity: str
    description: str
    fixed_version: Optional[str]

@dataclass
class PackageStatus:
    name: str
    installed_version: str
    latest_version: str
    is_outdated: bool
    days_behind: int
    breaking_changes: bool
    update_priority: str  # "critical", "high", "medium", "low"

class DependencySecurityManager:
    def __init__(self, project_root: str = "."):
        self.project_root = Path(project_root)
        self.results_dir = self.project_root / "results"
        self.results_dir.mkdir(exist_ok=True)
        
        self.requirements_file = self.project_root / "requirements.txt"
        self.security_report = self.results_dir / "security_audit.json"
        self.update_log = self.results_dir / "dependency_updates.json"
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        self.critical_packages = {
            "asyncpg", "psycopg2", "fastapi", "uvicorn", 
            "aiohttp", "requests", "pydantic", "sqlalchemy"
        }
        
        # –ü–∞–∫–µ—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.sensitive_packages = {
            "tensorflow", "torch", "transformers", "numpy", "pandas"
        }
    
    def get_installed_packages(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            result = subprocess.run(
                ["pip", "list", "--format=json"], 
                capture_output=True, text=True, check=True
            )
            packages = json.loads(result.stdout)
            return {pkg["name"].lower(): pkg["version"] for pkg in packages}
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {e}")
            return {}
    
    def check_vulnerabilities(self) -> List[Vulnerability]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö"""
        vulnerabilities = []
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É—Ç–∏–ª–∏—Ç—ã `safety`
            if shutil.which("safety") is None:
                print("safety –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH ‚Äì –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ `pip install safety` –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞.")
                return []

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º safety –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            result = subprocess.run(
                ["safety", "check", "--json"], 
                capture_output=True, text=True
            )

            if result.returncode == 0:
                return []  # –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

            # –ü–∞—Ä—Å–∏–º JSON –≤—ã–≤–æ–¥ safety
            safety_data = json.loads(result.stdout)
            
            for vuln_data in safety_data:
                vulnerability = Vulnerability(
                    package=vuln_data.get("package", "unknown"),
                    installed_version=vuln_data.get("installed_version", ""),
                    affected_versions=vuln_data.get("affected_versions", ""),
                    vulnerability_id=vuln_data.get("vulnerability_id", ""),
                    severity=self._determine_severity(vuln_data),
                    description=vuln_data.get("advisory", ""),
                    fixed_version=self._extract_fixed_version(vuln_data)
                )
                vulnerabilities.append(vulnerability)
                
        except subprocess.CalledProcessError:
            print("Safety –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏")
        except FileNotFoundError:
            # –ù–∞ Windows —ç—Ç–æ –±—ã–ª –∏—Å—Ö–æ–¥–Ω—ã–π WinError 2 ‚Äî –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print("safety –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ (FileNotFoundError). –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install safety")
        except json.JSONDecodeError:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å –≤—ã–≤–æ–¥ safety")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {e}")
        
        return vulnerabilities
    
    def check_outdated_packages(self) -> List[PackageStatus]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã"""
        outdated_packages = []
        
        try:
            result = subprocess.run(
                ["pip", "list", "--outdated", "--format=json"],
                capture_output=True, text=True, check=True
            )
            
            outdated_data = json.loads(result.stdout)
            
            for pkg_data in outdated_data:
                package_status = PackageStatus(
                    name=pkg_data["name"],
                    installed_version=pkg_data["version"],
                    latest_version=pkg_data["latest_version"],
                    is_outdated=True,
                    days_behind=self._calculate_days_behind(pkg_data),
                    breaking_changes=self._check_breaking_changes(pkg_data),
                    update_priority=self._determine_update_priority(pkg_data)
                )
                outdated_packages.append(package_status)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {e}")
        
        return outdated_packages
    
    def generate_security_report(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        vulnerabilities = self.check_vulnerabilities()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞–∫–µ—Ç—ã
        outdated = self.check_outdated_packages()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
        conflicts = self._check_dependency_conflicts()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
        requirements_issues = self._audit_requirements_file()
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "total_vulnerabilities": len(vulnerabilities),
                "critical_vulnerabilities": len([v for v in vulnerabilities if v.severity == "critical"]),
                "outdated_packages": len(outdated),
                "critical_updates": len([p for p in outdated if p.update_priority == "critical"]),
                "dependency_conflicts": len(conflicts),
                "security_score": self._calculate_security_score(vulnerabilities, outdated)
            },
            "vulnerabilities": [v.__dict__ for v in vulnerabilities],
            "outdated_packages": [p.__dict__ for p in outdated],
            "conflicts": conflicts,
            "requirements_issues": requirements_issues,
            "recommendations": self._generate_security_recommendations(vulnerabilities, outdated)
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ UTF-8, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ —ç–º–æ–¥–∑–∏)
        with open(self.security_report, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        return report
    
    def perform_safe_updates(self, dry_run: bool = True) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤"""
        print(f"–ó–∞–ø—É—Å–∫ {'—Å–∏–º—É–ª—è—Ü–∏–∏' if dry_run else '—Ä–µ–∞–ª—å–Ω—ã—Ö'} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        
        outdated = self.check_outdated_packages()
        safe_updates = []
        risky_updates = []
        
        for package in outdated:
            if self._is_safe_to_update(package):
                safe_updates.append(package)
            else:
                risky_updates.append(package)
        
        results = {
            "timestamp": datetime.now().isoformat(),
            "dry_run": dry_run,
            "safe_updates": [],
            "risky_updates": [p.__dict__ for p in risky_updates],
            "errors": []
        }
        
        if not dry_run:
            # –°–æ–∑–¥–∞–µ–º backup requirements.txt
            self._backup_requirements()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            for package in safe_updates:
                try:
                    result = subprocess.run([
                        "pip", "install", "--upgrade", package.name
                    ], capture_output=True, text=True, check=True)
                    
                    results["safe_updates"].append({
                        "package": package.name,
                        "old_version": package.installed_version,
                        "new_version": package.latest_version,
                        "status": "success"
                    })
                    
                except subprocess.CalledProcessError as e:
                    results["errors"].append({
                        "package": package.name,
                        "error": str(e)
                    })
        else:
            # –í dry_run —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
            results["safe_updates"] = [p.__dict__ for p in safe_updates]
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._log_update_results(results)
        
        return results
    
    def _determine_severity(self, vuln_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        advisory = vuln_data.get("advisory", "").lower()
        
        if any(word in advisory for word in ["critical", "remote code execution", "rce"]):
            return "critical"
        elif any(word in advisory for word in ["high", "sql injection", "xss"]):
            return "high"
        elif any(word in advisory for word in ["medium", "denial of service"]):
            return "medium"
        else:
            return "low"
    
    def _extract_fixed_version(self, vuln_data: Dict) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
        advisory = vuln_data.get("advisory", "")
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "fixed in 1.2.3" –∏–ª–∏ "upgrade to 1.2.3"
        patterns = [
            r"fixed in (\d+\.\d+\.\d+)",
            r"upgrade to (\d+\.\d+\.\d+)",
            r"version (\d+\.\d+\.\d+) and above"
        ]
        
        for pattern in patterns:
            match = re.search(pattern, advisory, re.IGNORECASE)
            if match:
                return match.group(1)
        
        return None
    
    def _calculate_days_behind(self, pkg_data: Dict) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω API PyPI
        return 30  # –∑–∞–≥–ª—É—à–∫–∞
    
    def _check_breaking_changes(self, pkg_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ breaking changes"""
        installed = pkg_data["version"]
        latest = pkg_data["latest_version"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º major version changes
        installed_major = int(installed.split('.')[0]) if '.' in installed else 0
        latest_major = int(latest.split('.')[0]) if '.' in latest else 0
        
        return latest_major > installed_major
    
    def _determine_update_priority(self, pkg_data: Dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        pkg_name = pkg_data["name"].lower()
        
        if pkg_name in self.critical_packages:
            return "critical" if self._check_breaking_changes(pkg_data) else "high"
        elif pkg_name in self.sensitive_packages:
            return "medium"
        else:
            return "low"
    
    def _check_dependency_conflicts(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        conflicts = []
        
        try:
            result = subprocess.run(
                ["pip", "check"], capture_output=True, text=True
            )
            
            if result.returncode != 0:
                # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ pip check
                for line in result.stdout.split('\n'):
                    if "has requirement" in line:
                        conflicts.append({
                            "description": line.strip(),
                            "severity": "medium"
                        })
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤: {e}")
        
        return conflicts
    
    def _audit_requirements_file(self) -> List[Dict]:
        """–ê—É–¥–∏—Ç —Ñ–∞–π–ª–∞ requirements.txt"""
        issues = []
        
        if not self.requirements_file.exists():
            issues.append({
                "type": "missing_file",
                "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª requirements.txt"
            })
            return issues
        
        with open(self.requirements_file, 'r') as f:
            lines = f.readlines()
        
        for i, line in enumerate(lines, 1):
            line = line.strip()
            if not line or line.startswith('#'):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
            if '==' not in line and '~=' not in line and '>=' not in line:
                issues.append({
                    "type": "unpinned_version",
                    "line": i,
                    "package": line,
                    "message": f"–ü–∞–∫–µ—Ç {line} –Ω–µ –∏–º–µ–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"
                })
        
        return issues
    
    def _calculate_security_score(self, vulnerabilities: List, outdated: List) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–π –±–∞–ª–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (0-100)"""
        score = 100
        
        # –°–Ω–∏–∂–∞–µ–º –±–∞–ª–ª –∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        for vuln in vulnerabilities:
            if vuln.severity == "critical":
                score -= 25
            elif vuln.severity == "high":
                score -= 15
            elif vuln.severity == "medium":
                score -= 5
            else:
                score -= 2
        
        # –°–Ω–∏–∂–∞–µ–º –±–∞–ª–ª –∑–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
        critical_outdated = [p for p in outdated if p.update_priority == "critical"]
        score -= len(critical_outdated) * 5
        
        return max(0, score)
    
    def _generate_security_recommendations(self, vulnerabilities: List, outdated: List) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        recommendations = []
        
        if vulnerabilities:
            critical_vulns = [v for v in vulnerabilities if v.severity == "critical"]
            if critical_vulns:
                recommendations.append(
                    f"üö® –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±–Ω–æ–≤–∏—Ç–µ {len(critical_vulns)} –ø–∞–∫–µ—Ç–æ–≤ —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏"
                )
        
        critical_updates = [p for p in outdated if p.update_priority == "critical"]
        if critical_updates:
            recommendations.append(
                f"‚ö†Ô∏è –û–±–Ω–æ–≤–∏—Ç–µ {len(critical_updates)} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
            )
        
        if len(outdated) > 10:
            recommendations.append(
                "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)"
            )
        
        return recommendations
    
    def _is_safe_to_update(self, package: PackageStatus) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–∞–∫–µ—Ç"""
        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å breaking changes –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞–∫–µ—Ç–∞—Ö
        if package.breaking_changes and package.name.lower() in self.critical_packages:
            return False
        
        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if package.name.lower() in self.sensitive_packages:
            return False
        
        return True
    
    def _backup_requirements(self):
        """–°–æ–∑–¥–∞–µ—Ç backup —Ñ–∞–π–ª–∞ requirements.txt"""
        if self.requirements_file.exists():
            backup_file = self.results_dir / f"requirements_backup_{int(datetime.now().timestamp())}.txt"
            # –ß–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å –≤ UTF-8
            backup_file.write_text(self.requirements_file.read_text(encoding='utf-8'), encoding='utf-8')
    
    def _log_update_results(self, results: Dict):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        if self.update_log.exists():
            with open(self.update_log, 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            data = []
        
        data.append(results)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π
        if len(data) > 50:
            data = data[-50:]
        
        with open(self.update_log, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

def main():
    import sys
    
    manager = DependencySecurityManager()
    
    if len(sys.argv) > 1 and sys.argv[1] == "--audit":
        # –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        report = manager.generate_security_report()
        
        print("\nüîê –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print(f"–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: {report['summary']['security_score']}/100")
        print(f"–£—è–∑–≤–∏–º–æ—Å—Ç–∏: {report['summary']['total_vulnerabilities']} (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {report['summary']['critical_vulnerabilities']})")
        print(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {report['summary']['outdated_packages']}")
        
        if report['recommendations']:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in report['recommendations']:
                print(f"  {rec}")
    
    elif len(sys.argv) > 1 and sys.argv[1] == "--update-safe":
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        results = manager.perform_safe_updates(dry_run=False)
        
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: {len(results['safe_updates'])}")
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã—Ö: {len(results['risky_updates'])}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {len(results['errors'])}")
    
    elif len(sys.argv) > 1 and sys.argv[1] == "--security-report":
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        vulnerabilities = manager.check_vulnerabilities()
        outdated = manager.check_outdated_packages()
        
        if vulnerabilities:
            print(f"\nüö® –ù–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
            for vuln in vulnerabilities[:5]:
                print(f"  {vuln.package} {vuln.installed_version}: {vuln.severity}")
        
        if outdated:
            critical = [p for p in outdated if p.update_priority == "critical"]
            if critical:
                print(f"\n‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ({len(critical)}):")
                for pkg in critical[:5]:
                    print(f"  {pkg.name}: {pkg.installed_version} ‚Üí {pkg.latest_version}")
    
    else:
        print("üîê Dependency Security Manager")
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  --audit          –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("  --update-safe    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        print("  --security-report –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç")

if __name__ == "__main__":
    main()
