"""
#!/usr/bin/env python3
üîç Database Browser ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö PostgreSQL

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–∫–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ GUI

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python scripts/db_browser.py

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- src/database/postgres_adapter.py
- PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (rap_lyrics)

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –£–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import argparse
import asyncio
import json
import sys

sys.path.append(".")
from src.database.postgres_adapter import PostgreSQLManager


class DatabaseBrowser:
    """–ë—Ä–∞—É–∑–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL"""

    def __init__(self):
        self.db = PostgreSQLManager()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        await self.db.initialize()

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        await self.db.close()

    async def show_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        async with self.db.get_connection() as conn:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            tracks_count = await conn.fetchval("SELECT COUNT(*) FROM tracks")
            analysis_count = await conn.fetchval(
                "SELECT COUNT(*) FROM analysis_results"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º
            artist_stats = await conn.fetch("""
                SELECT artist, COUNT(*) as track_count 
                FROM tracks 
                GROUP BY artist 
                ORDER BY track_count DESC 
                LIMIT 10
            """)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º
            analyzer_stats = await conn.fetch("""
                SELECT analyzer_type, COUNT(*) as analysis_count 
                FROM analysis_results 
                GROUP BY analyzer_type 
                ORDER BY analysis_count DESC
            """)

            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("=" * 50)
            print(f"üéµ –¢—Ä–µ–∫–æ–≤: {tracks_count:,}")
            print(f"üß† –ê–Ω–∞–ª–∏–∑–æ–≤: {analysis_count:,}")

            print("\nüé§ –¢–û–ü-10 –ê–†–¢–ò–°–¢–û–í:")
            for artist in artist_stats:
                print(f"  {artist['artist']}: {artist['track_count']} —Ç—Ä–µ–∫–æ–≤")

            print("\nü§ñ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–´:")
            for analyzer in analyzer_stats:
                print(
                    f"  {analyzer['analyzer_type']}: {analyzer['analysis_count']} –∞–Ω–∞–ª–∏–∑–æ–≤"
                )

    async def search_tracks(self, query: str, limit: int = 10):
        """–ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤"""
        async with self.db.get_connection() as conn:
            tracks = await conn.fetch(
                """
                SELECT id, title, artist, album, release_date, LENGTH(lyrics) as lyrics_length
                FROM tracks 
                WHERE title ILIKE $1 OR artist ILIKE $1 OR lyrics ILIKE $1
                ORDER BY 
                    CASE 
                        WHEN title ILIKE $1 THEN 1
                        WHEN artist ILIKE $1 THEN 2
                        ELSE 3
                    END
                LIMIT $2
            """,
                f"%{query}%",
                limit,
            )

            print(
                f"\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê '{query}' (–ø–æ–∫–∞–∑–∞–Ω–æ {len(tracks)} –∏–∑ –º–∞–∫—Å. {limit}):"
            )
            print("=" * 80)

            for track in tracks:
                print(f"üéµ ID: {track['id']}")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {track['title']}")
                print(f"   –ê—Ä—Ç–∏—Å—Ç: {track['artist']}")
                print(f"   –ê–ª—å–±–æ–º: {track['album'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                print(f"   –î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {track['release_date'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
                print(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {track['lyrics_length']} —Å–∏–º–≤–æ–ª–æ–≤")
                print("-" * 40)

    async def show_track(self, track_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ"""
        async with self.db.get_connection() as conn:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
            track = await conn.fetchrow("SELECT * FROM tracks WHERE id = $1", track_id)
            if not track:
                print(f"‚ùå –¢—Ä–µ–∫ —Å ID {track_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ê–Ω–∞–ª–∏–∑—ã —Ç—Ä–µ–∫–∞
            analyses = await conn.fetch(
                """
                SELECT * FROM analysis_results 
                WHERE track_id = $1 
                ORDER BY created_at DESC
            """,
                track_id,
            )

            print(f"\nüéµ –¢–†–ï–ö ID: {track_id}")
            print("=" * 60)
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {track['title']}")
            print(f"–ê—Ä—Ç–∏—Å—Ç: {track['artist']}")
            print(f"–ê–ª—å–±–æ–º: {track['album'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {track['release_date'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"–ñ–∞–Ω—Ä: {track['genre'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
            print(f"–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {track['popularity_score'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

            print("\nüìù –¢–ï–ö–°–¢ –ü–ï–°–ù–ò:")
            print("-" * 40)
            print(track["lyrics"][:500] + ("..." if len(track["lyrics"]) > 500 else ""))

            print(f"\nüß† –ê–ù–ê–õ–ò–ó–´ ({len(analyses)} —à—Ç.):")
            print("-" * 40)
            for analysis in analyses:
                print(f"ü§ñ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä: {analysis['analyzer_type']}")
                print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis['sentiment'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis['confidence'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}")
                print(
                    f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis['complexity_score'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}"
                )
                print(f"   –°–æ–∑–¥–∞–Ω: {analysis['created_at']}")

                if analysis["analysis_data"]:
                    try:
                        # analysis_data –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON –∏–ª–∏ —É–∂–µ –æ–±—ä–µ–∫—Ç–æ–º
                        if isinstance(analysis["analysis_data"], str):
                            data = json.loads(analysis["analysis_data"])
                        else:
                            data = analysis["analysis_data"]

                        print(f"   –ñ–∞–Ω—Ä: {data.get('genre', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
                        print(
                            f"   –≠–Ω–µ—Ä–≥–∏—è: {data.get('energy_level', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}"
                        )
                        print(
                            f"   –ö–∞—á–µ—Å—Ç–≤–æ: {data.get('overall_quality', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')}"
                        )
                    except (json.JSONDecodeError, AttributeError):
                        print("   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞")
                print("-" * 20)

    async def list_tracks(self, artist: str | None = None, limit: int = 20):
        """–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤"""
        async with self.db.get_connection() as conn:
            if artist:
                tracks = await conn.fetch(
                    """
                    SELECT id, title, artist, album, release_date 
                    FROM tracks 
                    WHERE artist ILIKE $1
                    ORDER BY title
                    LIMIT $2
                """,
                    f"%{artist}%",
                    limit,
                )
                print(
                    f"\nüé§ –¢–†–ï–ö–ò –ê–†–¢–ò–°–¢–ê '{artist}' (–ø–æ–∫–∞–∑–∞–Ω–æ {len(tracks)} –∏–∑ –º–∞–∫—Å. {limit}):"
                )
            else:
                tracks = await conn.fetch(
                    """
                    SELECT id, title, artist, album, release_date 
                    FROM tracks 
                    ORDER BY id DESC
                    LIMIT $1
                """,
                    limit,
                )
                print(
                    f"\nüéµ –ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ï–ö–ò (–ø–æ–∫–∞–∑–∞–Ω–æ {len(tracks)} –∏–∑ –º–∞–∫—Å. {limit}):"
                )

            print("=" * 80)
            for track in tracks:
                release_year = (
                    track["release_date"].year if track["release_date"] else "????"
                )
                print(
                    f"ID: {track['id']:6} | {track['artist'][:20]:20} | {track['title'][:40]:40} | {release_year}"
                )

    async def recent_analyses(self, limit: int = 10):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã"""
        async with self.db.get_connection() as conn:
            analyses = await conn.fetch(
                """
                SELECT ar.*, t.title, t.artist 
                FROM analysis_results ar
                JOIN tracks t ON ar.track_id = t.id
                ORDER BY ar.created_at DESC
                LIMIT $1
            """,
                limit,
            )

            print(
                f"\nüß† –ü–û–°–õ–ï–î–ù–ò–ï –ê–ù–ê–õ–ò–ó–´ (–ø–æ–∫–∞–∑–∞–Ω–æ {len(analyses)} –∏–∑ –º–∞–∫—Å. {limit}):"
            )
            print("=" * 90)

            for analysis in analyses:
                print(
                    f"ü§ñ {analysis['analyzer_type']:15} | {analysis['artist'][:20]:20} - {analysis['title'][:30]:30}"
                )
                print(
                    f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {analysis['sentiment'] or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ':15} | –°–æ–∑–¥–∞–Ω: {analysis['created_at']}"
                )
                print("-" * 80)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Database Browser –¥–ª—è PostgreSQL")
    parser.add_argument(
        "command",
        choices=["stats", "search", "track", "list", "recent"],
        help="–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
    )
    parser.add_argument("--query", "-q", help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    parser.add_argument("--id", "-i", type=int, help="ID —Ç—Ä–µ–∫–∞")
    parser.add_argument("--artist", "-a", help="–ò–º—è –∞—Ä—Ç–∏—Å—Ç–∞")
    parser.add_argument("--limit", "-l", type=int, default=10, help="–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

    args = parser.parse_args()

    browser = DatabaseBrowser()

    try:
        await browser.initialize()

        if args.command == "stats":
            await browser.show_stats()

        elif args.command == "search":
            if not args.query:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä --query –¥–ª—è –ø–æ–∏—Å–∫–∞")
                return
            await browser.search_tracks(args.query, args.limit)

        elif args.command == "track":
            if not args.id:
                print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä --id –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–∫–∞")
                return
            await browser.show_track(args.id)

        elif args.command == "list":
            await browser.list_tracks(args.artist, args.limit)

        elif args.command == "recent":
            await browser.recent_analyses(args.limit)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await browser.close()


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if len(sys.argv) == 1:
        print("üîç DATABASE BROWSER - –ü—Ä–æ—Å–º–æ—Ç—Ä PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print("=" * 60)
        print("–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("")
        print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print("  python scripts/db_browser.py stats")
        print("")
        print("üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤:")
        print("  python scripts/db_browser.py search --query 'eminem'")
        print("  python scripts/db_browser.py search -q 'love' --limit 5")
        print("")
        print("üéµ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–∫–∞:")
        print("  python scripts/db_browser.py track --id 12561")
        print("")
        print("üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤:")
        print("  python scripts/db_browser.py list --limit 20")
        print("  python scripts/db_browser.py list --artist 'drake' --limit 10")
        print("")
        print("üß† –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã:")
        print("  python scripts/db_browser.py recent --limit 15")
        print("")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!")
    else:
        asyncio.run(main())
