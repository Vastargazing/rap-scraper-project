#!/usr/bin/env python3
"""
üß© CLI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –≤—ã–±–æ—Ä–æ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: algorithmic_basic, qwen, ollama, hybrid
- –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python src/cli/analyzer_cli.py --text "—Ç–µ–∫—Å—Ç" --analyzer qwen      # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ Qwen
python src/cli/analyzer_cli.py --text "—Ç–µ–∫—Å—Ç" --analyzer hybrid    # –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- src/core/app.py, src/interfaces/analyzer_interface.py
- config.yaml

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import argparse
import asyncio
import json
import sys
import time
from pathlib import Path
from typing import Any

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent))

from core.app import Application


class AnalyzerCLI:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤"""

    def __init__(self):
        self.app = Application()

    async def analyze_text(
        self,
        text: str,
        analyzer_type: str,
        output_format: str = "json",
        save_to_db: bool = False,
    ) -> dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º"""

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Å—Ç—Ä–æ–∫–µ
        analyzer = self.app.get_analyzer(analyzer_type)
        if not analyzer:
            available = self.app.list_analyzers()
            raise ValueError(
                f"Unknown analyzer type: {analyzer_type}. Available: {available}"
            )

        print(f"üìä Analyzing with {analyzer_type} analyzer...")
        start_time = time.time()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ - –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∫ —Å—Ç–∞—Ä–æ–º—É API
        if hasattr(analyzer, "analyze"):
            result = await analyzer.analyze(text)
        elif hasattr(analyzer, "analyze_song"):
            # –°—Ç–∞—Ä—ã–π API - –ø–µ—Ä–µ–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            analysis_result = analyzer.analyze_song("Unknown", "Text Analysis", text)
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            result = {
                "sentiment": getattr(analysis_result, "metadata", {})
                .get("sentiment_analysis", {})
                .get("overall_sentiment", "neutral"),
                "confidence": getattr(analysis_result, "confidence", 0.8),
                "analysis_type": analyzer_type,
                "metadata": getattr(analysis_result, "metadata", {}),
                "raw_output": getattr(analysis_result, "raw_output", {}),
            }
        else:
            raise RuntimeError(f"Analyzer {analyzer_type} has no analyze method")

        analysis_time = time.time() - start_time

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        result_with_meta = {
            "analyzer": analyzer_type,
            "analysis_time": round(analysis_time, 3),
            "text_length": len(text),
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "result": result,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if save_to_db:
            await self._save_to_database(text, result_with_meta)

        return result_with_meta

    async def batch_analyze(
        self,
        input_file: str,
        analyzer_type: str,
        output_file: str | None = None,
        save_to_db: bool = False,
    ) -> None:
        """–ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""

        input_path = Path(input_file)
        if not input_path.exists():
            raise FileNotFoundError(f"Input file not found: {input_file}")

        # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open(input_path, encoding="utf-8") as f:
            if input_path.suffix == ".json":
                data = json.load(f)
                if isinstance(data, list):
                    texts = [item.get("text", str(item)) for item in data]
                else:
                    texts = [data.get("text", str(data))]
            else:
                # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª - –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                texts = [line.strip() for line in f if line.strip()]

        print(f"üîÑ Batch analyzing {len(texts)} texts with {analyzer_type}...")

        results = []
        for i, text in enumerate(texts, 1):
            print(f"Processing {i}/{len(texts)}...")
            try:
                result = await self.analyze_text(
                    text, analyzer_type, save_to_db=save_to_db
                )
                results.append(result)
            except Exception as e:
                print(f"Error processing text {i}: {e}")
                results.append(
                    {
                        "error": str(e),
                        "text": text[:100] + "..." if len(text) > 100 else text,
                    }
                )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if output_file:
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)

            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(results, f, indent=2, ensure_ascii=False)

            print(f"‚úÖ Results saved to: {output_file}")

        return results

    async def compare_analyzers(
        self, text: str, analyzers: list | None = None, output_file: str | None = None
    ) -> dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤"""

        if analyzers is None:
            analyzers = ["algorithmic", "gemma", "ollama", "hybrid"]

        print(f"üîç Comparing {len(analyzers)} analyzers...")

        comparison_results = {
            "text": text,
            "text_length": len(text),
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "analyzers": {},
        }

        for analyzer_type in analyzers:
            print(f"  Running {analyzer_type} analyzer...")
            try:
                result = await self.analyze_text(text, analyzer_type)
                comparison_results["analyzers"][analyzer_type] = result
            except Exception as e:
                print(f"  Error with {analyzer_type}: {e}")
                comparison_results["analyzers"][analyzer_type] = {"error": str(e)}

        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
        if (
            len(
                [
                    r
                    for r in comparison_results["analyzers"].values()
                    if "error" not in r
                ]
            )
            > 1
        ):
            comparison_results["summary"] = self._analyze_differences(
                comparison_results
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if output_file:
            output_path = Path(output_file)
            output_path.parent.mkdir(parents=True, exist_ok=True)

            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(comparison_results, f, indent=2, ensure_ascii=False)

            print(f"‚úÖ Comparison saved to: {output_file}")

        return comparison_results

    async def _save_to_database(
        self, text: str, analysis_result: dict[str, Any]
    ) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            print(f"üíæ Saving to database: {analysis_result['analyzer']} analysis")
        except Exception as e:
            print(f"Warning: Failed to save to database: {e}")

    def _analyze_differences(
        self, comparison_results: dict[str, Any]
    ) -> dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞–º–∏"""
        summary = {"performance": {}, "consensus": {}, "differences": []}

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for analyzer, result in comparison_results["analyzers"].items():
            if "error" not in result:
                summary["performance"][analyzer] = {
                    "analysis_time": result.get("analysis_time", 0),
                    "success": True,
                }
            else:
                summary["performance"][analyzer] = {
                    "analysis_time": None,
                    "success": False,
                    "error": result["error"],
                }

        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞ –∏ —Ä–∞–∑–ª–∏—á–∏–π

        return summary


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  python analyzer_cli.py analyze "Your text here" --analyzer gemma

  # –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑ —Ñ–∞–π–ª–∞
  python analyzer_cli.py batch input.json --analyzer hybrid --output results.json

  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
  python analyzer_cli.py compare "Your text here" --analyzers gemma ollama hybrid

  # –ê–Ω–∞–ª–∏–∑ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
  python analyzer_cli.py analyze "Your text here" --analyzer algorithmic --save-db
        """,
    )

    subparsers = parser.add_subparsers(dest="command", help="Available commands")

    # –ö–æ–º–∞–Ω–¥–∞ analyze
    analyze_parser = subparsers.add_parser("analyze", help="Analyze single text")
    analyze_parser.add_argument("text", help="Text to analyze")
    analyze_parser.add_argument(
        "--analyzer",
        "-a",
        required=True,
        choices=["gemma", "ollama", "algorithmic", "hybrid"],
        help="Analyzer to use",
    )
    analyze_parser.add_argument("--output", "-o", help="Output file (JSON)")
    analyze_parser.add_argument(
        "--save-db", action="store_true", help="Save results to database"
    )
    analyze_parser.add_argument(
        "--format",
        choices=["json", "yaml", "table"],
        default="json",
        help="Output format",
    )

    # –ö–æ–º–∞–Ω–¥–∞ batch
    batch_parser = subparsers.add_parser("batch", help="Batch analyze texts from file")
    batch_parser.add_argument("input", help="Input file (JSON or text)")
    batch_parser.add_argument(
        "--analyzer",
        "-a",
        required=True,
        choices=["gemma", "ollama", "algorithmic", "hybrid"],
        help="Analyzer to use",
    )
    batch_parser.add_argument("--output", "-o", help="Output file (JSON)")
    batch_parser.add_argument(
        "--save-db", action="store_true", help="Save results to database"
    )

    # –ö–æ–º–∞–Ω–¥–∞ compare
    compare_parser = subparsers.add_parser("compare", help="Compare multiple analyzers")
    compare_parser.add_argument("text", help="Text to analyze")
    compare_parser.add_argument(
        "--analyzers",
        nargs="+",
        choices=["gemma", "ollama", "algorithmic", "hybrid"],
        default=["algorithmic", "hybrid"],
        help="Analyzers to compare",
    )
    compare_parser.add_argument("--output", "-o", help="Output file (JSON)")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return None

    # –°–æ–∑–¥–∞–µ–º CLI –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    cli = AnalyzerCLI()

    try:
        if args.command == "analyze":
            result = asyncio.run(
                cli.analyze_text(args.text, args.analyzer, args.format, args.save_db)
            )

            if args.output:
                with open(args.output, "w", encoding="utf-8") as f:
                    json.dump(result, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ Result saved to: {args.output}")
            else:
                print(json.dumps(result, indent=2, ensure_ascii=False))

        elif args.command == "batch":
            asyncio.run(
                cli.batch_analyze(args.input, args.analyzer, args.output, args.save_db)
            )

        elif args.command == "compare":
            result = asyncio.run(
                cli.compare_analyzers(args.text, args.analyzers, args.output)
            )

            if not args.output:
                print(json.dumps(result, indent=2, ensure_ascii=False))

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
