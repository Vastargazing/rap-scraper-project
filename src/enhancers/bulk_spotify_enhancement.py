#!/usr/bin/env python3
"""
üéµ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Spotify API

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏ –∞—É–¥–∏–æ-—Ñ–∏—á–∞–º–∏ –∏–∑ Spotify
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ retry/backoff, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python src/enhancers/bulk_spotify_enhancement.py

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- requests, dotenv
- src/enhancers/spotify_enhancer.py
- .env —Å SPOTIFY_CLIENT_ID/SECRET

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã Spotify-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
- –õ–æ–≥–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""
import os
import sys
import time
import json
import sqlite3
import requests
import ssl
from datetime import datetime
from dotenv import load_dotenv
from typing import Optional, List, Dict, Any, Tuple
import logging
import re
from urllib3.util.retry import Retry
from requests.adapters import HTTPAdapter

try:
    from src.enhancers.spotify_enhancer import SpotifyEnhancer
except Exception:
    from spotify_enhancer import SpotifyEnhancer

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/spotify_enhancement_improved.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ImprovedSpotifyEnhancer(SpotifyEnhancer):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è SpotifyEnhancer —Å robust retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
    
    def __init__(self, client_id: str = None, client_secret: str = None, db_path: str = None):
        super().__init__(client_id, client_secret, db_path)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ robust HTTP session —Å SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        self.session = requests.Session()
        
        # Retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
        retry_strategy = Retry(
            total=5,  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            backoff_factor=2,  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff (1, 2, 4, 8, 16 —Å–µ–∫)
            status_forcelist=[429, 500, 502, 503, 504],  # HTTP –∫–æ–¥—ã –¥–ª—è retry
            allowed_methods=["GET"],  # –¢–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
            raise_on_status=False
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
        
        # SSL –∏ connection pool –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        import ssl
        import urllib3
        
        # –û—Ç–∫–ª—é—á–∞–µ–º warnings –¥–ª—è SSL –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
        self.default_timeout = 30
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.requests_per_second = 3  # –ï—â–µ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∏—Å–∫–∞
        self.stats = {
            'strategies_used': {
                'exact': 0,
                'basic': 0,
                'no_feat': 0,
                'keywords': 0,
                'simple': 0,
                'track_only': 0,
                'alt_artist': 0,
                'not_found': 0
            }
        }
        
        print("üîß –£–ª—É—á—à–µ–Ω–Ω—ã–π SpotifyEnhancer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å robust retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º")
    
    def _recreate_session(self):
        """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ HTTP session –¥–ª—è —Ä–µ—à–µ–Ω–∏—è SSL –ø—Ä–æ–±–ª–µ–º"""
        try:
            self.session.close()
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é session
        self.session = requests.Session()
        
        # Retry —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
        retry_strategy = Retry(
            total=5,
            backoff_factor=2,
            status_forcelist=[429, 500, 502, 503, 504],
            allowed_methods=["GET"],
            raise_on_status=False
        )
        
        adapter = HTTPAdapter(max_retries=retry_strategy)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)
    
    def _make_request(self, endpoint: str, params: Dict = None) -> Optional[Dict]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å robust retry-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        if not self.get_access_token():
            return None
        
        # Rate limiting —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        current_time = time.time()
        time_since_last = current_time - self.last_request_time
        min_interval = 1.0 / self.requests_per_second
        
        if time_since_last < min_interval:
            sleep_time = min_interval - time_since_last
            time.sleep(sleep_time)
        
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json"
        }
        
        url = f"{self.base_url}/{endpoint}"
        max_retries = 3
        
        for attempt in range(max_retries):
            try:
                response = self.session.get(
                    url, 
                    headers=headers, 
                    params=params, 
                    timeout=self.default_timeout
                )
                
                self.last_request_time = time.time()
                self.api_calls_count += 1
                
                if response.status_code == 200:
                    return response.json()
                    
                elif response.status_code == 429:
                    # Rate limit exceeded
                    retry_after = int(response.headers.get('Retry-After', 60))
                    logger.warning(f"Rate limit exceeded, –∂–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥")
                    time.sleep(retry_after + 5)  # +5 —Å–µ–∫ –±—É—Ñ–µ—Ä–∞
                    continue  # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    
                elif response.status_code == 401:
                    # Token expired
                    logger.info("Token –∏—Å—Ç–µ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                    self.access_token = None
                    if self.get_access_token():
                        headers["Authorization"] = f"Bearer {self.access_token}"
                        continue  # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                    return None
                    
                else:
                    logger.error(f"API –æ—à–∏–±–∫–∞: {response.status_code}")
                    if attempt < max_retries - 1:
                        time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff
                        continue
                    return None
                    
            except (requests.exceptions.SSLError, 
                    requests.exceptions.ConnectionError,
                    requests.exceptions.Timeout,
                    requests.exceptions.ProxyError,
                    ConnectionResetError,
                    ssl.SSLEOFError) as e:
                
                logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {type(e).__name__}: {str(e)[:100]}")
                
                if attempt < max_retries - 1:
                    # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
                    backoff_time = (2 ** attempt) + 5  # +5 —Å–µ–∫ –±–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞
                    logger.info(f"–ñ–¥–µ–º {backoff_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    time.sleep(backoff_time)
                    
                    # –î–ª—è SSL –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º session
                    if isinstance(e, (requests.exceptions.SSLError, ssl.SSLEOFError)):
                        logger.info("–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º HTTP session –∏–∑-–∑–∞ SSL –æ—à–∏–±–∫–∏...")
                        self._recreate_session()
                    
                    continue
                else:
                    logger.error(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {url}")
                    return None
                    
            except Exception as e:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                return None
        
        return None
    
    def search_track_improved(self, track_name: str, artist_name: str) -> Optional[Any]:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        
        print(f"      üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫: {track_name} - {artist_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        if not self.get_access_token():
            print(f"      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
            return None
        
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_track = self._clean_track_name(track_name)
        clean_artist = self._clean_artist_name(artist_name)
        
        print(f"      üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {clean_track} - {clean_artist}")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
        print(f"      1Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'exact'...")
        result = self._try_search_strategy(clean_track, clean_artist, "exact")
        if result:
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'exact': {track_name} - {artist_name}")
            self.stats['strategies_used']['exact'] += 1
            print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'exact'!")
            return result
        
        print(f"      üîÑ Exact –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–µ–∑ —Å–∫–æ–±–æ–∫, –≤–µ—Ä—Å–∏–π)
        basic_track = self._get_basic_track_name(clean_track)
        if basic_track != clean_track:
            print(f"      2Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'basic': {basic_track}")
            result = self._try_search_strategy(basic_track, clean_artist, "basic")
            if result:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'basic': {track_name} - {artist_name}")
                self.stats['strategies_used']['basic'] += 1
                print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'basic'!")
                return result
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: —É–±–∏—Ä–∞–µ–º feat/ft –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        no_feat_track = re.sub(r'\s+(feat\.|ft\.|featuring).*$', '', basic_track, flags=re.IGNORECASE)
        if no_feat_track != basic_track:
            print(f"      3Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'no_feat': {no_feat_track}")
            result = self._try_search_strategy(no_feat_track, clean_artist, "no_feat")
            if result:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'no_feat': {track_name} - {artist_name}")
                self.stats['strategies_used']['no_feat'] += 1
                print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'no_feat'!")
                return result
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ø–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É + –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keywords = self._extract_keywords(no_feat_track)
        if keywords:
            print(f"      4Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'keywords': {keywords}")
            result = self._try_search_strategy(keywords, clean_artist, "keywords")
            if result:
                logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'keywords': {track_name} - {artist_name}")
                self.stats['strategies_used']['keywords'] += 1
                print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'keywords'!")
                return result
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
        print(f"      5Ô∏è‚É£ –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é 'simple'...")
        result = self._try_search_strategy(no_feat_track, clean_artist, "simple")
        if result:
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'simple': {track_name} - {artist_name}")
            self.stats['strategies_used']['simple'] += 1
            print(f"      ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π 'simple'!")
            return result
        
        # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        print(f"      ‚ùå –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π")
        self.stats['strategies_used']['not_found'] += 1
        
        return None
    
    def _try_search_strategy(self, track_name: str, artist_name: str, strategy: str) -> Optional[Any]:
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        try:
            if strategy == "exact":
                query = f'track:"{track_name}" artist:"{artist_name}"'
            elif strategy == "basic":
                query = f'track:"{track_name}" artist:"{artist_name}"'
            elif strategy == "no_feat":
                query = f'track:"{track_name}" artist:"{artist_name}"'
            elif strategy == "keywords":
                query = f'"{track_name}" artist:"{artist_name}"'
            elif strategy == "simple":
                query = f'{track_name} {artist_name}'
            elif strategy == "track_only":
                query = f'track:"{track_name}"'
            elif strategy == "alt_artist":
                query = f'track:"{track_name}" artist:"{artist_name}"'
            else:
                query = f'{track_name} {artist_name}'
            
            params = {
                "q": query,
                "type": "track",
                "limit": 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ matching
            }
            
            print(f"        üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å: {query[:100]}...")
            
            data = self._make_request("search", params)
            if not data:
                print(f"        ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API")
                return None
                
            if "tracks" not in data:
                print(f"        ‚ùå –ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API")
                return None
            
            tracks = data["tracks"]["items"]
            if not tracks:
                print(f"        ‚ùå –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤")
                return None
            
            print(f"        üì¶ –ü–æ–ª—É—á–∏–ª–∏ {len(tracks)} —Ç—Ä–µ–∫–æ–≤, –∏—â–µ–º –ª—É—á—à–∏–π match...")
            
            # –ò—â–µ–º –ª—É—á—à–∏–π match –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞—Ä—Ç–∏—Å—Ç—É
            best_match = self._find_best_match(tracks, track_name, artist_name, strategy)
            if best_match:
                print(f"        ‚úÖ –ù–∞–π–¥–µ–Ω match: {best_match.get('name', 'Unknown')} by {best_match.get('artists', [{}])[0].get('name', 'Unknown')}")
                return self._create_spotify_track(best_match)
            else:
                print(f"        ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π match —Å—Ä–µ–¥–∏ {len(tracks)} —Ç—Ä–µ–∫–æ–≤")
                
        except Exception as e:
            print(f"        ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy}: {e}")
            logger.debug(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy}: {e}")
            
        return None
    
    def _clean_track_name(self, track_name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        if not track_name:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean = " ".join(track_name.split())
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        replacements = {
            ''': "'",
            ''': "'", 
            '"': '"',
            '"': '"',
            '‚Äì': '-',
            '‚Äî': '-',
            '‚Ä¶': '...',
            '&': 'and',
            '@': 'at',
            '$': 's',
            '4': 'for',
            '2': 'to',
            'u': 'you',
            'ur': 'your',
            'w/': 'with',
            'w': 'with',
            'n': 'and',
            'b4': 'before',
            'luv': 'love',
            'thru': 'through'
        }
        
        for old, new in replacements.items():
            clean = clean.replace(old, new)
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã/—Å—É—Ñ—Ñ–∏–∫—Å—ã
        clean = re.sub(r'^(official\s+)?(music\s+)?(video\s+)?', '', clean, flags=re.IGNORECASE)
        clean = re.sub(r'\s+(official|music|video|audio|lyric|lyrics)(\s+video|\s+audio)?$', '', clean, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ –∫–∞—á–µ—Å—Ç–≤–∞/–∏—Å—Ç–æ—á–Ω–∏–∫–∞
        clean = re.sub(r'\s*\((hq|hd|4k|official|clean|explicit|radio\s+edit)\)\s*', ' ', clean, flags=re.IGNORECASE)
        clean = re.sub(r'\s*\[(hq|hd|4k|official|clean|explicit|radio\s+edit)\]\s*', ' ', clean, flags=re.IGNORECASE)
        
        return " ".join(clean.split()).strip()
    
    def _clean_artist_name(self, artist_name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞"""
        if not artist_name:
            return ""
        
        clean = self._clean_track_name(artist_name)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ–Ω–∞
        standardizations = {
            "A$AP": "ASAP",
            "A$AP Rocky": "ASAP Rocky",
            "A$AP Ferg": "ASAP Ferg",
            "XXXTentacion": "XXXTENTACION"
        }
        
        for old, new in standardizations.items():
            if old in clean:
                clean = clean.replace(old, new)
        
        return clean
    
    def _get_basic_track_name(self, track_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        patterns_to_remove = [
            # –í–µ—Ä—Å–∏–∏ –∏ —Ä–µ–º–∏–∫—Å—ã
            r'\(.*?demo.*?\)',  # (Demo), (Demo 1)
            r'\(.*?remix.*?\)', # (Remix)
            r'\(.*?mix.*?\)',   # (Mixed)
            r'\(.*?original.*?\)', # (Original)
            r'\(.*?version.*?\)', # (Version)
            r'\(.*?edit.*?\)',  # (Edit)
            r'\(.*?remaster.*?\)', # (Remastered)
            r'\[.*?v\d+.*?\]',  # [V1], [V2]
            r'\[.*?original.*?\]', # [Original]
            
            # –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            r'\(.*?(hq|hd|4k|320|mp3|flac|wav).*?\)',
            r'\[.*?(hq|hd|4k|320|mp3|flac|wav).*?\]',
            r'\(.*?(official|clean|explicit|radio).*?\)',
            r'\[.*?(official|clean|explicit|radio).*?\]',
            
            # –§–∏—á–µ—Ä–∏–Ω–≥–∏ –≤ —Å–∫–æ–±–∫–∞—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ)
            r'\(.*?feat.*?\)',
            r'\(.*?ft\..*?\)',
            r'\[.*?feat.*?\]',
            r'\[.*?ft\..*?\]',
            
            # –¢–µ–≥–∏ –∏ –º–µ—Ç–∫–∏
            r'\*+\s*$',        # –ó–≤–µ–∑–¥–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            r'\s*\(\s*\)\s*',  # –ü—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏
            r'\s*\[\s*\]\s*',  # –ü—É—Å—Ç—ã–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
            r'\s*-\s*$',       # –î–µ—Ñ–∏—Å –≤ –∫–æ–Ω—Ü–µ
            r'^\s*-\s*',       # –î–µ—Ñ–∏—Å –≤ –Ω–∞—á–∞–ª–µ
            
            # –ì–æ–¥—ã
            r'\(19\d{2}\)',    # (1990-1999)
            r'\(20\d{2}\)',    # (2000-2099)
            r'\[19\d{2}\]',    # [1990-1999]
            r'\[20\d{2}\]',    # [2000-2099]
        ]
        
        basic = track_name
        for pattern in patterns_to_remove:
            basic = re.sub(pattern, '', basic, flags=re.IGNORECASE)
        
        # –û—á–∏—Å—Ç–∫–∞ feat/ft –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞)
        basic = re.sub(r'\s+(feat\.|ft\.|featuring)\s+', ' feat ', basic, flags=re.IGNORECASE)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        basic = re.sub(r'\s*[,;]\s*$', '', basic)  # –ó–∞–ø—è—Ç—ã–µ –∏ —Ç–æ—á–∫–∏ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ
        basic = " ".join(basic.split())
        
        return basic.strip()
    
    def _extract_keywords(self, track_name: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        
        # –£–±–∏—Ä–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {
            'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 
            'of', 'with', 'by', 'feat', 'ft', 'featuring'
        }
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
        words = re.findall(r'\b\w+\b', track_name.lower())
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
        keywords = [word for word in words if word not in stop_words and len(word) > 2]
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
        return " ".join(keywords[:3])
    
    def _get_alternative_artist_name(self, artist_name: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∞—Ä—Ç–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        
        # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã/–ø—Ä–µ—Ñ–∏–∫—Å—ã
        alt_name = artist_name
        
        # –£–±–∏—Ä–∞–µ–º "Lil", "Big", "Young", "DJ" –∏ —Ç.–¥.
        prefixes_to_remove = [
            r'^(lil\s+|big\s+|young\s+|dj\s+|mc\s+|the\s+)',
            r'^(lil|big|young|dj|mc)\s*',
        ]
        
        for prefix in prefixes_to_remove:
            alt_name = re.sub(prefix, '', alt_name, flags=re.IGNORECASE).strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º $ –Ω–∞ S –≤ –∏–º–µ–Ω–∞—Ö —Ç–∏–ø–∞ A$AP
        alt_name = alt_name.replace('$', 'S')
        
        # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        alt_name = re.sub(r'\s*\([^)]*\)\s*', ' ', alt_name)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        alt_name = " ".join(alt_name.split())
        
        return alt_name if alt_name != artist_name else artist_name
    
    def _find_best_match(self, tracks: List[Dict], target_track: str, target_artist: str, strategy: str = "exact") -> Optional[Dict]:
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å—Ä–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
        
        def similarity_score(track_data: Dict) -> float:
            """–û—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Ç—Ä–µ–∫–∞"""
            score = 0
            
            track_name = track_data.get("name", "").lower()
            track_artists = [artist.get("name", "").lower() for artist in track_data.get("artists", [])]
            
            target_track_lower = target_track.lower()
            target_artist_lower = target_artist.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞
            artist_match = any(target_artist_lower in artist or artist in target_artist_lower 
                             for artist in track_artists)
            if artist_match:
                score += 50
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞
            if target_track_lower in track_name or track_name in target_track_lower:
                score += 30
            
            # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
            popularity = track_data.get("popularity", 0)
            score += popularity * 0.2
            
            return score
        
        if not tracks:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–µ–∫ —Å –ª—É—á—à–∏–º score
        best_track = max(tracks, key=similarity_score)
        best_score = similarity_score(best_track)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
        if best_score >= 30:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–µ–º–ª–µ–º—ã–π score
            return best_track
        
        return None
    
    def _create_spotify_track(self, track_data: Dict) -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ SpotifyTrack –∏–∑ –¥–∞–Ω–Ω—ã—Ö API"""
        try:
            from src.models.models import SpotifyTrack
        except ImportError:
            # Fallback –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞
            try:
                from ..models.models import SpotifyTrack
            except ImportError:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                class SimpleSpotifyTrack:
                    def __init__(self, **kwargs):
                        for key, value in kwargs.items():
                            setattr(self, key, value)
                SpotifyTrack = SimpleSpotifyTrack
        
        return SpotifyTrack(
            spotify_id=track_data["id"],
            name=track_data["name"],
            artist_id=track_data["artists"][0]["id"],
            album_name=track_data.get("album", {}).get("name"),
            release_date=track_data.get("album", {}).get("release_date"),
            duration_ms=track_data.get("duration_ms"),
            popularity=track_data.get("popularity", 0),
            explicit=track_data.get("explicit", False),
            spotify_url=track_data["external_urls"]["spotify"],
            preview_url=track_data.get("preview_url")
        )


class ImprovedBulkSpotifyEnhancement:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è"""
    
    def __init__(self, enhancer: ImprovedSpotifyEnhancer):
        self.enhancer = enhancer
        self.stats = {
            'tracks_processed': 0,
            'tracks_success': 0,
            'tracks_failed': 0,
            'total_api_calls': 0,
            'start_time': None,
            'errors': {},
            'strategies_used': {
                'exact': 0,
                'basic': 0,
                'no_feat': 0,
                'keywords': 0,
                'simple': 0,
                'track_only': 0,
                'alt_artist': 0,
                'not_found': 0
            }
        }
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º checkpoint –≤ –ø–∞–ø–∫—É results 
        self.checkpoint_file = "results/spotify_enhancement_checkpoint.json"
    
    def enhance_all_tracks_improved(self, start_from: int = 0, batch_size: int = 1000):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—Å–æ–≤–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Å checkpoint'–∞–º–∏"""
        print("üéµ –£–õ–£–ß–®–ï–ù–ù–û–ï –ú–ê–°–°–û–í–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï –¢–†–ï–ö–û–í")
        print("=" * 60)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º checkpoint –µ—Å–ª–∏ –µ—Å—Ç—å
        if start_from == 0:
            start_from = self._load_checkpoint()
        
        conn = sqlite3.connect(self.enhancer.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å checkpoint
        cursor.execute("""
            SELECT s.id, s.title, s.artist 
            FROM songs s
            LEFT JOIN spotify_tracks st ON s.id = st.song_id
            WHERE st.song_id IS NULL AND s.id >= ?
            ORDER BY s.id
            LIMIT ?
        """, (start_from, batch_size))
        
        tracks = cursor.fetchall()
        conn.close()
        
        if not tracks:
            print(f"üéâ –í—Å–µ —Ç—Ä–µ–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            return
        
        print(f"üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ —Å ID {tracks[0][0]} –¥–æ {tracks[-1][0]}")
        print(f"üìä –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –≤ –±–∞—Ç—á–µ: {len(tracks)}")
        
        self.stats['start_time'] = datetime.now()
        
        try:
            for i, (song_id, title, artist) in enumerate(tracks, 1):
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                try:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Ç—Ä–µ–∫–æ–≤ –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 5
                    if i <= 5 or i % 10 == 0:
                        self._show_progress(i, len(tracks), song_id)
                        self._save_checkpoint(song_id)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
                    print(f"[{i}/{len(tracks)}] üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {artist} - {title}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–∫
                    result = self._process_track(song_id, title, artist)
                    
                    if result['success']:
                        self.stats['tracks_success'] += 1
                        print(f"[{song_id}] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞ Spotify")
                    else:
                        self.stats['tracks_failed'] += 1
                        error_type = result.get('error_type', 'unknown')
                        print(f"[{song_id}] ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ ({error_type})")
                        self.stats['errors'][error_type] = self.stats['errors'].get(error_type, 0) + 1
                        
                        if i % 100 == 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—â–µ —Ä–µ–∂–µ
                            print(f"[{song_id}] ‚ùå {artist} - {title} ({error_type})")
                    
                    self.stats['tracks_processed'] += 1
                    self.stats['total_api_calls'] += result.get('api_calls', 0)
                    
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
                    success_rate = self.stats['tracks_success'] / max(self.stats['tracks_processed'], 1)
                    if success_rate < 0.1:  # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å < 10%
                        time.sleep(0.3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É
                    else:
                        time.sleep(0.15)  # –û–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞
                        
                except KeyboardInterrupt:
                    print(f"\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ {i}")
                    current_id = song_id
                    self._save_checkpoint(current_id)
                    raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º KeyboardInterrupt –≤—ã—à–µ
                
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            if 'i' in locals() and i > 0:
                current_id = tracks[i-1][0] if i > 0 else start_from
                self._save_checkpoint(current_id)
            else:
                print(f"‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –¥–æ –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            if 'i' in locals() and i > 0:
                current_id = tracks[i-1][0] if i > 0 else start_from
                self._save_checkpoint(current_id)
        
        self._show_final_stats()
        self._clear_checkpoint()
    
    def _process_track(self, song_id: int, title: str, artist: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        
        start_time = time.time()
        api_calls_start = self.enhancer.api_calls_count
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫
            track_data = self.enhancer.search_track(title, artist)
            
            api_calls_used = self.enhancer.api_calls_count - api_calls_start
            
            if track_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
                self._save_track_to_db(song_id, track_data)
                
                return {
                    'success': True,
                    'api_calls': api_calls_used,
                    'processing_time': time.time() - start_time
                }
            else:
                return {
                    'success': False,
                    'error_type': 'not_found',
                    'api_calls': api_calls_used,
                    'processing_time': time.time() - start_time
                }
                
        except Exception as e:
            error_type = 'network_error' if 'connection' in str(e).lower() else 'unknown_error'
            
            return {
                'success': False,
                'error_type': error_type,
                'error_message': str(e),
                'api_calls': self.enhancer.api_calls_count - api_calls_start,
                'processing_time': time.time() - start_time
            }
    
    def _save_track_to_db(self, song_id: int, track):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.enhancer.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT OR REPLACE INTO spotify_tracks 
                (song_id, spotify_id, artist_spotify_id, album_name, 
                 release_date, duration_ms, popularity, explicit, 
                 spotify_url, preview_url)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                song_id,
                track.spotify_id,
                track.artist_id,
                track.album_name,
                track.release_date,
                track.duration_ms,
                track.popularity,
                track.explicit,
                track.spotify_url,
                track.preview_url
            ))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ {song_id}: {e}")
    
    def _save_checkpoint(self, current_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"""
        try:
            # –ö–æ–ø–∏—Ä—É–µ–º stats –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
            stats_copy = self.stats.copy()
            if 'start_time' in stats_copy and stats_copy['start_time']:
                if isinstance(stats_copy['start_time'], datetime):
                    stats_copy['start_time'] = stats_copy['start_time'].isoformat()
            
            checkpoint_data = {
                'last_processed_id': current_id,
                'timestamp': datetime.now().isoformat(),
                'stats': stats_copy
            }
            
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(self.checkpoint_file), exist_ok=True)
            
            with open(self.checkpoint_file, 'w', encoding='utf-8') as f:
                json.dump(checkpoint_data, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è checkpoint: {e}")
            # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            logger.debug(f"Traceback: {traceback.format_exc()}")
    
    def _load_checkpoint(self) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ checkpoint –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
        try:
            if os.path.exists(self.checkpoint_file):
                with open(self.checkpoint_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                last_id = data.get('last_processed_id', 0)
                if last_id > 0:
                    print(f"üìÅ –ù–∞–π–¥–µ–Ω checkpoint: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å ID {last_id}")
                    return last_id
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ checkpoint: {e}")
        
        return 0
    
    def _clear_checkpoint(self):
        """–û—á–∏—Å—Ç–∫–∞ checkpoint –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        try:
            if os.path.exists(self.checkpoint_file):
                os.remove(self.checkpoint_file)
                print("üìÅ Checkpoint –æ—á–∏—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ checkpoint: {e}")
    
    def _show_progress(self, current: int, total: int, song_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        print(f"\nüîÑ –ü–†–û–ì–†–ï–°–°: {current}/{total} —Ç—Ä–µ–∫–æ–≤ –≤ –±–∞—Ç—á–µ (ID: {song_id})")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {self.stats['tracks_success']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['tracks_failed']}")
        print(f"üåê API –≤—ã–∑–æ–≤–æ–≤: {self.stats['total_api_calls']}")
        
        if self.stats['tracks_processed'] > 0:
            success_rate = self.stats['tracks_success'] / self.stats['tracks_processed'] * 100
            print(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    def _show_final_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*60)
        print("üìà –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("="*60)
        
        if self.stats['start_time']:
            elapsed = datetime.now() - self.stats['start_time']
            print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed}")
        
        print(f"üéµ –¢—Ä–µ–∫–∏:")
        print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.stats['tracks_processed']}")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {self.stats['tracks_success']}")
        print(f"   ‚Ä¢ –û—à–∏–±–∫–∏: {self.stats['tracks_failed']}")
        
        if self.stats['tracks_processed'] > 0:
            success_rate = self.stats['tracks_success'] / self.stats['tracks_processed'] * 100
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        print(f"üì° –í—Å–µ–≥–æ API –≤—ã–∑–æ–≤–æ–≤: {self.stats['total_api_calls']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        if self.stats['errors']:
            print(f"\n‚ùå –¢–∏–ø—ã –æ—à–∏–±–æ–∫:")
            for error_type, count in self.stats['errors'].items():
                print(f"   ‚Ä¢ {error_type}: {count}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã
        db_stats = self.enhancer.get_stats()
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´:")
        for key, value in db_stats.items():
            print(f"   ‚Ä¢ {key}: {value}")


def main():
    print("üöÄ –£–õ–£–ß–®–ï–ù–ù–´–ô Bulk Spotify Enhancement")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials
    client_id = os.getenv('SPOTIFY_CLIENT_ID')
    client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
    
    if not client_id or not client_secret or client_id == 'your_client_id_here':
        print("‚ùå Spotify credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ credentials –≤ .env")
        return
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π enhancer
    enhancer = ImprovedSpotifyEnhancer(client_id, client_secret)
    bulk_enhancer = ImprovedBulkSpotifyEnhancement(enhancer)
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å checkpoint'–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    print("2. üöÄ –û–ë–û–ì–ê–©–ï–ù–ò–ï –ë–ê–¢–ß–ê –¢–†–ï–ö–û–í (1000 —à—Ç—É–∫)")
    print("3. üéØ –ü–û–õ–ù–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï (–≤—Å–µ —Ç—Ä–µ–∫–∏)")
    print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
    
    if choice == "1":
        print("\nüîÑ –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –° CHECKPOINT'–ê")
        bulk_enhancer.enhance_all_tracks_improved()
    
    elif choice == "2":
        batch_size = input("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000): ").strip()
        batch_size = int(batch_size) if batch_size.isdigit() else 1000
        
        print(f"\nüöÄ –û–ë–û–ì–ê–©–ï–ù–ò–ï –ë–ê–¢–ß–ê ({batch_size} —Ç—Ä–µ–∫–æ–≤)")
        bulk_enhancer.enhance_all_tracks_improved(batch_size=batch_size)
    
    elif choice == "3":
        confirm = input("\n‚ö†Ô∏è –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –í–°–ï —Ç—Ä–µ–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if confirm.lower() == 'y':
            print("\nüéØ –ü–û–õ–ù–û–ï –û–ë–û–ì–ê–©–ï–ù–ò–ï")
            bulk_enhancer.enhance_all_tracks_improved(batch_size=50000)  # –ë–æ–ª—å—à–æ–π –±–∞—Ç—á
        else:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
    
    elif choice == "4":
        print("\nüìä –¢–ï–ö–£–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        stats = enhancer.get_stats()
        for key, value in stats.items():
            print(f"  ‚Ä¢ {key}: {value}")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()
