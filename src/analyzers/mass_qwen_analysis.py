#!/usr/bin/env python3
"""
#!/usr/bin/env python3
ü§ñ –ú–∞—Å—Å–æ–≤—ã–π AI-–∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Qwen

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –±–∞–∑–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Qwen AI
- –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python scripts/mass_qwen_analysis.py                 # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã
python scripts/mass_qwen_analysis.py --batch 200     # –ê–Ω–∞–ª–∏–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- src/core/app.py, src/interfaces/analyzer_interface.py
- PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (rap_lyrics)
- Novita AI/Qwen API –∫–ª—é—á–∏

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ –ø–æ–∫—Ä—ã—Ç–∏—é
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—à–∏–±–æ–∫

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

#!/usr/bin/env python3
"""
ü§ñ –ú–∞—Å—Å–æ–≤—ã–π AI-–∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Qwen (PostgreSQL –≤–µ—Ä—Å–∏—è)

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –≤ PostgreSQL –±–∞–∑–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Qwen AI
- –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python scripts/mass_qwen_analysis_postgres.py                 # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã
python scripts/mass_qwen_analysis_postgres.py --batch 200     # –ê–Ω–∞–ª–∏–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –±–∞—Ç—á–∞

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- src/core/app.py, src/interfaces/analyzer_interface.py
- PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (rap_lyrics)
- Novita AI/Qwen API –∫–ª—é—á–∏

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∞–Ω–∞–ª–∏–∑–∞ –≤ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ –ø–æ–∫—Ä—ã—Ç–∏—é
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ—à–∏–±–æ–∫

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import sys
import os
import asyncio
import time
import json
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
sys.path.insert(0, project_root)
sys.path.insert(0, os.path.join(project_root, 'src'))

from src.core.app import create_app
from src.interfaces.analyzer_interface import AnalyzerFactory
from src.database.postgres_adapter import PostgreSQLManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
from src.analyzers.qwen_analyzer import QwenAnalyzer

async def mass_analyze_database(batch_size: int = 100, max_records: Optional[int] = None):
    """
    –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å Qwen –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
    
    Args:
        batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        max_records: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (None = –≤—Å–µ)
    """
    print("üéµ Rap Scraper - Mass Database Analysis with Qwen (PostgreSQL)")
    print("=" * 70)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = create_app()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = AnalyzerFactory.create("qwen")
    if not analyzer.available:
        print("‚ùå Qwen –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    print(f"‚úÖ Qwen –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤: {analyzer.model_name}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_manager = PostgreSQLManager()
    await db_manager.initialize()
    
    try:
        async with db_manager.get_connection() as conn:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            count_query = """
            SELECT COUNT(*) 
            FROM tracks 
            WHERE lyrics IS NOT NULL 
            AND lyrics != '' 
            AND id NOT IN (
                SELECT DISTINCT track_id 
                FROM analysis_results 
                WHERE analyzer_type LIKE '%qwen%'
            )
            """
            
            total_unanalyzed = await conn.fetchval(count_query)
            print(f"üìà –ù–∞–π–¥–µ–Ω–æ {total_unanalyzed} –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            if total_unanalyzed == 0:
                print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
                return
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            query = """
            SELECT t.id, t.artist, t.title, t.lyrics 
            FROM tracks t
            WHERE t.lyrics IS NOT NULL 
            AND t.lyrics != '' 
            AND t.id NOT IN (
                SELECT DISTINCT track_id 
                FROM analysis_results 
                WHERE analyzer_type LIKE '%qwen%'
            )
            ORDER BY t.id
            """
            
            if max_records:
                actual_limit = min(max_records, total_unanalyzed)
                query += f" LIMIT {actual_limit}"
                print(f"üéØ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ {actual_limit} –∑–∞–ø–∏—Å–µ–π")
            else:
                actual_limit = total_unanalyzed
            
            records = await conn.fetch(query)
            total_records = len(records)
            
            print(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_records} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            
            if total_records == 0:
                print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
                return
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∞–Ω–∞–ª–∏–∑–µ
            print(f"\nüéØ –ë—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_records} –∑–∞–ø–∏—Å–µ–π")
            print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {(total_records * 15) // 60} –º–∏–Ω—É—Ç")
            print(f"üåü –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å Qwen —á–µ—Ä–µ–∑ Novita AI - –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç!")
            
            # –ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            start_time = time.time()
            processed = 0
            errors = 0
            
            print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...")
            print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
            
            for i in range(0, total_records, batch_size):
                batch = records[i:i+batch_size]
                batch_start = time.time()
                
                print(f"\nüì¶ –ë–∞—Ç—á {i//batch_size + 1}/{(total_records + batch_size - 1)//batch_size}")
                print(f"üìä –ó–∞–ø–∏—Å–∏ {i+1}-{min(i+batch_size, total_records)} –∏–∑ {total_records}")
                
                for record in batch:
                    track_id = record['id']
                    artist = record['artist']
                    title = record['title']
                    lyrics = record['lyrics']
                    
                    try:
                        print(f"üéµ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {artist} - {title}")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
                        result = analyzer.analyze_song(artist, title, lyrics)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
                        if result is None:
                            print(f"‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è - –ø–æ–ª—É—á–µ–Ω None")
                            errors += 1
                            continue
                        
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PostgreSQL
                        analysis_data = {
                            'track_id': track_id,
                            'analyzer_type': 'qwen-3-4b-fp8',
                            'sentiment': result.metadata.get('mood', {}).get('overall', 'neutral'),
                            'confidence': result.confidence or 0.5,
                            'complexity_score': 3.0,  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
                            'themes': result.metadata.get('themes', []),
                            'analysis_data': result.raw_output or {},
                            'processing_time_ms': int((result.processing_time or 0) * 1000),
                            'model_version': 'qwen-3-4b-fp8'
                        }
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL
                        analysis_id = await db_manager.save_analysis_result(analysis_data)
                        
                        if analysis_id:
                            processed += 1
                            sentiment = analysis_data['sentiment']
                            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sentiment} (ID: {analysis_id})")
                        else:
                            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É")
                            errors += 1
                        
                        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        time.sleep(0.5)
                        
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ {track_id}: {e}")
                        errors += 1
                        continue
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞—Ç—á–∞
                batch_time = time.time() - batch_start
                print(f"‚è±Ô∏è  –ë–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {batch_time:.1f}—Å")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
                if i + batch_size < total_records:
                    print("‚è∏Ô∏è  –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏...")
                    time.sleep(2)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_time = time.time() - start_time
            success_rate = (processed / total_records) * 100 if total_records > 0 else 0
            
            print(f"\nüèÜ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
            print(f"=" * 50)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {processed}")
            print(f"‚ùå –û—à–∏–±–æ–∫: {errors}")
            print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
            print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time//60:.0f}–º {total_time%60:.0f}—Å")
            print(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {processed/total_time*60:.1f} –∞–Ω–∞–ª–∏–∑–æ–≤/–º–∏–Ω")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã
            final_count = await conn.fetchval(count_query)
            print(f"üìà –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {final_count}")
            
    finally:
        await db_manager.close()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–ú–∞—Å—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å Qwen")
    parser.add_argument('--batch', type=int, default=100, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (default: 100)')
    parser.add_argument('--max', type=int, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
    parser.add_argument('--test', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ 10 –∑–∞–ø–∏—Å–µ–π)')
    
    args = parser.parse_args()
    
    if args.test:
        print("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 10 –∑–∞–ø–∏—Å–µ–π")
        await mass_analyze_database(batch_size=5, max_records=10)
    else:
        await mass_analyze_database(batch_size=args.batch, max_records=args.max)

if __name__ == "__main__":
    asyncio.run(main())
