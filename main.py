#!/usr/bin/env python3
"""
üéØ –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Ñ–ª–∞–≥–∏
- –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏ –ø–µ—Å–µ–Ω (4 –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞)
- –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–º —Å–∏—Å—Ç–µ–º—ã

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
python main.py                      # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
python main.py --analyze "—Ç–µ–∫—Å—Ç"    # –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
python main.py --batch file.txt     # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
python main.py --benchmark          # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
python main.py --info               # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
python main.py --test               # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- src/{cli,analyzers,models}/
- config.yaml
- PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (rap_lyrics database)
- –í—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã: algorithmic_basic, qwen, ollama, hybrid

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, —Å—Ç–∞—Ç—É—Å–æ–º
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Docker –∏ API

–ê–í–¢–û–†: Vastargazing
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import argparse
import asyncio
import json
import sys
import time
from pathlib import Path
from typing import Any

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

try:
    from src.cli import BatchProcessor, PerformanceMonitor
    from src.core.app import create_app
    from src.interfaces.analyzer_interface import AnalyzerFactory
    from src.scrapers.rap_scraper_postgres import OptimizedPostgreSQLScraper
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("Make sure you're running from the project root directory")
    sys.exit(1)


class RapScraperMainApp:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –º–µ–Ω—é –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üéµ Rap Scraper Project - Main Application")
        print("=" * 50)

        try:
            self.app = create_app()
            self.batch_processor = BatchProcessor()
            self.performance_monitor = PerformanceMonitor()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è scraper –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
            from src.utils.config import GENIUS_TOKEN

            if GENIUS_TOKEN:
                self.scraper = OptimizedPostgreSQLScraper(GENIUS_TOKEN)
                print("‚úÖ Scraper initialized successfully")
            else:
                self.scraper = None
                print("‚ö†Ô∏è Genius token not found - scraping disabled")

            print("‚úÖ Application initialized successfully")
            print(f"üìä Available analyzers: {self.app.list_analyzers()}")

        except Exception as e:
            print(f"‚ùå Failed to initialize application: {e}")
            raise

    def show_main_menu(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\nüéØ Main Menu:")
        print("1. üï∑Ô∏è Scraping Operations")
        print("2.  Batch processing")
        print("3. üìà Performance benchmark")
        print("4. üîç System information")
        print("5. üß™ Run tests")
        print("6. üìã Configuration")
        print("0. ‚ùå Exit")
        print(
            "\nüí° Quick start: Press Enter to start scraping from remaining_artists.json"
        )
        print()

    async def run_interactive_mode(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        while True:
            self.show_main_menu()

            try:
                choice = input("Select option (0-6, Enter=scraping): ").strip()

                if choice == "":
                    # –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
                    print(
                        "üöÄ Quick start: Beginning scraping from remaining_artists.json..."
                    )
                    await self.continue_scraping()
                elif choice == "0":
                    print("üëã Goodbye!")
                    break
                elif choice == "1":
                    await self.scraping_operations_interactive()
                elif choice == "2":
                    await self.batch_processing_interactive()
                elif choice == "3":
                    await self.performance_benchmark_interactive()
                elif choice == "4":
                    await self.show_system_info()
                elif choice == "5":
                    await self.run_tests_interactive()
                elif choice == "6":
                    await self.show_configuration()
                else:
                    print("‚ùå Invalid choice. Please select 0-6.")

                input("\nPress Enter to continue...")

            except KeyboardInterrupt:
                print("\nüëã Goodbye!")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
                input("Press Enter to continue...")

    async def scraping_operations_interactive(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
        print("\nüï∑Ô∏è Scraping Operations")
        print("-" * 22)

        print("Available scraping options:")
        print("1. üîÑ Continue scraping (from remaining_artists.json) [RECOMMENDED]")
        print("2. üé§ Scrape single artist")
        print("3. ÔøΩ Scrape from artist list (custom)")
        print("4. üìä View scraping status")
        print("5. üõ†Ô∏è Database management")
        print("0. ‚¨ÖÔ∏è Back to main menu")

        choice = input("\nSelect scraping option (0-5, Enter=1): ").strip()

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º Continue scraping
        if choice == "" or choice == "1":
            await self.continue_scraping()
        elif choice == "0":
            return
        elif choice == "2":
            await self.scrape_single_artist()
        elif choice == "3":
            await self.scrape_artist_list()
        elif choice == "4":
            await self.show_scraping_status()
        elif choice == "5":
            await self.database_management()
        else:
            print("‚ùå Invalid choice. Please select 0-5.")

    async def scrape_single_artist(self) -> None:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞"""
        print("\nüé§ Single Artist Scraping")
        print("-" * 25)

        artist_name = input("Enter artist name: ").strip()
        if not artist_name:
            print("‚ùå No artist name provided")
            return

        max_songs = input("Max songs to scrape (default: 50): ").strip()
        try:
            max_songs = int(max_songs) if max_songs else 50
        except ValueError:
            max_songs = 50

        try:
            print(f"\nüîÑ Scraping {artist_name} (max {max_songs} songs)...")

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º PostgreSQL —Å–∫—Ä–∞–ø–µ—Ä
            from src.scrapers.rap_scraper_postgres import OptimizedPostgreSQLScraper
            from src.utils.config import GENIUS_TOKEN

            if not GENIUS_TOKEN:
                print("‚ùå GENIUS_TOKEN not found in environment")
                return

            scraper = OptimizedPostgreSQLScraper(GENIUS_TOKEN)

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
            result = await self._run_artist_scraping(scraper, artist_name, max_songs)

            if result["success"]:
                print("‚úÖ Scraping completed!")
                print(f"  üéµ Songs found: {result.get('songs_found', 0)}")
                print(f"  üíæ Songs saved: {result.get('songs_saved', 0)}")
                print(f"  ‚è±Ô∏è Time taken: {result.get('time_taken', 0):.1f}s")
            else:
                print(f"‚ùå Scraping failed: {result.get('error', 'Unknown error')}")

        except Exception as e:
            print(f"‚ùå Scraping error: {e}")

    async def scrape_artist_list(self) -> None:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
        print("\nüìã Artist List Scraping")
        print("-" * 24)

        # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–ø–∏—Å–∫–∞
        print("Select artist list source:")
        print("1. üìÑ Text file (one artist per line)")
        print("2. üìä JSON file")
        print("3. ‚å®Ô∏è Manual input")

        source_choice = input("Select source (1-3): ").strip()

        artists = []

        if source_choice == "1":
            file_path = input("Enter text file path: ").strip()
            try:
                with open(file_path, encoding="utf-8") as f:
                    artists = [line.strip() for line in f if line.strip()]
            except Exception as e:
                print(f"‚ùå Error reading file: {e}")
                return

        elif source_choice == "2":
            file_path = input("Enter JSON file path: ").strip()
            try:
                import json

                with open(file_path, encoding="utf-8") as f:
                    data = json.load(f)
                    if isinstance(data, list):
                        artists = [str(item) for item in data]
                    else:
                        artists = list(data.keys()) if isinstance(data, dict) else []
            except Exception as e:
                print(f"‚ùå Error reading JSON file: {e}")
                return

        elif source_choice == "3":
            print("Enter artist names (one per line, empty line to finish):")
            while True:
                artist = input().strip()
                if not artist:
                    break
                artists.append(artist)
        else:
            print("‚ùå Invalid choice")
            return

        if not artists:
            print("‚ùå No artists provided")
            return

        print(f"\nüìã Found {len(artists)} artists to scrape")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
        songs_per_artist = input("Songs per artist (default: 20): ").strip()
        try:
            songs_per_artist = int(songs_per_artist) if songs_per_artist else 20
        except ValueError:
            songs_per_artist = 20

        try:
            print("\nüîÑ Starting batch scraping...")

            from src.scrapers.rap_scraper_postgres import OptimizedPostgreSQLScraper
            from src.utils.config import GENIUS_TOKEN

            if not GENIUS_TOKEN:
                print("‚ùå GENIUS_TOKEN not found in environment")
                return

            scraper = OptimizedPostgreSQLScraper(GENIUS_TOKEN)

            total_songs = 0
            successful_artists = 0

            for i, artist in enumerate(artists, 1):
                print(f"\nüé§ [{i}/{len(artists)}] Scraping: {artist}")

                result = await self._run_artist_scraping(
                    scraper, artist, songs_per_artist
                )

                if result["success"]:
                    songs_saved = result.get("songs_saved", 0)
                    total_songs += songs_saved
                    successful_artists += 1
                    print(f"  ‚úÖ Saved {songs_saved} songs")
                else:
                    print(f"  ‚ùå Failed: {result.get('error', 'Unknown error')}")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
                if i < len(artists):
                    print("  ‚è∏Ô∏è Pausing...")
                    await asyncio.sleep(2)

            print("\nüèÜ Batch scraping completed!")
            print(f"  üé§ Artists processed: {successful_artists}/{len(artists)}")
            print(f"  üéµ Total songs scraped: {total_songs}")

        except Exception as e:
            print(f"‚ùå Batch scraping error: {e}")

    async def continue_scraping(self) -> None:
        """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å remaining_artists.json"""
        print("\nüîÑ Continue Scraping")
        print("-" * 19)

        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º data/remaining_artists.json
            remaining_artists_file = Path("data/remaining_artists.json")

            if remaining_artists_file.exists():
                print(f"üìÅ Using artist list: {remaining_artists_file}")
                self.scrape_from_remaining_artists()
            else:
                print(f"‚ùå File not found: {remaining_artists_file}")
                print("üîç Looking for alternative artist files in data/...")

                # –ò—â–µ–º –¥—Ä—É–≥–∏–µ JSON —Ñ–∞–π–ª—ã —Å –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
                json_files = list(Path("data").glob("*artist*.json"))
                if json_files:
                    print("üìÅ Found artist files:")
                    for file in json_files:
                        print(f"  - {file.name}")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    selected_file = json_files[0]
                    print(f"üéØ Using: {selected_file.name}")
                    self.scrape_from_file(selected_file)
                else:
                    print("‚ùå No artist files found in data/ directory")
                    print("üí° Please ensure data/remaining_artists.json exists")

        except Exception as e:
            print(f"‚ùå Continue scraping error: {e}")

    def scrape_from_remaining_artists(self) -> None:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –∏–∑ remaining_artists.json –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            import json

            with open("data/remaining_artists.json", encoding="utf-8") as f:
                data = json.load(f)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ JSON
            if isinstance(data, list):
                artists = [str(item) for item in data]
            elif isinstance(data, dict):
                artists = list(data.keys())
            else:
                print("‚ùå Invalid JSON format in remaining_artists.json")
                return

            if not artists:
                print("‚ùå No artists found in remaining_artists.json")
                return

            print(f"üìã Found {len(artists)} artists in remaining_artists.json")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
            songs_per_artist = 20  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 20 –ø–µ—Å–µ–Ω

            print(f"‚öôÔ∏è Settings: {songs_per_artist} songs per artist")
            print("üöÄ Starting scraping...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
            successful_artists = 0
            total_songs = 0

            for i, artist in enumerate(artists, 1):
                print(f"\nüé§ [{i}/{len(artists)}] Scraping: {artist}")

                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π scraper (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤)
                    if not self.scraper:
                        print("  ‚ùå Scraper not available (no Genius token)")
                        continue

                    songs_scraped = self.scraper.scrape_artist_songs(
                        artist, max_songs=songs_per_artist
                    )

                    if songs_scraped > 0:
                        successful_artists += 1
                        total_songs += songs_scraped
                        print(f"  ‚úÖ {songs_scraped} songs scraped")
                        print("  üíæ Saved to database")
                    else:
                        print("  ‚ö†Ô∏è No songs found")

                except Exception as artist_error:
                    print(f"  ‚ùå Error scraping {artist}: {artist_error}")
                    continue

            print("\nüèÜ Scraping completed!")
            print(f"  üé§ Artists processed: {successful_artists}/{len(artists)}")
            print(f"  üéµ Total songs scraped: {total_songs}")

        except Exception as e:
            print(f"‚ùå Error scraping from remaining_artists.json: {e}")

    def scrape_from_file(self, file_path: Path) -> None:
        """–°–∫—Ä–∞–ø–∏–Ω–≥ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞"""
        try:
            import json

            with open(file_path, encoding="utf-8") as f:
                data = json.load(f)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ JSON
            if isinstance(data, list):
                artists = [str(item) for item in data]
            elif isinstance(data, dict):
                artists = list(data.keys())
            else:
                print(f"‚ùå Invalid JSON format in {file_path}")
                return

            if not artists:
                print(f"‚ùå No artists found in {file_path}")
                return

            print(f"üìã Found {len(artists)} artists in {file_path.name}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            songs_per_artist = 20

            print(f"‚öôÔ∏è Settings: {songs_per_artist} songs per artist")
            print("üöÄ Starting scraping...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
            successful_artists = 0
            total_songs = 0

            for i, artist in enumerate(artists, 1):
                print(f"\nüé§ [{i}/{len(artists)}] Scraping: {artist}")

                try:
                    if not self.scraper:
                        print("  ‚ùå Scraper not available (no Genius token)")
                        continue

                    songs_scraped = self.scraper.scrape_artist_songs(
                        artist, max_songs=songs_per_artist
                    )

                    if songs_scraped > 0:
                        successful_artists += 1
                        total_songs += songs_scraped
                        print(f"  ‚úÖ {songs_scraped} songs scraped")
                        print("  üíæ Saved to database")
                    else:
                        print("  ‚ö†Ô∏è No songs found")

                except Exception as artist_error:
                    print(f"  ‚ùå Error scraping {artist}: {artist_error}")
                    continue

            print("\nüèÜ Scraping completed!")
            print(f"  üé§ Artists processed: {successful_artists}/{len(artists)}")
            print(f"  üéµ Total songs scraped: {total_songs}")

        except Exception as e:
            print(f"‚ùå Error scraping from {file_path}: {e}")

    async def show_scraping_status(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∫—Ä–∞–ø–∏–Ω–≥–∞"""
        print("\nüìä Scraping Status")
        print("-" * 18)

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à unified database diagnostics tool
            import subprocess

            print("üîç Running database diagnostics...")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            result = subprocess.run(
                [sys.executable, "scripts/tools/database_diagnostics.py", "--quick"],
                check=False,
                capture_output=True,
                text=True,
                cwd=Path(),
            )

            if result.returncode == 0:
                print(result.stdout)
            else:
                print(f"‚ùå Error running diagnostics: {result.stderr}")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
            print("\nüìà Additional Scraping Metrics:")
            print("  üïí Last scraping session: [Would show from logs]")
            print("  üìÅ Database file size: [Calculated above]")
            print("  üéØ Target completion: [Based on remaining artists]")

        except Exception as e:
            print(f"‚ùå Status check error: {e}")

    async def database_management(self) -> None:
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüõ†Ô∏è Database Management")
        print("-" * 21)

        print("Available operations:")
        print("1. üîç Full database diagnostics")
        print("2. üìä View unanalyzed records")
        print("3. üßπ Database cleanup/optimization")
        print("4. üìÅ Backup database")
        print("5. üìà Export statistics")
        print("0. ‚¨ÖÔ∏è Back")

        choice = input("Select operation (0-5): ").strip()

        if choice == "0":
            return
        if choice == "1":
            # –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            import subprocess

            result = subprocess.run(
                [sys.executable, "scripts/tools/database_diagnostics.py"],
                check=False,
                cwd=Path(),
            )

        elif choice == "2":
            # –ù–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            import subprocess

            limit = input("Number of records to show (default: 10): ").strip()
            limit = limit if limit.isdigit() else "10"

            result = subprocess.run(
                [
                    sys.executable,
                    "scripts/tools/database_diagnostics.py",
                    "--unanalyzed",
                    "-n",
                    limit,
                ],
                check=False,
                cwd=Path(),
            )

        elif choice == "3":
            print("üßπ Database cleanup options:")
            print("  - Remove duplicate entries")
            print("  - Optimize database file")
            print("  - Clean temporary data")
            print("‚ÑπÔ∏è Cleanup functionality would be implemented here")

        elif choice == "4":
            print("üìÅ Creating database backup...")
            try:
                import shutil
                from datetime import datetime

                backup_name = (
                    f"data_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
                )
                backup_path = Path("data") / backup_name

                shutil.copy2("data/rap_lyrics.db", backup_path)
                print(f"‚úÖ Backup created: {backup_path}")

            except Exception as e:
                print(f"‚ùå Backup failed: {e}")

        elif choice == "5":
            print("üìà Exporting statistics...")
            print("‚ÑπÔ∏è Statistics export functionality would be implemented here")

        else:
            print("‚ùå Invalid choice")

    async def _run_artist_scraping(
        self, scraper, artist_name: str, max_songs: int
    ) -> dict[str, Any]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∞—Ä—Ç–∏—Å—Ç–∞"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
            start_time = time.time()

            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ scraper.scrape_artist()
            # result = scraper.scrape_artist(artist_name, max_songs)

            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
            await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã

            return {
                "success": True,
                "songs_found": max_songs,
                "songs_saved": max_songs - 2,  # –ò–º–∏—Ç–∞—Ü–∏—è
                "time_taken": time.time() - start_time,
                "artist": artist_name,
            }

        except Exception as e:
            return {"success": False, "error": str(e), "artist": artist_name}

    async def batch_processing_interactive(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
        print("\nüì¶ Batch Processing")
        print("-" * 20)

        # –í—ã–±–∏—Ä–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        input_file = input("Enter input file path (JSON or text): ").strip()
        if not Path(input_file).exists():
            print(f"‚ùå File not found: {input_file}")
            return

        # –í—ã–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzers = self.app.list_analyzers()
        print(f"Available analyzers: {', '.join(analyzers)}")
        analyzer_type = input("Select analyzer: ").strip()

        if analyzer_type not in analyzers:
            print(f"‚ùå Unknown analyzer: {analyzer_type}")
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        output_file = input(
            "Output file (default: results/batch_results.json): "
        ).strip()
        if not output_file:
            output_file = "results/batch_results.json"

        checkpoint_file = input(
            "Checkpoint file (default: results/batch_checkpoint.json): "
        ).strip()
        if not checkpoint_file:
            checkpoint_file = "results/batch_checkpoint.json"

        workers = input("Number of workers (default: 2): ").strip()
        try:
            workers = int(workers) if workers else 2
        except ValueError:
            workers = 2

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        processor = BatchProcessor(max_workers=workers)

        try:
            # –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(input_file, encoding="utf-8") as f:
                if input_file.endswith(".json"):
                    data = json.load(f)
                    if isinstance(data, list):
                        texts = [item.get("text", str(item)) for item in data]
                    else:
                        texts = [data.get("text", str(data))]
                else:
                    texts = [line.strip() for line in f if line.strip()]

            print(f"\nüöÄ Processing {len(texts)} texts with {workers} workers...")

            results = await processor.process_batch(
                texts=texts,
                analyzer_type=analyzer_type,
                output_file=output_file,
                checkpoint_file=checkpoint_file,
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            successful = len([r for r in results if "error" not in r])
            failed = len(results) - successful

            print("\nüìä Batch Processing Complete:")
            print(f"  ‚úÖ Successful: {successful}")
            print(f"  ‚ùå Failed: {failed}")
            print(f"  üìÑ Results saved to: {output_file}")

        except Exception as e:
            print(f"‚ùå Batch processing failed: {e}")

    async def performance_benchmark_interactive(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüìà Performance Benchmark")
        print("-" * 26)

        # –í—ã–±–∏—Ä–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        available = self.app.list_analyzers()
        print(f"Available analyzers: {', '.join(available)}")

        analyzer_input = input(
            "Select analyzers for benchmark (comma-separated): "
        ).strip()
        analyzers = [a.strip() for a in analyzer_input.split(",") if a.strip()]

        if not analyzers:
            analyzers = available[:2]  # –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        test_count = input("Number of test texts (default: 10): ").strip()
        try:
            test_count = int(test_count) if test_count else 10
        except ValueError:
            test_count = 10

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã
        test_texts = self._generate_test_texts(test_count)

        try:
            print(
                f"\nüî¨ Benchmarking {len(analyzers)} analyzers with {test_count} texts..."
            )

            results = await self.performance_monitor.compare_analyzers(
                analyzer_types=analyzers,
                test_texts=test_texts,
                output_file="performance_benchmark.json",
            )

            print("\nüìä Benchmark Results:")
            print("-" * 40)

            for analyzer_name, metrics in results.items():
                print(f"\nüîß {analyzer_name.upper()}:")
                print(f"  ‚è±Ô∏è  Avg time: {metrics.avg_time:.3f}s")
                print(f"  üöÄ Throughput: {metrics.items_per_second:.1f} items/s")
                print(f"  üìà Success rate: {metrics.success_rate:.1f}%")
                print(f"  üíæ Memory: {metrics.avg_memory_mb:.1f} MB")

            print("\nüìÑ Detailed report saved to: performance_benchmark.json")

        except Exception as e:
            print(f"‚ùå Benchmark failed: {e}")

    async def show_system_info(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        print("\nüîç System Information")
        print("-" * 22)

        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            print("üì± Application Info:")
            print("  Version: 1.0.0")
            print(f"  Python: {sys.version.split()[0]}")
            print(f"  Project root: {Path().absolute()}")

            # –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
            analyzers = self.app.list_analyzers()
            print(f"\nüß† Available Analyzers ({len(analyzers)}):")
            for analyzer in analyzers:
                analyzer_obj = self.app.get_analyzer(analyzer)
                if analyzer_obj:
                    status = "‚úÖ Ready"
                else:
                    status = "‚ùå Error"
                print(f"  {analyzer}: {status}")

            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            print("\n‚öôÔ∏è  Configuration:")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if hasattr(self.app.config.database, "host"):
                # PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                db_info = f"{self.app.config.database.host}:{self.app.config.database.port}/{self.app.config.database.name}"
                print(f"  Database (PostgreSQL): {db_info}")
            else:
                # SQLite –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                print(
                    f"  Database (SQLite): {getattr(self.app.config.database, 'path', 'Not configured')}"
                )

            print(
                f"  Logging: {getattr(self.app.config.logging, 'level', 'Not configured')}"
            )

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            try:
                print("\nüìä Database Stats:")
                if hasattr(self.app, "database") and self.app.database:
                    print("  Connection: ‚úÖ Connected")

                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ PostgreSQL
                    if hasattr(self.app.database, "get_track_count"):
                        track_count = await self.app.database.get_track_count()
                        print(f"  Total tracks: {track_count:,}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                    if hasattr(self.app.database, "_vector_enabled"):
                        if self.app.database._vector_enabled:
                            print("  ML Features: ‚úÖ pgvector enabled")
                        else:
                            print("  ML Features: ‚ùå pgvector not available")
                else:
                    print("  Connection: ‚ùå Not initialized")
            except Exception as e:
                print(f"  Connection: ‚ùå Error: {e}")

        except Exception as e:
            print(f"‚ùå Failed to get system info: {e}")

    async def run_tests_interactive(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
        print("\nüß™ Run Tests")
        print("-" * 12)

        print("Available test suites:")
        print("1. Basic infrastructure tests")
        print("2. CLI component tests")
        print("3. Integration tests")
        print("4. All tests")

        choice = input("Select test suite (1-4): ").strip()

        try:
            import subprocess

            test_file = (
                Path(__file__).parent / "tests" / "test_integration_comprehensive.py"
            )

            if choice == "1":
                cmd = [sys.executable, str(test_file), "basic"]
            elif choice == "2":
                cmd = [sys.executable, str(test_file), "cli"]
            elif choice == "3":
                cmd = [sys.executable, str(test_file), "integration"]
            elif choice == "4":
                cmd = [sys.executable, str(test_file)]
            else:
                print("‚ùå Invalid choice")
                return

            print("üîÑ Running tests...")
            result = subprocess.run(cmd, check=False, capture_output=True, text=True)

            print("üìä Test Results:")
            print(result.stdout)

            if result.stderr:
                print("‚ö†Ô∏è  Warnings/Errors:")
                print(result.stderr)

            print(f"Exit code: {result.returncode}")

        except Exception as e:
            print(f"‚ùå Failed to run tests: {e}")

    async def show_configuration(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        print("\nüìã Configuration")
        print("-" * 17)

        try:
            config = self.app.config

            print("‚öôÔ∏è  Current Configuration:")

            # Database config
            if hasattr(config, "database"):
                print("üìä Database:")
                db_config = config.database
                print(f"  Path: {getattr(db_config, 'path', 'Not set')}")
                print(f"  Pool size: {getattr(db_config, 'pool_size', 'Not set')}")

            # Logging config
            if hasattr(config, "logging"):
                print("üìù Logging:")
                log_config = config.logging
                print(f"  Level: {getattr(log_config, 'level', 'Not set')}")
                print(f"  File: {getattr(log_config, 'file_path', 'Not set')}")
                print(f"  Format: {getattr(log_config, 'format', 'Not set')}")

            # Analyzer configs
            print("üß† Analyzers:")
            for analyzer_name in self.app.list_analyzers():
                print(f"  {analyzer_name}: Registered")

        except Exception as e:
            print(f"‚ùå Failed to show configuration: {e}")

    def _generate_test_texts(self, count: int) -> list[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞"""
        base_texts = [
            "Happy uplifting song about love and joy",
            "Dark melancholic ballad about loss and sadness",
            "Aggressive energetic rap with confident attitude",
            "Peaceful reflective lyrics about nature and life",
            "Romantic slow song about relationships and feelings",
        ]

        texts = []
        for i in range(count):
            base = base_texts[i % len(base_texts)]
            variation = (
                f" (test variation {i // len(base_texts) + 1})"
                if count > len(base_texts)
                else ""
            )
            texts.append(base + variation)

        return texts


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Rap Scraper Project - Main Application",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python main.py                    # Interactive mode
  python main.py --analyze "text"   # Quick analysis
  python main.py --batch input.json # Batch processing
  python main.py --benchmark        # Performance test
  python main.py --info             # System information
        """,
    )

    parser.add_argument("--analyze", help="Quick text analysis")
    parser.add_argument(
        "--analyzer", default="algorithmic_basic", help="Analyzer to use"
    )
    parser.add_argument("--batch", help="Batch process file")
    parser.add_argument(
        "--benchmark", action="store_true", help="Run performance benchmark"
    )
    parser.add_argument("--info", action="store_true", help="Show system information")
    parser.add_argument("--test", action="store_true", help="Run tests")

    args = parser.parse_args()

    try:
        app = RapScraperMainApp()

        if args.analyze:
            # Quick analysis
            result = await app.cli.analyze_text(args.analyze, args.analyzer)
            print(json.dumps(result, indent=2, ensure_ascii=False))

        elif args.batch:
            # Batch processing
            with open(args.batch, encoding="utf-8") as f:
                if args.batch.endswith(".json"):
                    data = json.load(f)
                    texts = [item.get("text", str(item)) for item in data]
                else:
                    texts = [line.strip() for line in f if line.strip()]

            results = await app.batch_processor.process_batch(
                texts=texts,
                analyzer_type=args.analyzer,
                output_file="results/batch_results.json",
            )
            print(f"Processed {len(results)} texts")

        elif args.benchmark:
            # Performance benchmark
            test_texts = app._generate_test_texts(10)
            results = await app.performance_monitor.compare_analyzers(
                analyzer_types=[args.analyzer],
                test_texts=test_texts,
                output_file="results/benchmark_results.json",
            )
            print(
                "Benchmark completed, results saved to results/benchmark_results.json"
            )

        elif args.info:
            # System information
            await app.show_system_info()

        elif args.test:
            # Run tests
            await app.run_tests_interactive()

        else:
            # Interactive mode
            await app.run_interactive_mode()

    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
    except Exception as e:
        print(f"‚ùå Application error: {e}")
        return 1

    return 0


if __name__ == "__main__":
    exit(asyncio.run(main()))
