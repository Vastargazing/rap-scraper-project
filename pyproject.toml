[tool.poetry]
name = "rap-analyzer"
version = "0.0.0"
description = "Production ML Platform for Rap Lyrics Analysis with 5 AI Models"
authors = ["Vastargazing <vastargazing@example.com>"]
readme = "README.md"
packages = [{include = "src"}]
license = "MIT"
homepage = "https://github.com/Vastargazing/rap-scraper-project"
repository = "https://github.com/Vastargazing/rap-scraper-project"
keywords = ["ml", "nlp", "rap", "lyrics", "ai", "fastapi", "postgresql", "qwen", "redis", "prometheus"]

[tool.poetry.dependencies]
python = "^3.10"
# Core dependencies
lyricsgenius = "^3.0.1"
requests = "^2.31.0"
pydantic = "^2.0.0"
python-dotenv = "^1.0.0"

# Database
psycopg2-binary = "^2.9.0"
# asyncpg = "^0.29.0"  # Commented out due to compilation issues on Windows

# Ultra scraper dependencies  
redis = "^5.0.0"
prometheus-client = "^0.19.0"

# System monitoring
psutil = "^5.9.0"

# Web API
fastapi = "^0.104.0"
uvicorn = "^0.24.0"
python-multipart = "^0.0.6"  # Для file uploads в FastAPI
pyyaml = "^6.0"

# AI/ML Analysis - QWEN Primary Model
openai = "^1.0.0"

[tool.poetry.group.dev.dependencies]
# Development tools
pytest = "^7.4.0"
pytest-benchmark = "^4.0.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
mypy = "^1.5.0"
flake8 = "^6.0.0"
coverage = "^7.2.0"
memory-profiler = "^0.60.0"

# Optional testing
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"

[tool.poetry.group.analysis.dependencies]
# For experiments and visualization
jupyter = "^1.0.0"
ipykernel = "^6.25.0"
pandas = "^2.0.0"
numpy = "^2.1.0"
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
plotly = "^5.15.0"
rich = "^13.0.0"
tabulate = "^0.9.0"

[tool.poetry.group.ml-heavy.dependencies]
# Heavy ML libraries - only when needed
transformers = "^4.21.0"
torch = "^1.12.0"
scikit-learn = "^1.3.0"
nltk = "^3.8.0"
sentencepiece = "^0.1.99"

[tool.poetry.group.release.dependencies]
# Automated semantic versioning
python-semantic-release = "^8.0.0"

[tool.poetry.scripts]
rap-scraper = "main:main"
ml-api = "src.models.ml_api_service:main"

[[tool.poetry.source]]
name = "pypi-binary"
url = "https://pypi.org/simple/"
priority = "explicit"

[tool.semantic_release]
version_variable = "pyproject.toml:version"
branch = "main"  # Обычно main, а не master
upload_to_pypi = false
upload_to_release = true
build_command = "poetry build"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]