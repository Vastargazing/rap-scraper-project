#!/usr/bin/env python3
"""
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ Spotify –¥–∞–Ω–Ω—ã—Ö
"""
import sqlite3
import json

def check_sqlite_spotify_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ —Å—Ç–∞—Ä–æ–π SQLite –±–∞–∑–µ"""
    db_path = 'data/rap_lyrics.db'
    
    try:
        conn = sqlite3.connect(db_path)
        print("üîç CHECKING SQLITE DATABASE")
        print("=" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å
        tables = conn.execute("SELECT name FROM sqlite_master WHERE type='table'").fetchall()
        print('üìã TABLES:')
        for table in tables:
            print(f'   - {table[0]}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É spotify_tracks
        print('\nüéµ SPOTIFY_TRACKS STRUCTURE:')
        try:
            schema = conn.execute('PRAGMA table_info(spotify_tracks)').fetchall()
            for col in schema:
                print(f'   - {col[1]} ({col[2]})')
        except:
            print('   ‚ùå No spotify_tracks table')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö
        count = conn.execute('SELECT COUNT(*) FROM spotify_tracks').fetchone()[0]
        print(f'\nüìä SPOTIFY DATA COUNT:')
        print(f'   Total spotify tracks: {count:,}')
        
        if count == 0:
            print('   ‚ùå No data to migrate')
            return
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print('\nüìã SAMPLE DATA:')
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏
        columns_info = conn.execute('PRAGMA table_info(spotify_tracks)').fetchall()
        column_names = [col[1] for col in columns_info]
        print(f'   Available columns: {", ".join(column_names)}')
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        sample_columns = column_names[:6] if len(column_names) >= 6 else column_names
        query = f"SELECT {', '.join(sample_columns)} FROM spotify_tracks LIMIT 5"
        samples = conn.execute(query).fetchall()
        
        for i, sample in enumerate(samples, 1):
            print(f'   {i}. {" | ".join([f"{col}: {val}" for col, val in zip(sample_columns, sample)])}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑—å —Å songs
        print('\nüîó LINKING CHECK:')
        linked_query = '''
            SELECT COUNT(*) 
            FROM spotify_tracks st 
            JOIN songs s ON st.song_id = s.id
        '''
        linked_count = conn.execute(linked_query).fetchone()[0]
        print(f'   Linked with songs table: {linked_count:,}')
        
        # –¢–æ–ø –∞—Ä—Ç–∏—Å—Ç—ã –≤ SQLite
        print('\nüèÜ TOP ARTISTS IN SQLITE:')
        top_artists_query = '''
            SELECT s.artist, COUNT(*) as count
            FROM spotify_tracks st
            JOIN songs s ON st.song_id = s.id
            GROUP BY s.artist
            ORDER BY count DESC
            LIMIT 5
        '''
        top_artists = conn.execute(top_artists_query).fetchall()
        for artist, count in top_artists:
            print(f'   - {artist}: {count} tracks')
        
        print(f'\n‚úÖ READY FOR MIGRATION: {count:,} tracks!')
        
    except Exception as e:
        print(f'‚ùå Error: {e}')
        import traceback
        traceback.print_exc()
    
    finally:
        conn.close()

if __name__ == "__main__":
    check_sqlite_spotify_data()