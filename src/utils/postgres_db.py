#!/usr/bin/env python3
"""
#!/usr/bin/env python3
üêò –ú–µ–Ω–µ–¥–∂–µ—Ä PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Rap Scraper

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ —Å PostgreSQL
- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –∏–Ω–¥–µ–∫—Å–æ–≤, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–µ–Ω, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
- –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
from src.utils.postgres_db import PostgreSQLManager
db = PostgreSQLManager(); db.add_song(...)

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- psycopg2
- config.yaml
- PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (rap_lyrics)

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –ù–∞–¥–µ–∂–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Å–µ–Ω –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""

import sys
import psycopg2
from psycopg2.extras import RealDictCursor
import yaml
import logging
from pathlib import Path
from typing import List, Dict, Optional
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
PROJECT_ROOT = Path(__file__).parent.parent.parent
sys.path.append(str(PROJECT_ROOT))

logger = logging.getLogger(__name__)

class PostgreSQLManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, config_path: Optional[str] = None):
        self.conn = None
        self.cursor = None
        self.config = self._load_config(config_path)
        self._connect()
        self._create_tables()
        
    def _load_config(self, config_path: Optional[str] = None) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.yaml"""

        if config_path is None:
            config_path = PROJECT_ROOT / "config.yaml"
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            return config['database']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            # Fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            return {
                "host": "localhost",
                "port": 5432,
                "name": "rap_lyrics",
                "username": "rap_user",
                "password": "securepassword123"
            }
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
        try:
            self.conn = psycopg2.connect(
                host=self.config['host'],
                port=self.config['port'],
                database=self.config['name'],
                user=self.config['username'],
                password=self.config['password'],
                cursor_factory=RealDictCursor
            )
            self.conn.autocommit = False
            self.cursor = self.conn.cursor()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: {self.config['host']}:{self.config['port']}/{self.config['name']}")
        except psycopg2.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if "does not exist" in str(e):
                self._create_database()
            else:
                raise e
    
    def _create_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –±–∞–∑–µ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ë–î
            temp_conn = psycopg2.connect(
                host=self.config['host'],
                port=self.config['port'],
                database='postgres',  # –°–∏—Å—Ç–µ–º–Ω–∞—è –ë–î
                user=self.config['username'],
                password=self.config['password']
            )
            temp_conn.autocommit = True
            temp_cursor = temp_conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            temp_cursor.execute(f"CREATE DATABASE {self.config['name']}")
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.config['name']}")
            
            temp_cursor.close()
            temp_conn.close()
            
            # –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ë–î
            self._connect()
            
        except psycopg2.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise e
    
    def _create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–µ—Å–µ–Ω
            self.cursor.execute("""
                CREATE TABLE IF NOT EXISTS songs (
                    id SERIAL PRIMARY KEY,
                    artist TEXT NOT NULL,
                    title TEXT NOT NULL,
                    lyrics TEXT NOT NULL,
                    url TEXT UNIQUE NOT NULL,
                    genius_id INTEGER UNIQUE,
                    scraped_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    word_count INTEGER,
                    -- –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    genre TEXT,
                    release_date TEXT,
                    album TEXT,
                    language TEXT DEFAULT 'en',
                    explicit BOOLEAN DEFAULT FALSE,
                    song_art_url TEXT,
                    popularity_score INTEGER DEFAULT 0,
                    lyrics_quality_score REAL DEFAULT 0.0,
                    -- –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∞—Ä—Ç–∏—Å—Ç—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                    UNIQUE(artist, title)
                )
            """)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_songs_artist ON songs(artist)",
                "CREATE INDEX IF NOT EXISTS idx_songs_url ON songs(url)", 
                "CREATE INDEX IF NOT EXISTS idx_songs_genius_id ON songs(genius_id)",
                "CREATE INDEX IF NOT EXISTS idx_songs_genre ON songs(genre)",
                "CREATE INDEX IF NOT EXISTS idx_songs_release_date ON songs(release_date)",
                "CREATE INDEX IF NOT EXISTS idx_songs_quality ON songs(lyrics_quality_score)",
                "CREATE INDEX IF NOT EXISTS idx_songs_word_count ON songs(word_count)",
                "CREATE INDEX IF NOT EXISTS idx_songs_scraped_date ON songs(scraped_date)"
            ]
            
            for index_sql in indexes:
                self.cursor.execute(index_sql)
            
            self.conn.commit()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
            
        except psycopg2.Error as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            self.conn.rollback()
            raise e
    
    def add_song(self, artist: str, title: str, lyrics: str, url: str, 
                 genius_id: int = None, metadata: Dict = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            word_count = len(lyrics.split()) if lyrics else 0
            
            # –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞)
            lyrics_quality = self._calculate_lyrics_quality(lyrics)
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if metadata is None:
                metadata = {}
            
            self.cursor.execute(
                """INSERT INTO tracks (
                    artist, title, lyrics, url, genius_id, word_count,
                    genre, release_date, album, language, explicit,
                    song_art_url, popularity_score, lyrics_quality_score
                ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)""",
                (
                    artist, title, lyrics, url, genius_id, word_count,
                    metadata.get('genre'),
                    metadata.get('release_date'),
                    metadata.get('album'),
                    metadata.get('language', 'en'),
                    metadata.get('explicit', False),
                    metadata.get('song_art_url'),
                    metadata.get('popularity_score', 0),
                    lyrics_quality
                )
            )
            
            self.conn.commit()
            return True
            
        except psycopg2.IntegrityError as e:
            self.conn.rollback()
            if "duplicate key" in str(e).lower():
                logger.debug(f"Duplicate: {artist} - {title}")
                return False
            else:
                logger.error(f"Integrity error: {e}")
                raise e
        except psycopg2.Error as e:
            self.conn.rollback()
            logger.error(f"Database error adding song: {e}")
            return False
    
    def _calculate_lyrics_quality(self, lyrics: str) -> float:
        """–ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏"""
        if not lyrics:
            return 0.0
        
        score = 0.0
        words = lyrics.split()
        
        # –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        if len(words) > 50:
            score += 0.3
        if len(words) > 100:
            score += 0.2
        
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Å–ª–æ–≤
        unique_words = len(set(word.lower() for word in words))
        if len(words) > 0:
            diversity = unique_words / len(words)
            score += diversity * 0.3
        
        # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤
        instrumental_markers = ["instrumental", "no lyrics", "–±–µ–∑ —Å–ª–æ–≤"]
        if not any(marker in lyrics.lower() for marker in instrumental_markers):
            score += 0.2
        
        return min(score, 1.0)
    
    def song_exists(self, url: str = None, genius_id: int = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏"""
        try:
            if url:
                self.cursor.execute("SELECT 1 FROM tracks WHERE url = %s", (url,))
            elif genius_id:
                self.cursor.execute("SELECT 1 FROM tracks WHERE genius_id = %s", (genius_id,))
            else:
                return False
            return self.cursor.fetchone() is not None
        except psycopg2.Error as e:
            logger.error(f"Error checking song existence: {e}")
            return False
    
    def get_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.cursor.execute("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(DISTINCT artist) as artists,
                    AVG(word_count) as avg_words,
                    AVG(lyrics_quality_score) as avg_quality,
                    COUNT(CASE WHEN genre IS NOT NULL THEN 1 END) as with_genre
                FROM tracks
            """)
            result = self.cursor.fetchone()
            return {
                "total_songs": result["total"],
                "unique_artists": result["artists"],
                "avg_words": round(result["avg_words"] or 0, 1),
                "avg_quality": round(result["avg_quality"] or 0, 3),
                "with_metadata": result["with_genre"]
            }
        except psycopg2.Error as e:
            logger.error(f"Error getting stats: {e}")
            return {"total_songs": 0, "unique_artists": 0, "avg_words": 0, "avg_quality": 0, "with_metadata": 0}
    
    def get_recent_songs(self, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω"""
        try:
            self.cursor.execute("""
                SELECT artist, title, word_count, lyrics_quality_score, genre, scraped_date 
                FROM tracks 
                ORDER BY id DESC 
                LIMIT %s
            """, (limit,))
            return [dict(row) for row in self.cursor.fetchall()]
        except psycopg2.Error as e:
            logger.error(f"Error getting recent songs: {e}")
            return []
    
    def get_artist_count(self, artist: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Å–µ–Ω –∞—Ä—Ç–∏—Å—Ç–∞"""
        try:
            self.cursor.execute("SELECT COUNT(*) as count FROM tracks WHERE artist = %s", (artist,))
            result = self.cursor.fetchone()
            return result["count"]
        except psycopg2.Error as e:
            logger.error(f"Error getting artist count: {e}")
            return 0
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.cursor:
                self.cursor.close()
            if self.conn:
                self.conn.close()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ")
        except psycopg2.Error as e:
            logger.error(f"Error closing connection: {e}")

def test_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    try:
        db = PostgreSQLManager()
        stats = db.get_stats()
        print(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        db.close()
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    test_connection()
