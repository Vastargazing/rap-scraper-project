#!/usr/bin/env python3
"""
üîé –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è Spotify

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ Spotify enhancement
- –ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏ —Ç—Ä–µ–∫–æ–≤

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
from src.enhancers.spotify_analysis_utils import SpotifyEnhancementAnalyzer

–ó–ê–í–ò–°–ò–ú–û–°–¢–ò:
- Python 3.8+
- sqlite3
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ Spotify enhancement
- –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã

–ê–í–¢–û–†: AI Assistant
–î–ê–¢–ê: –°–µ–Ω—Ç—è–±—Ä—å 2025
"""
import sqlite3
import json
from datetime import datetime
from typing import Dict, List, Any

class SpotifyEnhancementAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è Spotify"""
    
    def __init__(self, db_path: str = "data/rap_lyrics.db"):
        self.db_path = db_path
    
    def get_detailed_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        
        stats = {}
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats['total_songs'] = conn.execute("SELECT COUNT(*) FROM songs").fetchone()[0]
        stats['spotify_tracks'] = conn.execute("SELECT COUNT(*) FROM spotify_tracks").fetchone()[0]
        stats['spotify_artists'] = conn.execute("SELECT COUNT(*) FROM spotify_artists").fetchone()[0]
        
        # –¢–æ–ø –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
        cursor = conn.execute("""
            SELECT s.artist, COUNT(*) as tracks_count
            FROM songs s
            LEFT JOIN spotify_tracks st ON s.id = st.song_id
            WHERE st.song_id IS NULL
            GROUP BY s.artist
            ORDER BY tracks_count DESC
            LIMIT 10
        """)
        stats['top_unprocessed_artists'] = cursor.fetchall()
        
        # –¢–æ–ø –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤
        cursor = conn.execute("""
            SELECT s.artist, COUNT(*) as processed_tracks
            FROM songs s
            INNER JOIN spotify_tracks st ON s.id = st.song_id
            GROUP BY s.artist
            ORDER BY processed_tracks DESC
            LIMIT 10
        """)
        stats['top_processed_artists'] = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        cursor = conn.execute("""
            SELECT 
                AVG(popularity) as avg_popularity,
                MIN(popularity) as min_popularity,
                MAX(popularity) as max_popularity
            FROM spotify_tracks
            WHERE popularity > 0
        """)
        popularity_stats = cursor.fetchone()
        if popularity_stats[0]:
            stats['popularity'] = {
                'avg': round(popularity_stats[0], 2),
                'min': popularity_stats[1],
                'max': popularity_stats[2]
            }
        
        # –¢—Ä–µ–∫–∏ —Å —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å—é
        cursor = conn.execute("""
            SELECT s.title, s.artist, st.popularity
            FROM songs s
            INNER JOIN spotify_tracks st ON s.id = st.song_id
            ORDER BY st.popularity DESC
            LIMIT 10
        """)
        stats['most_popular_tracks'] = cursor.fetchall()
        
        conn.close()
        return stats
    
    def find_problematic_tracks(self) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º–∞—Ç–∏—á–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        conn = sqlite3.connect(self.db_path)
        
        # –¢—Ä–µ–∫–∏ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        cursor = conn.execute("""
            SELECT s.id, s.title, s.artist, LENGTH(s.title) as title_length
            FROM songs s
            LEFT JOIN spotify_tracks st ON s.id = st.song_id
            WHERE st.song_id IS NULL AND LENGTH(s.title) > 50
            ORDER BY title_length DESC
            LIMIT 20
        """)
        long_titles = cursor.fetchall()
        
        # –¢—Ä–µ–∫–∏ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        cursor = conn.execute("""
            SELECT s.id, s.title, s.artist
            FROM songs s
            LEFT JOIN spotify_tracks st ON s.id = st.song_id
            WHERE st.song_id IS NULL 
            AND (s.title LIKE '%[%' OR s.title LIKE '%(%' 
                 OR s.title LIKE '%*%' OR s.title LIKE '%feat%'
                 OR s.title LIKE '%ft.%' OR s.title LIKE '%demo%'
                 OR s.title LIKE '%remix%' OR s.title LIKE '%version%')
            LIMIT 20
        """)
        special_chars = cursor.fetchall()
        
        conn.close()
        
        return {
            'long_titles': long_titles,
            'special_characters': special_chars
        }
    
    def get_artist_coverage_report(self) -> Dict[str, Any]:
        """–û—Ç—á–µ—Ç –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é –∞—Ä—Ç–∏—Å—Ç–æ–≤"""
        conn = sqlite3.connect(self.db_path)
        
        # –ê—Ä—Ç–∏—Å—Ç—ã —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        cursor = conn.execute("""
            SELECT 
                s.artist,
                COUNT(*) as total_tracks,
                COUNT(st.song_id) as processed_tracks,
                ROUND(COUNT(st.song_id) * 100.0 / COUNT(*), 2) as coverage_percent
            FROM songs s
            LEFT JOIN spotify_tracks st ON s.id = st.song_id
            GROUP BY s.artist
            HAVING total_tracks >= 5
            ORDER BY coverage_percent ASC, total_tracks DESC
        """)
        
        coverage_data = cursor.fetchall()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage_groups = {
            'no_coverage': [],      # 0%
            'low_coverage': [],     # 1-25%
            'medium_coverage': [],  # 26-75%
            'high_coverage': [],    # 76-99%
            'full_coverage': []     # 100%
        }
        
        for artist, total, processed, percent in coverage_data:
            if percent == 0:
                coverage_groups['no_coverage'].append((artist, total, processed, percent))
            elif percent <= 25:
                coverage_groups['low_coverage'].append((artist, total, processed, percent))
            elif percent <= 75:
                coverage_groups['medium_coverage'].append((artist, total, processed, percent))
            elif percent < 100:
                coverage_groups['high_coverage'].append((artist, total, processed, percent))
            else:
                coverage_groups['full_coverage'].append((artist, total, processed, percent))
        
        conn.close()
        return coverage_groups
    
    def suggest_optimization_targets(self) -> Dict[str, List]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        conn = sqlite3.connect(self.db_path)
        
        suggestions = {}
        
        # –ê—Ä—Ç–∏—Å—Ç—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        cursor = conn.execute("""
            SELECT s.artist, COUNT(*) as unprocessed_count
            FROM songs s
            LEFT JOIN spotify_tracks st ON s.id = st.song_id
            WHERE st.song_id IS NULL
            GROUP BY s.artist
            HAVING unprocessed_count >= 10
            ORDER BY unprocessed_count DESC
            LIMIT 15
        """)
        suggestions['high_volume_artists'] = cursor.fetchall()
        
        # –¢—Ä–µ–∫–∏ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ (–ª–µ–≥—á–µ –Ω–∞–π—Ç–∏)
        cursor = conn.execute("""
            SELECT s.id, s.title, s.artist
            FROM songs s
            LEFT JOIN spotify_tracks st ON s.id = st.song_id
            WHERE st.song_id IS NULL 
            AND LENGTH(s.title) < 30
            AND s.title NOT LIKE '%[%'
            AND s.title NOT LIKE '%(%'
            AND s.title NOT LIKE '%*%'
            AND s.title NOT LIKE '%feat%'
            AND s.title NOT LIKE '%ft.%'
            AND s.title NOT LIKE '%demo%'
            AND s.title NOT LIKE '%remix%'
            ORDER BY RANDOM()
            LIMIT 100
        """)
        suggestions['easy_targets'] = cursor.fetchall()
        
        conn.close()
        return suggestions
    
    def export_analysis_report(self, filename: str = None):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        if not filename:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"spotify_analysis_report_{timestamp}.json"
        
        report = {
            'timestamp': datetime.now().isoformat(),
            'detailed_stats': self.get_detailed_stats(),
            'problematic_tracks': self.find_problematic_tracks(),
            'artist_coverage': self.get_artist_coverage_report(),
            'optimization_targets': self.suggest_optimization_targets()
        }
        
        # Ensure report goes to results/ directory
        if not filename.startswith('results/'):
            filename = f"results/{filename}"
            
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename


def main():
    """CLI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    analyzer = SpotifyEnhancementAnalyzer()
    
    print("üîç –ê–ù–ê–õ–ò–ó–ê–¢–û–† SPOTIFY ENHANCEMENT")
    print("=" * 50)
    
    print("\n1. üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    stats = analyzer.get_detailed_stats()
    
    print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {stats['total_songs']:,}")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–µ–∫–æ–≤: {stats['spotify_tracks']:,}")
    print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {stats['spotify_artists']:,}")
    
    if stats['spotify_tracks'] > 0:
        coverage = stats['spotify_tracks'] / stats['total_songs'] * 100
        print(f"   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–∫–æ–≤: {coverage:.1f}%")
    
    if 'popularity' in stats:
        print(f"üìä –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–æ–≤:")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {stats['popularity']['avg']}")
        print(f"   ‚Ä¢ –ú–∏–Ω-–ú–∞–∫—Å: {stats['popularity']['min']}-{stats['popularity']['max']}")
    
    print(f"\nüé§ –¢–æ–ø –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤:")
    for artist, count in stats['top_unprocessed_artists'][:5]:
        print(f"   ‚Ä¢ {artist}: {count} —Ç—Ä–µ–∫–æ–≤")
    
    print(f"\n‚úÖ –¢–æ–ø –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏—Å—Ç–æ–≤:")
    for artist, count in stats['top_processed_artists'][:5]:
        print(f"   ‚Ä¢ {artist}: {count} —Ç—Ä–µ–∫–æ–≤")
    
    print("\n2. üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    suggestions = analyzer.suggest_optimization_targets()
    
    print(f"üî• –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∞—Ä—Ç–∏—Å—Ç—ã (–º–Ω–æ–≥–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤):")
    for artist, count in suggestions['high_volume_artists'][:5]:
        print(f"   ‚Ä¢ {artist}: {count} —Ç—Ä–µ–∫–æ–≤")
    
    print(f"\nüéØ –õ–µ–≥–∫–∏–µ —Ü–µ–ª–∏ (–ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è): {len(suggestions['easy_targets'])} —Ç—Ä–µ–∫–æ–≤")
    
    print("\n3. üîç –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è")
    coverage = analyzer.get_artist_coverage_report()
    
    print(f"üìä –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ –∞—Ä—Ç–∏—Å—Ç–∞–º:")
    print(f"   ‚Ä¢ –ë–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è (0%): {len(coverage['no_coverage'])} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
    print(f"   ‚Ä¢ –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (1-25%): {len(coverage['low_coverage'])} –∞—Ä—Ç–∏—Å—Ç–æ–≤")  
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (26-75%): {len(coverage['medium_coverage'])} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
    print(f"   ‚Ä¢ –í—ã—Å–æ–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (76-99%): {len(coverage['high_coverage'])} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
    print(f"   ‚Ä¢ –ü–æ–ª–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ (100%): {len(coverage['full_coverage'])} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    choice = input("\nüìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç? (y/N): ").strip().lower()
    if choice == 'y':
        filename = analyzer.export_analysis_report()
        print(f"‚úÖ –û—Ç—á–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {filename}")


if __name__ == "__main__":
    main()
