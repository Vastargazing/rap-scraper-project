#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–µ benchmark —Ç–µ—Å—Ç—ã –¥–ª—è CI/CD

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
- –ë—ã—Å—Ç—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GitHub Actions
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å performance_monitor.py

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
pytest tests/benchmarks/test_quick_benchmarks.py --benchmark-only
pytest tests/benchmarks/test_quick_benchmarks.py --benchmark-save=baseline
pytest tests/benchmarks/test_quick_benchmarks.py --benchmark-compare

–ê–í–¢–û–†: RapAnalyst AI Assistant
–î–ê–¢–ê: 19.09.2025
"""

import sys
from pathlib import Path

import pytest

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ Python path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

try:
    from core.app import Application
except ImportError:
    # Fallback –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    Application = None


class TestQuickBenchmarks:
    """–ë—ã—Å—Ç—Ä—ã–µ benchmark —Ç–µ—Å—Ç—ã –¥–ª—è CI/CD"""

    @pytest.mark.quick
    @pytest.mark.benchmark(group="quick")
    def test_algorithmic_analyzer_quick(self, benchmark, rap_app, quick_test_texts):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        if not rap_app:
            pytest.skip("Application not available")

        analyzer = rap_app.get_analyzer("advanced_algorithmic")
        if not analyzer:
            pytest.skip("advanced_algorithmic analyzer not available")

        text = quick_test_texts[0]  # –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç

        def run_analysis():
            if hasattr(analyzer, "analyze_song"):
                return analyzer.analyze_song("Test", "Quick", text)
            # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
            return analyzer.analyze(text) if hasattr(analyzer, "analyze") else None

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        benchmark.extra_info["analyzer"] = "advanced_algorithmic"
        benchmark.extra_info["text_length"] = len(text)
        benchmark.extra_info["test_type"] = "quick_ci"

        result = benchmark(run_analysis)
        assert result is not None

    @pytest.mark.quick
    @pytest.mark.benchmark(group="quick")
    def test_emotion_analyzer_quick(self, benchmark, rap_app, quick_test_texts):
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç emotion –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        if not rap_app:
            pytest.skip("Application not available")

        analyzer = rap_app.get_analyzer("emotion_analyzer")
        if not analyzer:
            pytest.skip("emotion_analyzer not available")

        text = quick_test_texts[1]

        def run_analysis():
            if hasattr(analyzer, "analyze_song"):
                return analyzer.analyze_song("Test", "Emotion", text)
            return analyzer.analyze(text) if hasattr(analyzer, "analyze") else None

        benchmark.extra_info["analyzer"] = "emotion_analyzer"
        benchmark.extra_info["text_length"] = len(text)
        benchmark.extra_info["test_type"] = "quick_ci"

        result = benchmark(run_analysis)
        assert result is not None

    @pytest.mark.benchmark(group="comparison")
    def test_analyzer_comparison_advanced_algorithmic(
        self, benchmark, rap_app, quick_test_texts
    ):
        """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ advanced_algorithmic –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        if not rap_app:
            pytest.skip("Application not available")

        analyzer = rap_app.get_analyzer("advanced_algorithmic")
        if not analyzer:
            pytest.skip("advanced_algorithmic not available")

        text = quick_test_texts[0]  # –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        def run_analysis():
            if hasattr(analyzer, "analyze_song"):
                return analyzer.analyze_song("Test", "Compare", text)
            return analyzer.analyze(text) if hasattr(analyzer, "analyze") else None

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        benchmark.extra_info["analyzer"] = "advanced_algorithmic"
        benchmark.extra_info["text_length"] = len(text)
        benchmark.extra_info["test_type"] = "comparison"

        result = benchmark(run_analysis)
        assert result is not None

    @pytest.mark.benchmark(group="comparison")
    def test_analyzer_comparison_emotion(self, benchmark, rap_app, quick_test_texts):
        """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ emotion_analyzer –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        if not rap_app:
            pytest.skip("Application not available")

        analyzer = rap_app.get_analyzer("emotion_analyzer")
        if not analyzer:
            pytest.skip("emotion_analyzer not available")

        text = quick_test_texts[0]  # –û–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        def run_analysis():
            if hasattr(analyzer, "analyze_song"):
                return analyzer.analyze_song("Test", "Compare", text)
            return analyzer.analyze(text) if hasattr(analyzer, "analyze") else None

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        benchmark.extra_info["analyzer"] = "emotion_analyzer"
        benchmark.extra_info["text_length"] = len(text)
        benchmark.extra_info["test_type"] = "comparison"

        result = benchmark(run_analysis)
        assert result is not None

    @pytest.mark.benchmark(group="stress")
    def test_batch_processing_mini(self, benchmark, rap_app, quick_test_texts):
        """–ú–∏–Ω–∏-—Ç–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not rap_app:
            pytest.skip("Application not available")

        analyzer = rap_app.get_analyzer("advanced_algorithmic")
        if not analyzer:
            pytest.skip("advanced_algorithmic not available")

        def batch_analysis():
            results = []
            for i, text in enumerate(quick_test_texts):  # –¢–æ–ª—å–∫–æ 3 —Ç–µ–∫—Å—Ç–∞
                if hasattr(analyzer, "analyze_song"):
                    result = analyzer.analyze_song("Test", f"Batch_{i}", text)
                else:
                    result = (
                        analyzer.analyze(text) if hasattr(analyzer, "analyze") else None
                    )
                results.append(result)
            return results

        benchmark.extra_info["analyzer"] = "advanced_algorithmic"
        benchmark.extra_info["batch_size"] = len(quick_test_texts)
        benchmark.extra_info["test_type"] = "mini_batch"

        results = benchmark(batch_analysis)
        assert len(results) == len(quick_test_texts)
        assert all(r is not None for r in results)


class TestMemoryBenchmarks:
    """–¢–µ—Å—Ç—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""

    @pytest.mark.benchmark(group="memory")
    def test_memory_efficiency(self, enhanced_benchmark, rap_app, quick_test_texts):
        """–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏"""
        if not rap_app:
            pytest.skip("Application not available")

        analyzer = rap_app.get_analyzer("advanced_algorithmic")
        if not analyzer:
            pytest.skip("advanced_algorithmic not available")

        def memory_test():
            results = []
            for i in range(5):  # 5 –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏
                text = quick_test_texts[i % len(quick_test_texts)]
                if hasattr(analyzer, "analyze_song"):
                    result = analyzer.analyze_song("Test", f"Memory_{i}", text)
                else:
                    result = (
                        analyzer.analyze(text) if hasattr(analyzer, "analyze") else None
                    )
                results.append(result)
            return results

        results = enhanced_benchmark(memory_test)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ —Ä–∞–∑—É–º–Ω—ã–π
        memory_growth = enhanced_benchmark.extra_info.get("memory_growth_mb", 0)
        assert memory_growth < 50  # –ú–µ–Ω–µ–µ 50MB —Ä–æ—Å—Ç–∞
        assert len(results) == 5


# === –¢–ï–°–¢ –ù–ê –î–û–°–¢–£–ü–ù–û–°–¢–¨ ===


def test_benchmark_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ benchmark —Å—Ä–µ–¥–∞ –≥–æ—Ç–æ–≤–∞"""
    try:
        import pytest_benchmark

        assert pytest_benchmark is not None
    except ImportError:
        pytest.skip("pytest-benchmark not installed")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ src –¥–æ—Å—Ç—É–ø–µ–Ω
    src_path = Path(__file__).parent.parent.parent / "src"
    assert src_path.exists(), f"src directory not found: {src_path}"
