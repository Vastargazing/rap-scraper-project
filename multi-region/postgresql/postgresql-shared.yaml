apiVersion: v1
kind: Secret
metadata:
  name: postgresql-secret
  namespace: rap-analyzer
type: Opaque
data:
  # PostgreSQL main password (base64 encoded)
  # Password: rap-analyzer-prod-pass (change for production!)
  password: cmFwLWFuYWx5emVyLXByb2QtcGFzcw==
  
  # Replication user password (base64 encoded)  
  # Password: repl-secure-pass-123 (change for production!)
  replication-password: cmVwbC1zZWN1cmUtcGFzcy0xMjM=
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-backup-pvc
  namespace: rap-analyzer
  labels:
    app: postgresql
    component: backup
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  storageClassName: nfs-storage
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgresql-backup
  namespace: rap-analyzer
  labels:
    app: postgresql
    component: backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: ankane/pgvector:v0.5.1
            command:
            - /bin/bash
            - -c
            - |
              set -e
              
              # Backup configuration
              BACKUP_DIR="/backup/dumps"
              DATE=$(date +%Y%m%d_%H%M%S)
              BACKUP_FILE="rap_lyrics_backup_${DATE}.sql.gz"
              
              echo "Starting PostgreSQL backup: $BACKUP_FILE"
              
              # Create backup directory
              mkdir -p "$BACKUP_DIR"
              
              # Create database dump
              export PGPASSWORD="$POSTGRES_PASSWORD"
              pg_dump -h postgresql-primary \
                -U "$POSTGRES_USER" \
                -d "$POSTGRES_DB" \
                --verbose \
                --no-owner \
                --no-privileges \
                --format=custom | gzip > "$BACKUP_DIR/$BACKUP_FILE"
              
              # Verify backup
              if [ -f "$BACKUP_DIR/$BACKUP_FILE" ] && [ -s "$BACKUP_DIR/$BACKUP_FILE" ]; then
                echo "Backup completed successfully: $BACKUP_FILE"
                echo "Backup size: $(du -h $BACKUP_DIR/$BACKUP_FILE | cut -f1)"
              else
                echo "ERROR: Backup failed or file is empty"
                exit 1
              fi
              
              # Cleanup old backups (keep last 7 days)
              find "$BACKUP_DIR" -name "rap_lyrics_backup_*.sql.gz" -mtime +7 -delete
              
              echo "Backup job completed"
            env:
            - name: POSTGRES_DB
              value: "rap_lyrics"
            - name: POSTGRES_USER
              value: "rap_analyzer"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: password
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgresql-backup-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql-service
  namespace: rap-analyzer
  labels:
    app: postgresql
    component: loadbalancer
spec:
  type: ClusterIP
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: postgresql
  selector:
    app: postgresql
    role: primary
---
# PostgreSQL monitoring service for Prometheus
apiVersion: v1
kind: Service
metadata:
  name: postgresql-metrics
  namespace: rap-analyzer
  labels:
    app: postgresql
    component: metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
spec:
  type: ClusterIP
  ports:
  - port: 9187
    targetPort: 9187
    protocol: TCP
    name: metrics
  selector:
    app: postgresql-exporter
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql-exporter
  namespace: rap-analyzer
  labels:
    app: postgresql-exporter
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql-exporter
  template:
    metadata:
      labels:
        app: postgresql-exporter
    spec:
      containers:
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:v0.11.1
        ports:
        - containerPort: 9187
          name: metrics
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://rap_analyzer:$(POSTGRES_PASSWORD)@postgresql-service:5432/rap_lyrics?sslmode=disable"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql-secret
              key: password
        - name: PG_EXPORTER_EXTEND_QUERY_PATH
          value: "/etc/postgres_exporter/queries.yaml"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: queries-config
          mountPath: /etc/postgres_exporter
      volumes:
      - name: queries-config
        configMap:
          name: postgresql-exporter-queries
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-exporter-queries
  namespace: rap-analyzer
  labels:
    app: postgresql-exporter
data:
  queries.yaml: |
    # Custom PostgreSQL metrics for rap analyzer
    rap_analyzer_tracks:
      query: "SELECT COUNT(*) as tracks_total FROM tracks"
      metrics:
        - tracks_total:
            usage: "GAUGE"
            description: "Total number of tracks in database"
    
    rap_analyzer_analyses:
      query: "SELECT analyzer_type, COUNT(*) as count FROM analysis_results GROUP BY analyzer_type"
      metrics:
        - count:
            usage: "GAUGE"
            description: "Number of analyses by type"
            labels:
              - "analyzer_type"
    
    rap_analyzer_recent_analyses:
      query: "SELECT COUNT(*) as recent_analyses FROM analysis_results WHERE created_at > NOW() - INTERVAL '1 hour'"
      metrics:
        - recent_analyses:
            usage: "GAUGE"
            description: "Number of analyses in the last hour"