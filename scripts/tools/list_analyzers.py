#!/usr/bin/env python3
"""
üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / 'src'))

def list_available_analyzers():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤"""
    
    print("ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
        from interfaces.analyzer_interface import AnalyzerFactory
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            import analyzers.qwen_analyzer
            import analyzers.gemma_analyzer
            import analyzers.ollama_analyzer
            import analyzers.algorithmic_analyzer
            import analyzers.hybrid_analyzer
        except ImportError as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã
        available_analyzers = AnalyzerFactory.list_available()
        
        if not available_analyzers:
            print("‚ùå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        for i, analyzer_name in enumerate(available_analyzers, 1):
            print(f"{i}. üìä {analyzer_name}")
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                analyzer = AnalyzerFactory.create(analyzer_name)
                info = analyzer.get_analyzer_info()
                
                print(f"   üîß –¢–∏–ø: {info.get('type', 'Unknown')}")
                print(f"   üìù –û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description', 'No description')}")
                print(f"   ‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω: {'–î–∞' if getattr(analyzer, 'available', True) else '–ù–µ—Ç'}")
                
                if hasattr(analyzer, 'model_name'):
                    print(f"   üß† –ú–æ–¥–µ–ª—å: {analyzer.model_name}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            
            print()
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–±—Ä–∏–∫–∏: {e}")
        return
    
    print("\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("   python scripts/analyze_with_model.py --model <–Ω–∞–∑–≤–∞–Ω–∏–µ>")

def test_specific_analyzers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤:")
    print("=" * 50)
    
    test_analyzers = ['qwen', 'gemma', 'ollama', 'algorithmic_basic']
    
    for analyzer_name in test_analyzers:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {analyzer_name}:")
        
        try:
            from interfaces.analyzer_interface import AnalyzerFactory
            
            if analyzer_name in AnalyzerFactory.list_available():
                analyzer = AnalyzerFactory.create(analyzer_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                if hasattr(analyzer, 'available'):
                    status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω" if analyzer.available else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                else:
                    status = "‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è)"
                
                print(f"   –°—Ç–∞—Ç—É—Å: {status}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if hasattr(analyzer, 'model_name'):
                    print(f"   –ú–æ–¥–µ–ª—å: {analyzer.model_name}")
                
                if hasattr(analyzer, 'api_url'):
                    print(f"   API: {analyzer.api_url}")
                
            else:
                print(f"   ‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    list_available_analyzers()
    test_specific_analyzers()
