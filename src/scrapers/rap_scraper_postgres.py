#!/usr/bin/env python3
"""
üé§ –ú–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–∞–ø–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤ –ø–µ—Å–µ–Ω –≤ PostgreSQL (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

–ö–õ–Æ–ß–ï–í–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
‚ú® –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π PostgreSQL —á–µ—Ä–µ–∑ asyncpg –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚ö° –ë–∞—Ç—á–µ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ)
üõ°Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å circuit breaker pattern
üîÑ Retry logic —Å exponential backoff
üìä –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é —Å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
üåê Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
üéØ Connection pooling –¥–ª—è PostgreSQL
"""

import lyricsgenius
from requests.exceptions import ProxyError, RequestException
import asyncio
import time
import random
import logging
import re
import signal
import sys
from datetime import datetime, timedelta
import json
import os
import gc
import psutil
from typing import List, Optional, Dict, Generator, Tuple, Any
from dataclasses import dataclass, field
from enum import Enum
import asyncpg
from concurrent.futures import ThreadPoolExecutor
import hashlib
from pathlib import Path
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
try:
    from ..utils.config import GENIUS_TOKEN, LOG_FORMAT, LOG_FILE, DATA_DIR
    from ..utils.postgres_db import PostgreSQLManager
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é),
    # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env –≤—Ä—É—á–Ω—É—é –∏ —á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º.
    try:
        project_root = Path(__file__).resolve().parent.parent.parent
        load_dotenv(project_root / ".env")
    except Exception:
        pass

    # –û—Å–Ω–æ–≤–Ω–æ–µ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ .env: GENIUS_ACCESS_TOKEN
    GENIUS_TOKEN = os.getenv('GENIUS_ACCESS_TOKEN') or os.getenv('GENIUS_TOKEN')
    LOG_FORMAT = '%(asctime)s - %(levelname)s - %(message)s'
    LOG_FILE = 'scraper.log'
    DATA_DIR = 'data'
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PostgreSQLManager –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –º–æ–¥—É–ª—è utils
    try:
        import importlib, sys
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        project_root_str = str(project_root)
        if project_root_str not in sys.path:
            sys.path.append(project_root_str)

        postgres_mod = importlib.import_module('src.utils.postgres_db')
        PostgreSQLManager = getattr(postgres_mod, 'PostgreSQLManager')
    except Exception:
        logger = logging.getLogger(__name__)
        logger.warning('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å src.utils.postgres_db ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É PostgreSQLManager')

        # –õ—ë–≥–∫–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –º–æ–≥ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
        class PostgreSQLManager:
            def __init__(self, *args, **kwargs):
                logger.info('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ PostgreSQLManager ‚Äî –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –±—É–¥—É—Ç —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω—ã')

            async def batch_add_songs(self, songs_batch):
                # —ç–º—É–ª–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                return len(songs_batch)

            def add_song(self, *args, **kwargs):
                return True

            def song_exists(self, url: str = None, genius_id: int = None) -> bool:
                return False

            def get_stats(self):
                return {"total_songs": 0, "unique_artists": 0, "avg_words": 0, "avg_quality": 0, "with_metadata": 0}

            def close(self):
                return

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format=LOG_FORMAT,
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ScrapingStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Å–µ–Ω"""
    SUCCESS = "success"
    SKIPPED_DUPLICATE = "skipped_duplicate"
    SKIPPED_QUALITY = "skipped_quality"
    ERROR_NETWORK = "error_network"
    ERROR_API_LIMIT = "error_api_limit"
    ERROR_PARSING = "error_parsing"
    ERROR_UNKNOWN = "error_unknown"

@dataclass
class SessionMetrics:
    """–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
    processed: int = 0
    added: int = 0
    skipped_duplicates: int = 0
    skipped_quality: int = 0
    error_network: int = 0
    error_api_limit: int = 0
    error_parsing: int = 0
    error_unknown: int = 0
    memory_warnings: int = 0
    gc_runs: int = 0
    api_calls: int = 0
    cache_hits: int = 0
    avg_processing_time: float = 0.0
    batch_saves: int = 0
    start_time: datetime = field(default_factory=datetime.now)
    
    def increment(self, status: ScrapingStatus, processing_time: float = 0.0):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        self.processed += 1
        if processing_time > 0:
            self.avg_processing_time = (
                (self.avg_processing_time * (self.processed - 1) + processing_time) 
                / self.processed
            )
            
        if status == ScrapingStatus.SUCCESS:
            self.added += 1
        elif status == ScrapingStatus.SKIPPED_DUPLICATE:
            self.skipped_duplicates += 1
        elif status == ScrapingStatus.SKIPPED_QUALITY:
            self.skipped_quality += 1
        elif status == ScrapingStatus.ERROR_NETWORK:
            self.error_network += 1
        elif status == ScrapingStatus.ERROR_API_LIMIT:
            self.error_api_limit += 1
        elif status == ScrapingStatus.ERROR_PARSING:
            self.error_parsing += 1
        elif status == ScrapingStatus.ERROR_UNKNOWN:
            self.error_unknown += 1
    
    @property
    def total_errors(self) -> int:
        return (self.error_network + self.error_api_limit + 
                self.error_parsing + self.error_unknown)
    
    @property
    def success_rate(self) -> float:
        return (self.added / self.processed * 100) if self.processed > 0 else 0.0
    
    @property
    def runtime(self) -> timedelta:
        return datetime.now() - self.start_time

class CircuitBreaker:
    """Circuit breaker –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤"""
    
    def __init__(self, failure_threshold: int = 5, recovery_timeout: int = 60):
        self.failure_threshold = failure_threshold
        self.recovery_timeout = recovery_timeout
        self.failure_count = 0
        self.last_failure_time = None
        self.state = "closed"  # closed, open, half_open
        
    def call(self, func, *args, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ circuit breaker"""
        if self.state == "open":
            if (datetime.now() - self.last_failure_time).seconds > self.recovery_timeout:
                self.state = "half_open"
                logger.info("üîÑ Circuit breaker: –ø–µ—Ä–µ—Ö–æ–¥ –≤ half-open —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
            else:
                raise Exception("Circuit breaker is OPEN - API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        try:
            result = func(*args, **kwargs)
            if self.state == "half_open":
                self.reset()
            return result
        except Exception as e:
            self.record_failure()
            raise e
    
    def record_failure(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏"""
        self.failure_count += 1
        self.last_failure_time = datetime.now()
        
        if self.failure_count >= self.failure_threshold:
            self.state = "open"
            logger.warning(f"üö® Circuit breaker –û–¢–ö–†–´–¢ –ø–æ—Å–ª–µ {self.failure_count} –æ—à–∏–±–æ–∫")
    
    def reset(self):
        """–°–±—Ä–æ—Å circuit breaker"""
        self.failure_count = 0
        self.last_failure_time = None
        self.state = "closed"
        logger.info("‚úÖ Circuit breaker —Å–±—Ä–æ—à–µ–Ω")

class EnhancedResourceMonitor:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    
    def __init__(self, memory_limit_mb: int = 2048):
        self.process = psutil.Process()
        self.memory_limit_mb = memory_limit_mb
        self.start_memory = self.get_memory_usage()
        self.memory_history = []
        self.max_history = 10
        
    def get_memory_usage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –ú–ë"""
        return self.process.memory_info().rss / 1024 / 1024
    
    def get_cpu_usage(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU –≤ %"""
        return self.process.cpu_percent(interval=0.1)
    
    def predict_memory_trend(self) -> str:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        if len(self.memory_history) < 3:
            return "insufficient_data"
        
        recent_avg = sum(self.memory_history[-3:]) / 3
        older_avg = sum(self.memory_history[-6:-3]) / 3 if len(self.memory_history) >= 6 else recent_avg
        
        if recent_avg > older_avg * 1.1:
            return "increasing"
        elif recent_avg < older_avg * 0.9:
            return "decreasing"
        else:
            return "stable"
    
    def check_memory_limit(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        current_memory = self.get_memory_usage()
        self.memory_history.append(current_memory)
        
        if len(self.memory_history) > self.max_history:
            self.memory_history.pop(0)
        
        usage_ratio = current_memory / self.memory_limit_mb
        trend = self.predict_memory_trend()
        
        if usage_ratio > 0.95:
            return True, "critical"
        elif usage_ratio > 0.85 and trend == "increasing":
            return True, "warning_trending"
        elif usage_ratio > 0.80:
            return True, "warning"
        else:
            return False, "normal"
    
    def log_resources(self):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        memory_mb = self.get_memory_usage()
        cpu_percent = self.get_cpu_usage()
        trend = self.predict_memory_trend()
        
        logger.info(f"üíæ Memory: {memory_mb:.1f}MB | üñ•Ô∏è CPU: {cpu_percent:.1f}% | üìà Trend: {trend}")
        
        limit_exceeded, status = self.check_memory_limit()
        if limit_exceeded:
            logger.warning(f"‚ö†Ô∏è Memory status: {status} - {memory_mb:.1f}MB/{self.memory_limit_mb}MB")
    
    def force_garbage_collection(self) -> int:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏"""
        before_memory = self.get_memory_usage()
        collected = gc.collect()
        after_memory = self.get_memory_usage()
        freed_mb = before_memory - after_memory
        
        logger.info(f"üóëÔ∏è GC: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_mb:.1f}MB, —Å–æ–±—Ä–∞–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")
        return collected

class BatchProcessor:
    """–ë–∞—Ç—á–µ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è PostgreSQL –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def __init__(self, batch_size: int = 10, flush_interval: float = 30.0):
        self.batch_size = batch_size
        self.flush_interval = flush_interval
        self.pending_songs = []
        self.last_flush = time.time()
        
    def add_song(self, song_data: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤ –±–∞—Ç—á"""
        self.pending_songs.append(song_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        current_time = time.time()
        if (len(self.pending_songs) >= self.batch_size or 
            current_time - self.last_flush > self.flush_interval):
            return True  # –ù—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        return False
    
    def get_pending_batch(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞ –∏ –æ—á–∏—Å—Ç–∫–∞"""
        batch = self.pending_songs.copy()
        self.pending_songs.clear()
        self.last_flush = time.time()
        return batch
    
    def has_pending(self) -> bool:
        """–ï—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ"""
        return len(self.pending_songs) > 0

class OptimizedPostgreSQLScraper:
    """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Å–∫—Ä–∞–ø–µ—Ä —Å PostgreSQL –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self, token: str, memory_limit_mb: int = 2048, batch_size: int = 10):
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self._clear_proxy_env()
        
        # Genius API –∫–ª–∏–µ–Ω—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        self.genius = lyricsgenius.Genius(
            token,
            timeout=45,  # –£–≤–µ–ª–∏—á–∏–ª–∏ timeout
            retries=1,   # –£–±—Ä–∞–ª–∏ retries, –¥–µ–ª–∞–µ–º —Å–≤–æ–π retry logic
            remove_section_headers=True,
            skip_non_songs=True,
            excluded_terms=["(Remix)", "(Live)", "(Instrumental)", "(Skit)", "(Interlude)"]
        )
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.db = PostgreSQLManager()
        self.monitor = EnhancedResourceMonitor(memory_limit_mb)
        self.circuit_breaker = CircuitBreaker(failure_threshold=5, recovery_timeout=120)
        self.batch_processor = BatchProcessor(batch_size=batch_size)
        self.metrics = SessionMetrics()
        
        # –ö—ç—à –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        self.url_cache = set()
        self.artist_cache = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry
        self.base_delay = 2.0
        self.max_delay = 30.0
        self.backoff_multiplier = 1.5
        self.max_retries = 3
        
        # –§–ª–∞–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.shutdown_requested = False
        self.pause_requested = False
        
        # Thread pool –¥–ª—è CPU-intensive –æ–ø–µ—Ä–∞—Ü–∏–π
        self.executor = ThreadPoolExecutor(max_workers=2)
        
        self.cleared_proxies = {}
        self._setup_signal_handlers()
        
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô PostgreSQL —Å–∫—Ä–∞–ø–µ—Ä")
        logger.info(f"‚öôÔ∏è Batch size: {batch_size}, Memory limit: {memory_limit_mb}MB")
        
    def _clear_proxy_env(self):
        """–£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        proxy_vars = [
            'HTTP_PROXY', 'HTTPS_PROXY', 'http_proxy', 'https_proxy',
            'FTP_PROXY', 'ftp_proxy', 'ALL_PROXY', 'all_proxy',
            'NO_PROXY', 'no_proxy'
        ]
        
        self.cleared_proxies = {}
        for var in proxy_vars:
            if var in os.environ:
                self.cleared_proxies[var] = os.environ.pop(var)
                
    def _restore_proxy_env(self):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        for var, value in self.cleared_proxies.items():
            os.environ[var] = value
        
    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        def signal_handler(signum, frame):
            logger.info(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. Graceful shutdown...")
            self.shutdown_requested = True
            
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        if sys.platform == "win32":
            try:
                signal.signal(signal.SIGBREAK, signal_handler)
            except AttributeError:
                pass

    async def safe_delay(self, is_error: bool = False, retry_count: int = 0):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–∞—É–∑–∞ —Å exponential backoff"""
        if is_error:
            # Exponential backoff –¥–ª—è –æ—à–∏–±–æ–∫
            delay = min(
                self.base_delay * (self.backoff_multiplier ** retry_count),
                self.max_delay
            )
        else:
            delay = random.uniform(self.base_delay, self.base_delay + 2)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ shutdown
        intervals = int(delay)
        remainder = delay - intervals
        
        for _ in range(intervals):
            if self.shutdown_requested:
                return
            await asyncio.sleep(1)
                
        if remainder > 0 and not self.shutdown_requested:
            await asyncio.sleep(remainder)

    def clean_lyrics(self, lyrics: str) -> str:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏"""
        if not lyrics:
            return ""
        
        # –ü—Ä–µ–¥–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ)
        patterns = [
            (re.compile(r"^\d+\s+Contributors.*?Lyrics", re.MULTILINE | re.DOTALL), ""),
            (re.compile(r"Translations[A-Za-z]+", re.MULTILINE), ""),
            (re.compile(r"Lyrics[A-Z].*?Read More\s*", re.DOTALL), ""),
            (re.compile(r"(?i)(Embed|Submitted by [^\n]*|Written by [^\n]*|You might also like).*$", re.DOTALL), ""),
            (re.compile(r"https?://[^\s]+"), ""),
            (re.compile(r"\[.*?\]"), ""),
            (re.compile(r"\n{3,}"), "\n\n"),
            (re.compile(r"\n{2,}"), "\n"),
        ]
        
        for pattern, replacement in patterns:
            lyrics = pattern.sub(replacement, lyrics)
        
        return lyrics.strip()

    def _is_valid_lyrics(self, lyrics: str) -> tuple[bool, str]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π"""
        if not lyrics:
            return False, "empty"
            
        lyrics = lyrics.strip()
        word_count = len(lyrics.split())
        
        if len(lyrics) < 100:
            return False, "too_short_chars"
        if word_count < 20:
            return False, "too_short_words"
            
        # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        instrumental_markers = [
            "instrumental", "no lyrics", "–±–µ–∑ —Å–ª–æ–≤", "music only", 
            "beat only", "outro", "intro", "skit", "interlude"
        ]
        
        lyrics_lower = lyrics.lower()
        for marker in instrumental_markers:
            if marker in lyrics_lower:
                return False, f"instrumental_marker_{marker}"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç
        unique_lines = set(line.strip() for line in lyrics.split('\n') if line.strip())
        if len(unique_lines) < word_count * 0.3:  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            return False, "too_repetitive"
        
        return True, "valid"

    def generate_song_hash(self, artist: str, title: str, lyrics: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
        content = f"{artist.lower().strip()}|{title.lower().strip()}|{lyrics[:200].lower()}"
        return hashlib.md5(content.encode()).hexdigest()

    def extract_metadata(self, song) -> Dict[str, Any]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        metadata = {}
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            safe_attrs = [
                ('album', ['album', 'name']),
                ('release_date', ['release_date_for_display']),
                ('song_art_url', ['song_art_image_url']),
                ('primary_artist_name', ['primary_artist', 'name']),
                ('featured_artists', ['featured_artists']),
                ('producer_artists', ['producer_artists']),
                ('writer_artists', ['writer_artists']),
                ('language', ['language']),
            ]
            
            for key, attr_path in safe_attrs:
                value = song
                for attr in attr_path:
                    if hasattr(value, attr):
                        value = getattr(value, attr)
                    elif isinstance(value, dict) and attr in value:
                        value = value[attr]
                    else:
                        value = None
                        break
                        
                if value is not None:
                    metadata[key] = str(value) if not isinstance(value, (dict, list)) else value
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if hasattr(song, 'stats') and song.stats:
                stats = song.stats
                if isinstance(stats, dict):
                    metadata['pageviews'] = stats.get('pageviews', 0)
                    metadata['hot'] = stats.get('hot', False)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ (—É–ª—É—á—à–µ–Ω–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
            if 'language' not in metadata and hasattr(song, 'lyrics'):
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
                english_indicators = ['the', 'and', 'you', 'that', 'with', 'for', 'are', 'this']
                russian_indicators = ['—á—Ç–æ', '–∫–∞–∫', '—ç—Ç–æ', '–æ–Ω–∏', '–≤—Å–µ', '—Ç–∞–∫', '–º–Ω–µ', '–µ–≥–æ']
                
                lyrics_lower = song.lyrics.lower() if song.lyrics else ""
                english_count = sum(1 for word in english_indicators if word in lyrics_lower)
                russian_count = sum(1 for word in russian_indicators if word in lyrics_lower)
                
                if russian_count > english_count:
                    metadata['language'] = 'ru'
                else:
                    metadata['language'] = 'en'
                    
        except Exception as e:
            logger.debug(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            
        return metadata

    async def process_song_batch(self, songs_batch: List[dict]) -> int:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –±–∞—Ç—á–µ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL"""
        if not songs_batch:
            return 0
            
        start_time = time.time()
        saved_count = 0
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncpg –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –±–∞—Ç—á–µ–≤–æ–≥–æ INSERT
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ PostgreSQLManager –µ—Å—Ç—å async –º–µ—Ç–æ–¥—ã
            if hasattr(self.db, 'batch_add_songs'):
                saved_count = await self.db.batch_add_songs(songs_batch)
            else:
                # Fallback: –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                for song_data in songs_batch:
                    if self.db.add_song(**song_data):
                        saved_count += 1
            
            processing_time = time.time() - start_time
            self.metrics.batch_saves += 1
            
            logger.info(f"üíæ –ë–∞—Ç—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_count}/{len(songs_batch)} –ø–µ—Å–µ–Ω –∑–∞ {processing_time:.2f}—Å")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞—Ç—á–µ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
        return saved_count

    async def get_songs_async_generator(self, artist_name: str, max_songs: int = 500):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Å–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"üéµ –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞: {artist_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞—Ä—Ç–∏—Å—Ç–∞
            if artist_name in self.artist_cache:
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –¥–ª—è {artist_name}")
                cached_songs = self.artist_cache[artist_name]
                for i, song in enumerate(cached_songs):
                    yield song, i + 1
                return
            
            # –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ circuit breaker
            artist = await asyncio.get_event_loop().run_in_executor(
                self.executor,
                lambda: self.circuit_breaker.call(
                    self.genius.search_artist,
                    artist_name,
                    max_songs=min(max_songs, 50),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
                    sort="popularity",
                    get_full_info=False
                )
            )
            
            self.metrics.api_calls += 1
            
            if not artist or not hasattr(artist, 'tracks) or not artist.songs:
                logger.warning(f"‚ùå –ê—Ä—Ç–∏—Å—Ç {artist_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–µ—Å–µ–Ω")
                return
            
            total_songs = len(artist.songs)
            logger.info(f"üìÄ –ù–∞–π–¥–µ–Ω–æ {total_songs} –ø–µ—Å–µ–Ω –¥–ª—è {artist_name}")
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.artist_cache[artist_name] = artist.tracks[:20]  # –ö—ç—à–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20 –ø–µ—Å–µ–Ω
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –ø–µ—Å–Ω–∏
            logger.info("üéµ –ü–µ—Ä–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏:")
            for i, song in enumerate(artist.tracks[:5], 1):
                logger.info(f"  {i}. {song.title}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Å–Ω–∏
            for i, song in enumerate(artist.songs):
                if self.shutdown_requested:
                    logger.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–µ—Å–Ω–µ {i+1}/{total_songs}")
                    break
                    
                yield song, i + 1
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 10 –ø–µ—Å–µ–Ω
                if i % 10 == 0:
                    limit_exceeded, status = self.monitor.check_memory_limit()
                    if limit_exceeded and status == "critical":
                        logger.warning("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è GC...")
                        self.monitor.force_garbage_collection()
                        self.metrics.gc_runs += 1
                        await asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ GC
                
        except Exception as e:
            error_msg = str(e).lower()
            if "circuit breaker" in error_msg:
                logger.error(f"üö® Circuit breaker –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {artist_name}")
            elif any(keyword in error_msg for keyword in ['timeout', 'connection', 'network']):
                logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {artist_name}: {e}")
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {artist_name}: {e}")
            return

    async def process_single_song(self, song, song_number: int, artist_name: str) -> ScrapingStatus:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–µ—Å–Ω–∏"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –∫—ç—à–∞
            song_url = getattr(song, 'url', f"https://genius.com/songs/{getattr(song, 'id', 'unknown')}")
            if song_url in self.url_cache:
                self.metrics.cache_hits += 1
                return ScrapingStatus.SKIPPED_DUPLICATE
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
            if not hasattr(song, 'lyrics') or not song.lyrics:
                try:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç
                    full_song = await asyncio.get_event_loop().run_in_executor(
                        self.executor,
                        lambda: self.circuit_breaker.call(self.genius.song, song.id)
                    )
                    self.metrics.api_calls += 1
                    
                    if full_song and hasattr(full_song, 'lyrics'):
                        song = full_song
                    else:
                        return ScrapingStatus.SKIPPED_QUALITY
                        
                except Exception as e:
                    if "circuit breaker" in str(e).lower():
                        return ScrapingStatus.ERROR_API_LIMIT
                    else:
                        return ScrapingStatus.ERROR_NETWORK
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –ë–î (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if self.db.song_exists(url=song_url):
                self.url_cache.add(song_url)
                return ScrapingStatus.SKIPPED_DUPLICATE
            
            # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
            lyrics = await asyncio.get_event_loop().run_in_executor(
                self.executor, self.clean_lyrics, song.lyrics
            )
            
            is_valid, reason = self._is_valid_lyrics(lyrics)
            if not is_valid:
                logger.debug(f"‚è© –ù–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({reason}): {song.title}")
                return ScrapingStatus.SKIPPED_QUALITY
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            song_hash = self.generate_song_hash(artist_name, song.title, lyrics)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = self.extract_metadata(song)
            metadata['processing_time'] = time.time() - start_time
            metadata['song_hash'] = song_hash
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∞—Ç—á–µ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            song_data = {
                'artist': artist_name,
                'title': song.title,
                'lyrics': lyrics,
                'url': song_url,
                'genius_id': getattr(song, 'id', None),
                'metadata': metadata
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞—Ç—á
            should_flush = self.batch_processor.add_song(song_data)
            if should_flush:
                batch = self.batch_processor.get_pending_batch()
                saved_count = await self.process_song_batch(batch)
                logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á: {saved_count} –ø–µ—Å–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –≤ –∫—ç—à
            self.url_cache.add(song_url)
            
            word_count = len(lyrics.split())
            logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {artist_name} - {song.title} ({word_count} —Å–ª–æ–≤)")
            
            return ScrapingStatus.SUCCESS
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {song.title}: {e}")
            return ScrapingStatus.ERROR_UNKNOWN

    async def scrape_artist_songs_async(self, artist_name: str, max_songs: int = 500) -> int:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥ –ø–µ—Å–µ–Ω –∞—Ä—Ç–∏—Å—Ç–∞"""
        logger.info(f"üé§ –ù–∞—á–∏–Ω–∞–µ–º –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä—Ç–∏—Å—Ç–∞: {artist_name}")
        
        try:
            processed_count = 0
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
            self.monitor.log_resources()
            
            async for song, song_number in self.get_songs_async_generator(artist_name, max_songs):
                if self.shutdown_requested:
                    break
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Å–Ω–∏
                processing_start = time.time()
                status = await self.process_single_song(song, song_number, artist_name)
                processing_time = time.time() - processing_start
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                self.metrics.increment(status, processing_time)
                processed_count += 1
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if processed_count % 25 == 0:
                    logger.info(f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–µ—Å–µ–Ω –¥–ª—è {artist_name}")
                    logger.info(f"üìä Success rate: {self.metrics.success_rate:.1f}%")
                    self.monitor.log_resources()
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
                if status in [ScrapingStatus.ERROR_NETWORK, ScrapingStatus.ERROR_API_LIMIT]:
                    await self.safe_delay(is_error=True, retry_count=self.metrics.error_network)
                elif status == ScrapingStatus.SUCCESS:
                    await self.safe_delay(is_error=False)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                if processed_count % 50 == 0:
                    limit_exceeded, status_mem = self.monitor.check_memory_limit()
                    if limit_exceeded:
                        logger.info("üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
                        self.monitor.force_garbage_collection()
                        self.metrics.gc_runs += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞—Ç—á
            if self.batch_processor.has_pending():
                final_batch = self.batch_processor.get_pending_batch()
                await self.process_song_batch(final_batch)
                logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞—Ç—á")
            
            logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {artist_name}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–µ—Å–µ–Ω")
            return self.metrics.added
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å –∞—Ä—Ç–∏—Å—Ç–æ–º {artist_name}: {e}")
            return 0

    async def run_async_scraping_session(self, artists: List[str], songs_per_artist: int = 500):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ê–°–ò–ù–•–†–û–ù–ù–£–Æ —Å–µ—Å—Å–∏—é: {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        
        initial_stats = self.db.get_stats()
        logger.info(f"üìö –£–∂–µ –≤ PostgreSQL: {initial_stats['total_songs']} –ø–µ—Å–µ–Ω")
        
        try:
            for i, artist_name in enumerate(artists, 1):
                if self.shutdown_requested:
                    logger.info("üõë –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É")
                    break
                
                logger.info(f"\n{'='*70}")
                logger.info(f"üé§ –ê—Ä—Ç–∏—Å—Ç {i}/{len(artists)}: {artist_name}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ç–∏—Å—Ç–∞
                artist_start_time = time.time()
                added_count = await self.scrape_artist_songs_async(artist_name, songs_per_artist)
                artist_time = time.time() - artist_start_time
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É
                stats = self.db.get_stats()
                logger.info(f"‚úÖ {artist_name}: +{added_count} –ø–µ—Å–µ–Ω –∑–∞ {artist_time:.1f}—Å")
                logger.info(f"üìä –í—Å–µ–≥–æ –≤ –ë–î: {stats['total_songs']} –ø–µ—Å–µ–Ω –æ—Ç {stats['unique_artists']} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –∞—Ä—Ç–∏—Å—Ç–æ–≤
                if i % 5 == 0:
                    self.show_detailed_metrics()
                
                # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ä—Ç–∏—Å—Ç–∞–º–∏
                if i < len(artists) and not self.shutdown_requested:
                    # –ü–∞—É–∑–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—Ä—Ç–∏—Å—Ç–∞
                    if added_count > 10:
                        pause_time = random.uniform(15, 25)  # –£—Å–ø–µ—à–Ω—ã–π –∞—Ä—Ç–∏—Å—Ç - –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞
                    elif added_count > 0:
                        pause_time = random.uniform(25, 35)  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
                    else:
                        pause_time = random.uniform(45, 60)  # –ü—Ä–æ–±–ª–µ–º—ã - –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞
                    
                    logger.info(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ä—Ç–∏—Å—Ç–∞–º–∏: {pause_time:.1f}—Å")
                    await self.safe_delay_with_progress(pause_time)
        
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏: {e}")
        finally:
            await self.finalize_session()

    async def safe_delay_with_progress(self, total_seconds: float):
        """–ü–∞—É–∑–∞ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        intervals = int(total_seconds)
        for i in range(intervals):
            if self.shutdown_requested:
                break
            if i % 10 == 0 and i > 0:
                logger.info(f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {intervals - i}—Å...")
            await asyncio.sleep(1)

    def show_detailed_metrics(self):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        stats = self.db.get_stats()
        runtime = self.metrics.runtime
        
        logger.info(f"\n{'='*70}")
        logger.info(f"üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {runtime}")
        logger.info(f"üéµ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–µ—Å–µ–Ω: {self.metrics.processed}")
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {self.metrics.added} ({self.metrics.success_rate:.1f}%)")
        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {self.metrics.skipped_duplicates}")
        logger.info(f"üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–∫–∞—á–µ—Å—Ç–≤–æ): {self.metrics.skipped_quality}")
        
        logger.info(f"\nüö® –û–®–ò–ë–ö–ò:")
        logger.info(f"üåê –°–µ—Ç–µ–≤—ã–µ: {self.metrics.error_network}")
        logger.info(f"üîí API –ª–∏–º–∏—Ç—ã: {self.metrics.error_api_limit}")
        logger.info(f"üìù –ü–∞—Ä—Å–∏–Ω–≥: {self.metrics.error_parsing}")
        logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ: {self.metrics.error_unknown}")
        
        logger.info(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
        logger.info(f"üìû API –≤—ã–∑–æ–≤–æ–≤: {self.metrics.api_calls}")
        logger.info(f"üíæ –ü–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à: {self.metrics.cache_hits}")
        logger.info(f"üì¶ –ë–∞—Ç—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {self.metrics.batch_saves}")
        logger.info(f"‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.metrics.avg_processing_time:.2f}—Å")
        logger.info(f"üóëÔ∏è –û—á–∏—Å—Ç–æ–∫ –ø–∞–º—è—Ç–∏: {self.metrics.gc_runs}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
        logger.info(f"\nüêò POSTGRESQL:")
        logger.info(f"üìö –í—Å–µ–≥–æ –ø–µ—Å–µ–Ω: {stats['total_songs']}")
        logger.info(f"üë• –ê—Ä—Ç–∏—Å—Ç–æ–≤: {stats['unique_artists']}")
        logger.info(f"üìù –°—Ä–µ–¥–Ω–µ–µ —Å–ª–æ–≤: {stats['avg_words']}")
        logger.info(f"‚≠ê –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {stats['avg_quality']}")
        
        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if runtime.total_seconds() > 0:
            songs_per_hour = (self.metrics.added / runtime.total_seconds()) * 3600
            logger.info(f"üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {songs_per_hour:.1f} –ø–µ—Å–µ–Ω/—á–∞—Å")
        
        logger.info(f"{'='*70}\n")

    async def finalize_session(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ —Å –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        logger.info(f"\n{'='*70}")
        logger.info(f"üèÅ –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ê–°–ò–ù–•–†–û–ù–ù–û–ô –°–ï–°–°–ò–ò")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞—Ç—á–∏
        if self.batch_processor.has_pending():
            final_batch = self.batch_processor.get_pending_batch()
            await self.process_song_batch(final_batch)
            logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞—Ç—á–∏")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.show_detailed_metrics()
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.show_optimization_recommendations()
        
        logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        self.executor.shutdown(wait=True)
        self.db.close()
        self._restore_proxy_env()

    def show_optimization_recommendations(self):
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        logger.info(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:")
        
        # –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if self.metrics.success_rate < 50:
            logger.info("‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ timeout –∏–ª–∏ –ø–∞—É–∑")
        elif self.metrics.success_rate > 90:
            logger.info("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å - –º–æ–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –ø–∞—É–∑—ã –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        if self.metrics.error_network > self.metrics.error_api_limit * 2:
            logger.info("üåê –ú–Ω–æ–≥–æ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        
        if self.metrics.error_api_limit > 10:
            logger.info("üîí –ú–Ω–æ–≥–æ API –ª–∏–º–∏—Ç–æ–≤ - —É–≤–µ–ª–∏—á—å—Ç–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        cache_hit_rate = (self.metrics.cache_hits / max(1, self.metrics.processed)) * 100
        if cache_hit_rate > 20:
            logger.info(f"üíæ –í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞ ({cache_hit_rate:.1f}%)")
        
        if self.metrics.gc_runs > self.metrics.processed / 50:
            logger.info("üóëÔ∏è –ß–∞—Å—Ç—ã–µ GC - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏")
        
        # –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if self.metrics.batch_saves > 0:
            avg_batch_size = self.metrics.added / self.metrics.batch_saves
            if avg_batch_size < 5:
                logger.info("üì¶ –ú–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏ - —É–≤–µ–ª–∏—á—å—Ç–µ batch_size –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è")
            elif avg_batch_size > 20:
                logger.info("üì¶ –ë–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏ - —É–º–µ–Ω—å—à–∏—Ç–µ batch_size –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏")

    def close(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        logger.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL...")
        self.executor.shutdown(wait=True)
        self.db.close()
        self._restore_proxy_env()

# Utility functions
def load_artist_list(filename: str = "rap_artists.json") -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º remaining_artists.json"""
    try:
        remaining_file = os.path.join(DATA_DIR, "remaining_artists.json")
        if os.path.exists(remaining_file):
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ {remaining_file}")
            with open(remaining_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        
        full_file = os.path.join(DATA_DIR, filename)
        if os.path.exists(full_file):
            logger.info(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤ –∏–∑ {full_file}")
            with open(full_file, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∞—Ä—Ç–∏—Å—Ç–æ–≤: {e}")
    
    # Fallback —Å–ø–∏—Å–æ–∫
    logger.info("üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–∏—Å—Ç–æ–≤")
    return [
        "J. Cole", "Drake", "Eminem", "Kanye West", "Travis Scott", 
        "Lil Wayne", "Jay-Z", "Nas", "Tupac", "The Notorious B.I.G.",
        "Lil Baby", "Future", "21 Savage", "Post Malone", "Tyler, The Creator",
        "A$AP Rocky", "Mac Miller", "Childish Gambino", "Logic", "Big Sean",
        "Chance the Rapper", "Wiz Khalifa", "Meek Mill", "2 Chainz", "Pusha T"
    ]

async def async_main():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not GENIUS_TOKEN:
        logger.error("‚ùå Genius API token –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∞–ø–µ—Ä–∞
    MEMORY_LIMIT_MB = 4096  # –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏
    BATCH_SIZE = 15         # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    
    scraper = OptimizedPostgreSQLScraper(
        GENIUS_TOKEN, 
        memory_limit_mb=MEMORY_LIMIT_MB,
        batch_size=BATCH_SIZE
    )
    
    try:
        artists = load_artist_list()
        SONGS_PER_ARTIST = 500
        
        logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(artists)} –∞—Ä—Ç–∏—Å—Ç–æ–≤")
        logger.info(f"üéµ –¶–µ–ª—å: ~{len(artists) * SONGS_PER_ARTIST} –ø–µ—Å–µ–Ω")
        logger.info(f"üíæ –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {MEMORY_LIMIT_MB}MB, Batch: {BATCH_SIZE}")
        logger.info(f"‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É")
        
        await scraper.run_async_scraping_session(artists, SONGS_PER_ARTIST)
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –≤ async_main: {e}")
    finally:
        await scraper.finalize_session()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞"""
    if not GENIUS_TOKEN:
        logger.error("‚ùå Genius API token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
        return
    
    logger.info("üöÄ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    logger.info("1. üî• –ê–°–ò–ù–•–†–û–ù–ù–´–ô —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    logger.info("2. üìä –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
    
    try:
        choice = input("–í—ã–±–æ—Ä (1/2): ").strip()
        
        if choice == "1" or choice == "":
            logger.info("‚ö° –ó–∞–ø—É—Å–∫ –≤ –ê–°–ò–ù–•–†–û–ù–ù–û–ú —Ä–µ–∂–∏–º–µ...")
            asyncio.run(async_main())
        else:
            logger.info("üìä –ó–∞–ø—É—Å–∫ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
            # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
            scraper = OptimizedPostgreSQLScraper(GENIUS_TOKEN)
            artists = load_artist_list()
            scraper.run_scraping_session(artists, 500)
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()